// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/geniusrabbit/blaze-api/server/graphql/connectors"
	models1 "github.com/geniusrabbit/blaze-api/server/graphql/models"
	"github.com/geniusrabbit/blaze-api/server/graphql/types"
	"github.com/google/uuid"
	"github.com/sspserver/api/internal/server/graphql/models"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Category() CategoryResolver
	DeviceModel() DeviceModelResolver
	Mutation() MutationResolver
	OS() OSResolver
	Query() QueryResolver
	StatisticItemKey() StatisticItemKeyResolver
}

type DirectiveRoot struct {
	Acl               func(ctx context.Context, obj any, next graphql.Resolver, permissions []string) (res any, err error)
	Auth              func(ctx context.Context, obj any, next graphql.Resolver) (res any, err error)
	HasPermissions    func(ctx context.Context, obj any, next graphql.Resolver, permissions []string) (res any, err error)
	Length            func(ctx context.Context, obj any, next graphql.Resolver, min int, max int, trim bool, ornil bool) (res any, err error)
	Notempty          func(ctx context.Context, obj any, next graphql.Resolver, trim bool, ornil bool) (res any, err error)
	Regex             func(ctx context.Context, obj any, next graphql.Resolver, pattern string, trim bool, ornil bool) (res any, err error)
	SkipNoPermissions func(ctx context.Context, obj any, next graphql.Resolver, permissions []string) (res any, err error)
}

type ComplexityRoot struct {
	Account struct {
		ClientURI         func(childComplexity int) int
		Contacts          func(childComplexity int) int
		CreatedAt         func(childComplexity int) int
		Description       func(childComplexity int) int
		ID                func(childComplexity int) int
		LogoURI           func(childComplexity int) int
		PolicyURI         func(childComplexity int) int
		Status            func(childComplexity int) int
		StatusMessage     func(childComplexity int) int
		TermsOfServiceURI func(childComplexity int) int
		Title             func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
	}

	AccountConnection struct {
		Edges      func(childComplexity int) int
		List       func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	AccountCreatePayload struct {
		Account          func(childComplexity int) int
		ClientMutationID func(childComplexity int) int
		Owner            func(childComplexity int) int
	}

	AccountEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	AccountPayload struct {
		Account          func(childComplexity int) int
		AccountID        func(childComplexity int) int
		ClientMutationID func(childComplexity int) int
	}

	AdFormat struct {
		Active      func(childComplexity int) int
		Codename    func(childComplexity int) int
		Config      func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		DeletedAt   func(childComplexity int) int
		Description func(childComplexity int) int
		Height      func(childComplexity int) int
		ID          func(childComplexity int) int
		MinHeight   func(childComplexity int) int
		MinWidth    func(childComplexity int) int
		Title       func(childComplexity int) int
		Type        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		Width       func(childComplexity int) int
	}

	AdFormatConnection struct {
		Edges      func(childComplexity int) int
		List       func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	AdFormatEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	AdFormatPayload struct {
		ClientMutationID func(childComplexity int) int
		Format           func(childComplexity int) int
		FormatID         func(childComplexity int) int
	}

	Application struct {
		AccountID    func(childComplexity int) int
		Active       func(childComplexity int) int
		Categories   func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		CreatorID    func(childComplexity int) int
		DeletedAt    func(childComplexity int) int
		Description  func(childComplexity int) int
		ID           func(childComplexity int) int
		Platform     func(childComplexity int) int
		Premium      func(childComplexity int) int
		Private      func(childComplexity int) int
		RevenueShare func(childComplexity int) int
		Status       func(childComplexity int) int
		Title        func(childComplexity int) int
		Type         func(childComplexity int) int
		URI          func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
	}

	ApplicationConnection struct {
		Edges      func(childComplexity int) int
		List       func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ApplicationEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ApplicationPayload struct {
		Application      func(childComplexity int) int
		ApplicationID    func(childComplexity int) int
		ClientMutationID func(childComplexity int) int
	}

	AuthClient struct {
		AccountID          func(childComplexity int) int
		AllowedCORSOrigins func(childComplexity int) int
		Audience           func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		DeletedAt          func(childComplexity int) int
		ExpiresAt          func(childComplexity int) int
		GrantTypes         func(childComplexity int) int
		ID                 func(childComplexity int) int
		Public             func(childComplexity int) int
		RedirectURIs       func(childComplexity int) int
		ResponseTypes      func(childComplexity int) int
		Scope              func(childComplexity int) int
		Secret             func(childComplexity int) int
		SubjectType        func(childComplexity int) int
		Title              func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
		UserID             func(childComplexity int) int
	}

	AuthClientConnection struct {
		Edges      func(childComplexity int) int
		List       func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	AuthClientEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	AuthClientPayload struct {
		AuthClient       func(childComplexity int) int
		AuthClientID     func(childComplexity int) int
		ClientMutationID func(childComplexity int) int
	}

	Browser struct {
		Active             func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		DeletedAt          func(childComplexity int) int
		Description        func(childComplexity int) int
		ID                 func(childComplexity int) int
		MatchNameExp       func(childComplexity int) int
		MatchUserAgentExp  func(childComplexity int) int
		MatchVersionMaxExp func(childComplexity int) int
		MatchVersionMinExp func(childComplexity int) int
		Name               func(childComplexity int) int
		Parent             func(childComplexity int) int
		ParentID           func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
		Version            func(childComplexity int) int
		Versions           func(childComplexity int) int
		YearEndSupport     func(childComplexity int) int
		YearRelease        func(childComplexity int) int
	}

	BrowserConnection struct {
		Edges      func(childComplexity int) int
		List       func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	BrowserEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	BrowserPayload struct {
		Browser          func(childComplexity int) int
		BrowserID        func(childComplexity int) int
		ClientMutationID func(childComplexity int) int
	}

	Category struct {
		Active      func(childComplexity int) int
		Childrens   func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		DeletedAt   func(childComplexity int) int
		Description func(childComplexity int) int
		IABCode     func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Parent      func(childComplexity int) int
		ParentID    func(childComplexity int) int
		Position    func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	CategoryConnection struct {
		Edges      func(childComplexity int) int
		List       func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CategoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CategoryPayload struct {
		Category         func(childComplexity int) int
		CategoryID       func(childComplexity int) int
		ClientMutationID func(childComplexity int) int
	}

	Continent struct {
		Code2     func(childComplexity int) int
		Countries func(childComplexity int) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
	}

	Coordinates struct {
		Lat func(childComplexity int) int
		Lon func(childComplexity int) int
	}

	Country struct {
		Capital       func(childComplexity int) int
		Code2         func(childComplexity int) int
		Code3         func(childComplexity int) int
		Continent     func(childComplexity int) int
		ContinentCode func(childComplexity int) int
		Coordinates   func(childComplexity int) int
		Currency      func(childComplexity int) int
		ID            func(childComplexity int) int
		Languages     func(childComplexity int) int
		Name          func(childComplexity int) int
		NativeName    func(childComplexity int) int
		PhoneCodes    func(childComplexity int) int
		TimeZones     func(childComplexity int) int
	}

	DeviceMaker struct {
		Active      func(childComplexity int) int
		Codename    func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		DeletedAt   func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		MatchExp    func(childComplexity int) int
		Models      func(childComplexity int) int
		Name        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	DeviceMakerConnection struct {
		Edges      func(childComplexity int) int
		List       func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	DeviceMakerEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	DeviceMakerPayload struct {
		ClientMutationID func(childComplexity int) int
		Maker            func(childComplexity int) int
		MakerID          func(childComplexity int) int
	}

	DeviceModel struct {
		Active        func(childComplexity int) int
		Codename      func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		DeletedAt     func(childComplexity int) int
		Description   func(childComplexity int) int
		ID            func(childComplexity int) int
		Maker         func(childComplexity int) int
		MakerCodename func(childComplexity int) int
		MatchExp      func(childComplexity int) int
		Name          func(childComplexity int) int
		Parent        func(childComplexity int) int
		ParentID      func(childComplexity int) int
		Type          func(childComplexity int) int
		TypeCodename  func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		Version       func(childComplexity int) int
		Versions      func(childComplexity int, filter *models.DeviceModelListFilter, order []*models.DeviceModelListOrder) int
		YearRelease   func(childComplexity int) int
	}

	DeviceModelConnection struct {
		Edges      func(childComplexity int) int
		List       func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	DeviceModelEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	DeviceModelPayload struct {
		ClientMutationID func(childComplexity int) int
		Model            func(childComplexity int) int
		ModelID          func(childComplexity int) int
	}

	DeviceType struct {
		Active      func(childComplexity int) int
		Codename    func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
	}

	DirectAccessToken struct {
		AccountID   func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		Description func(childComplexity int) int
		ExpiresAt   func(childComplexity int) int
		ID          func(childComplexity int) int
		Token       func(childComplexity int) int
		UserID      func(childComplexity int) int
	}

	DirectAccessTokenConnection struct {
		Edges      func(childComplexity int) int
		List       func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	DirectAccessTokenEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	DirectAccessTokenPayload struct {
		ClientMutationID func(childComplexity int) int
		Token            func(childComplexity int) int
	}

	HistoryAction struct {
		AccountID  func(childComplexity int) int
		ActionAt   func(childComplexity int) int
		Data       func(childComplexity int) int
		ID         func(childComplexity int) int
		Message    func(childComplexity int) int
		Name       func(childComplexity int) int
		ObjectID   func(childComplexity int) int
		ObjectIDs  func(childComplexity int) int
		ObjectType func(childComplexity int) int
		RequestID  func(childComplexity int) int
		UserID     func(childComplexity int) int
	}

	HistoryActionConnection struct {
		Edges      func(childComplexity int) int
		List       func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	HistoryActionEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	HistoryActionPayload struct {
		Action           func(childComplexity int) int
		ActionID         func(childComplexity int) int
		ClientMutationID func(childComplexity int) int
	}

	Member struct {
		Account   func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		IsAdmin   func(childComplexity int) int
		Roles     func(childComplexity int) int
		Status    func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		User      func(childComplexity int) int
	}

	MemberConnection struct {
		Edges      func(childComplexity int) int
		List       func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	MemberEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	MemberPayload struct {
		ClientMutationID func(childComplexity int) int
		Member           func(childComplexity int) int
		MemberID         func(childComplexity int) int
	}

	Mutation struct {
		ActivateZone              func(childComplexity int, id uint64, msg *string) int
		ApproveAccount            func(childComplexity int, id uint64, msg string) int
		ApproveAccountMember      func(childComplexity int, memberID uint64, msg string) int
		ApproveApplication        func(childComplexity int, id uint64, msg *string) int
		ApproveRTBSource          func(childComplexity int, id uint64, msg *string) int
		ApproveUser               func(childComplexity int, id uint64, msg *string) int
		ApproveZone               func(childComplexity int, id uint64, msg *string) int
		CreateApplication         func(childComplexity int, input models.ApplicationCreateInput) int
		CreateAuthClient          func(childComplexity int, input models1.AuthClientInput) int
		CreateBrowser             func(childComplexity int, input models.BrowserCreateInput) int
		CreateCategory            func(childComplexity int, input models.CategoryInput) int
		CreateDeviceMaker         func(childComplexity int, input models.DeviceMakerCreateInput) int
		CreateDeviceModel         func(childComplexity int, input models.DeviceModelCreateInput) int
		CreateFormat              func(childComplexity int, input models.AdFormatInput) int
		CreateOs                  func(childComplexity int, input models.OSCreateInput) int
		CreateRTBSource           func(childComplexity int, input models.RTBSourceInput) int
		CreateRole                func(childComplexity int, input models1.RBACRoleInput) int
		CreateUser                func(childComplexity int, input models1.UserInput) int
		CreateZone                func(childComplexity int, input models.ZoneInput) int
		DeactivateZone            func(childComplexity int, id uint64, msg *string) int
		DeleteApplication         func(childComplexity int, id uint64, msg *string) int
		DeleteAuthClient          func(childComplexity int, id string, msg *string) int
		DeleteBrowser             func(childComplexity int, id uint64, msg *string) int
		DeleteCategory            func(childComplexity int, id uint64, msg *string) int
		DeleteDeviceMaker         func(childComplexity int, id uint64, msg *string) int
		DeleteDeviceModel         func(childComplexity int, id uint64, msg *string) int
		DeleteFormat              func(childComplexity int, id uint64, codename string, msg *string) int
		DeleteOs                  func(childComplexity int, id uint64, msg *string) int
		DeleteRTBSource           func(childComplexity int, id uint64, msg *string) int
		DeleteRole                func(childComplexity int, id uint64, msg *string) int
		DeleteZone                func(childComplexity int, id uint64, msg *string) int
		DisconnectSocialAccount   func(childComplexity int, id uint64) int
		GenerateDirectAccessToken func(childComplexity int, userID *uint64, description string, expiresAt *time.Time) int
		InviteAccountMember       func(childComplexity int, accountID uint64, member models1.InviteMemberInput) int
		Login                     func(childComplexity int, login string, password string) int
		Logout                    func(childComplexity int) int
		PauseApplication          func(childComplexity int, id uint64, msg *string) int
		PauseRTBSource            func(childComplexity int, id uint64) int
		Poke                      func(childComplexity int) int
		RegisterAccount           func(childComplexity int, input models1.AccountCreateInput) int
		RejectAccount             func(childComplexity int, id uint64, msg string) int
		RejectAccountMember       func(childComplexity int, memberID uint64, msg string) int
		RejectApplication         func(childComplexity int, id uint64, msg *string) int
		RejectRTBSource           func(childComplexity int, id uint64, msg *string) int
		RejectUser                func(childComplexity int, id uint64, msg *string) int
		RejectZone                func(childComplexity int, id uint64, msg *string) int
		RemoveAccountMember       func(childComplexity int, memberID uint64) int
		ResetUserPassword         func(childComplexity int, email string) int
		RevokeDirectAccessToken   func(childComplexity int, filter models1.DirectAccessTokenListFilter) int
		RunApplication            func(childComplexity int, id uint64, msg *string) int
		RunRTBSource              func(childComplexity int, id uint64) int
		SetOption                 func(childComplexity int, name string, value *types.NullableJSON, typeArg models1.OptionType, targetID uint64) int
		SwitchAccount             func(childComplexity int, id uint64) int
		UpdateAccount             func(childComplexity int, id uint64, input models1.AccountInput) int
		UpdateAccountMember       func(childComplexity int, memberID uint64, member models1.MemberInput) int
		UpdateApplication         func(childComplexity int, id uint64, input models.ApplicationUpdateInput) int
		UpdateAuthClient          func(childComplexity int, id string, input models1.AuthClientInput) int
		UpdateBrowser             func(childComplexity int, id uint64, input models.BrowserUpdateInput) int
		UpdateCategory            func(childComplexity int, id uint64, input models.CategoryInput) int
		UpdateDeviceMaker         func(childComplexity int, id uint64, input models.DeviceMakerUpdateInput) int
		UpdateDeviceModel         func(childComplexity int, id uint64, input models.DeviceModelUpdateInput) int
		UpdateFormat              func(childComplexity int, id uint64, input models.AdFormatInput) int
		UpdateOs                  func(childComplexity int, id uint64, input models.OSUpdateInput) int
		UpdateRTBSource           func(childComplexity int, id uint64, input models.RTBSourceInput) int
		UpdateRole                func(childComplexity int, id uint64, input models1.RBACRoleInput) int
		UpdateUser                func(childComplexity int, id uint64, input models1.UserInput) int
		UpdateUserPassword        func(childComplexity int, token string, email string, password string) int
		UpdateZone                func(childComplexity int, id uint64, input models.ZoneInput) int
	}

	OS struct {
		Active             func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		DeletedAt          func(childComplexity int) int
		Description        func(childComplexity int) int
		ID                 func(childComplexity int) int
		MatchNameExp       func(childComplexity int) int
		MatchUserAgentExp  func(childComplexity int) int
		MatchVersionMaxExp func(childComplexity int) int
		MatchVersionMinExp func(childComplexity int) int
		Name               func(childComplexity int) int
		Parent             func(childComplexity int) int
		ParentID           func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
		Version            func(childComplexity int) int
		Versions           func(childComplexity int) int
		YearEndSupport     func(childComplexity int) int
		YearRelease        func(childComplexity int) int
	}

	OSConnection struct {
		Edges      func(childComplexity int) int
		List       func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	OSEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	OSPayload struct {
		ClientMutationID func(childComplexity int) int
		Os               func(childComplexity int) int
		Osid             func(childComplexity int) int
	}

	Option struct {
		Name     func(childComplexity int) int
		TargetID func(childComplexity int) int
		Type     func(childComplexity int) int
		Value    func(childComplexity int) int
	}

	OptionConnection struct {
		Edges      func(childComplexity int) int
		List       func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	OptionEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	OptionPayload struct {
		ClientMutationID func(childComplexity int) int
		Name             func(childComplexity int) int
		Option           func(childComplexity int) int
	}

	PageInfo struct {
		Count           func(childComplexity int) int
		EndCursor       func(childComplexity int) int
		HasNextPage     func(childComplexity int) int
		HasPreviousPage func(childComplexity int) int
		Page            func(childComplexity int) int
		StartCursor     func(childComplexity int) int
		Total           func(childComplexity int) int
	}

	Profile struct {
		About       func(childComplexity int) int
		CompanyName func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		Email       func(childComplexity int) int
		FirstName   func(childComplexity int) int
		ID          func(childComplexity int) int
		LastName    func(childComplexity int) int
		Messgangers func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		User        func(childComplexity int) int
	}

	ProfileMessanger struct {
		Address func(childComplexity int) int
		Mtype   func(childComplexity int) int
	}

	Query struct {
		Account                        func(childComplexity int, id uint64) int
		Application                    func(childComplexity int, id uint64) int
		AuthClient                     func(childComplexity int, id string) int
		Browser                        func(childComplexity int, id uint64) int
		Category                       func(childComplexity int, id uint64) int
		CheckPermission                func(childComplexity int, name string, key *string, targetID *string, idKey *string) int
		Continents                     func(childComplexity int) int
		Countries                      func(childComplexity int) int
		CurrentAccount                 func(childComplexity int) int
		CurrentSession                 func(childComplexity int) int
		CurrentSocialAccounts          func(childComplexity int, filter *models1.SocialAccountListFilter, order *models1.SocialAccountListOrder) int
		CurrentUser                    func(childComplexity int) int
		DeviceMaker                    func(childComplexity int, id uint64, codename string) int
		DeviceModel                    func(childComplexity int, id uint64, codename string) int
		Format                         func(childComplexity int, id uint64, codename string) int
		GetDirectAccessToken           func(childComplexity int, id uint64) int
		ListAccountRolesAndPermissions func(childComplexity int, accountID uint64, order *models1.RBACRoleListOrder) int
		ListAccounts                   func(childComplexity int, filter *models1.AccountListFilter, order *models1.AccountListOrder, page *models1.Page) int
		ListApplications               func(childComplexity int, filter *models.ApplicationListFilter, order *models.ApplicationListOrder, page *models1.Page) int
		ListAuthClients                func(childComplexity int, filter *models1.AuthClientListFilter, order *models1.AuthClientListOrder, page *models1.Page) int
		ListBrowsers                   func(childComplexity int, filter *models.BrowserListFilter, order []*models.BrowserListOrder, page *models1.Page) int
		ListCategories                 func(childComplexity int, filter *models.CategoryListFilter, order *models.CategoryListOrder, page *models1.Page) int
		ListDeviceMakers               func(childComplexity int, filter *models.DeviceMakerListFilter, order []*models.DeviceMakerListOrder, page *models1.Page) int
		ListDeviceModels               func(childComplexity int, filter *models.DeviceModelListFilter, order []*models.DeviceModelListOrder, page *models1.Page) int
		ListDeviceTypes                func(childComplexity int) int
		ListDirectAccessTokens         func(childComplexity int, filter *models1.DirectAccessTokenListFilter, order *models1.DirectAccessTokenListOrder, page *models1.Page) int
		ListFormats                    func(childComplexity int, filter *models.AdFormatListFilter, order *models.AdFormatListOrder, page *models1.Page) int
		ListHistory                    func(childComplexity int, filter *models1.HistoryActionListFilter, order *models1.HistoryActionListOrder, page *models1.Page) int
		ListMembers                    func(childComplexity int, filter *models1.MemberListFilter, order *models1.MemberListOrder, page *models1.Page) int
		ListMyPermissions              func(childComplexity int, patterns []string) int
		ListOptions                    func(childComplexity int, filter *models1.OptionListFilter, order *models1.OptionListOrder, page *models1.Page) int
		ListOs                         func(childComplexity int, filter *models.OSListFilter, order []*models.OSListOrder, page *models1.Page) int
		ListPermissions                func(childComplexity int, patterns []string) int
		ListRTBSources                 func(childComplexity int, filter *models.RTBSourceListFilter, order *models.RTBSourceListOrder, page *models1.Page) int
		ListRoles                      func(childComplexity int, filter *models1.RBACRoleListFilter, order *models1.RBACRoleListOrder, page *models1.Page) int
		ListSocialAccounts             func(childComplexity int, filter *models1.SocialAccountListFilter, order *models1.SocialAccountListOrder, page *models1.Page) int
		ListUsers                      func(childComplexity int, filter *models1.UserListFilter, order *models1.UserListOrder, page *models1.Page) int
		ListZones                      func(childComplexity int, filter *models.ZoneListFilter, order *models.ZoneListOrder, page *models1.Page) int
		Option                         func(childComplexity int, name string, typeArg models1.OptionType, targetID uint64) int
		Os                             func(childComplexity int, id uint64) int
		RTBSource                      func(childComplexity int, id uint64) int
		Role                           func(childComplexity int, id uint64) int
		ServiceVersion                 func(childComplexity int) int
		SocialAccount                  func(childComplexity int, id uint64) int
		StatisticAdList                func(childComplexity int, filter *models.StatisticAdListFilter, group []models.StatisticKey, order []*models.StatisticAdKeyOrder, page *models1.Page) int
		User                           func(childComplexity int, id uint64, username string) int
		Zone                           func(childComplexity int, id uint64) int
	}

	RBACPermission struct {
		Access      func(childComplexity int) int
		Description func(childComplexity int) int
		Fullname    func(childComplexity int) int
		Name        func(childComplexity int) int
		Object      func(childComplexity int) int
	}

	RBACRole struct {
		ChildRoles         func(childComplexity int) int
		Context            func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		DeletedAt          func(childComplexity int) int
		Description        func(childComplexity int) int
		ID                 func(childComplexity int) int
		Name               func(childComplexity int) int
		PermissionPatterns func(childComplexity int) int
		Permissions        func(childComplexity int) int
		Title              func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
	}

	RBACRoleConnection struct {
		Edges      func(childComplexity int) int
		List       func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	RBACRoleEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	RBACRolePayload struct {
		ClientMutationID func(childComplexity int) int
		Role             func(childComplexity int) int
		RoleID           func(childComplexity int) int
	}

	RTBSource struct {
		AccountID             func(childComplexity int) int
		Accuracy              func(childComplexity int) int
		Active                func(childComplexity int) int
		AdBlock               func(childComplexity int) int
		Applications          func(childComplexity int) int
		AuctionType           func(childComplexity int) int
		Browsers              func(childComplexity int) int
		Carriers              func(childComplexity int) int
		Categories            func(childComplexity int) int
		Config                func(childComplexity int) int
		Countries             func(childComplexity int) int
		CreatedAt             func(childComplexity int) int
		DeletedAt             func(childComplexity int) int
		Description           func(childComplexity int) int
		DeviceTypes           func(childComplexity int) int
		Devices               func(childComplexity int) int
		Domains               func(childComplexity int) int
		Flags                 func(childComplexity int) int
		Formats               func(childComplexity int) int
		Headers               func(childComplexity int) int
		ID                    func(childComplexity int) int
		IP                    func(childComplexity int) int
		Languages             func(childComplexity int) int
		MaxBid                func(childComplexity int) int
		Method                func(childComplexity int) int
		MinBid                func(childComplexity int) int
		MinimalWeight         func(childComplexity int) int
		Os                    func(childComplexity int) int
		PriceCorrectionReduce func(childComplexity int) int
		PrivateBrowsing       func(childComplexity int) int
		Protocol              func(childComplexity int) int
		RequestType           func(childComplexity int) int
		Rps                   func(childComplexity int) int
		Secure                func(childComplexity int) int
		Status                func(childComplexity int) int
		Timeout               func(childComplexity int) int
		Title                 func(childComplexity int) int
		URL                   func(childComplexity int) int
		UpdatedAt             func(childComplexity int) int
		Zones                 func(childComplexity int) int
	}

	RTBSourceConnection struct {
		Edges      func(childComplexity int) int
		List       func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	RTBSourceEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	RTBSourcePayload struct {
		ClientMutationID func(childComplexity int) int
		Source           func(childComplexity int) int
		SourceID         func(childComplexity int) int
	}

	SessionToken struct {
		ExpiresAt func(childComplexity int) int
		IsAdmin   func(childComplexity int) int
		Roles     func(childComplexity int) int
		Token     func(childComplexity int) int
	}

	SocialAccount struct {
		Avatar    func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		Data      func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		Email     func(childComplexity int) int
		FirstName func(childComplexity int) int
		ID        func(childComplexity int) int
		LastName  func(childComplexity int) int
		Link      func(childComplexity int) int
		Provider  func(childComplexity int) int
		Sessions  func(childComplexity int) int
		SocialID  func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		UserID    func(childComplexity int) int
		Username  func(childComplexity int) int
	}

	SocialAccountConnection struct {
		Edges      func(childComplexity int) int
		List       func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	SocialAccountEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	SocialAccountPayload struct {
		ClientMutationID func(childComplexity int) int
		SocialAccount    func(childComplexity int) int
		SocialAccountID  func(childComplexity int) int
	}

	SocialAccountSession struct {
		AccessToken     func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		DeletedAt       func(childComplexity int) int
		ExpiresAt       func(childComplexity int) int
		Name            func(childComplexity int) int
		RefreshToken    func(childComplexity int) int
		Scope           func(childComplexity int) int
		SocialAccountID func(childComplexity int) int
		TokenType       func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
	}

	StatisticAdItem struct {
		BidPrice    func(childComplexity int) int
		Bids        func(childComplexity int) int
		Clicks      func(childComplexity int) int
		Ctr         func(childComplexity int) int
		Directs     func(childComplexity int) int
		ECpc        func(childComplexity int) int
		ECpm        func(childComplexity int) int
		Errors      func(childComplexity int) int
		Impressions func(childComplexity int) int
		Keys        func(childComplexity int) int
		Nobids      func(childComplexity int) int
		Profit      func(childComplexity int) int
		Requests    func(childComplexity int) int
		Skips       func(childComplexity int) int
		Views       func(childComplexity int) int
		Wins        func(childComplexity int) int
	}

	StatisticAdItemConnection struct {
		List       func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	StatisticItemKey struct {
		Key   func(childComplexity int) int
		Text  func(childComplexity int) int
		Value func(childComplexity int) int
	}

	StatusResponse struct {
		ClientMutationID func(childComplexity int) int
		Message          func(childComplexity int) int
		Status           func(childComplexity int) int
	}

	TimeZone struct {
		Lon  func(childComplexity int) int
		Name func(childComplexity int) int
	}

	User struct {
		CreatedAt     func(childComplexity int) int
		ID            func(childComplexity int) int
		Status        func(childComplexity int) int
		StatusMessage func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		Username      func(childComplexity int) int
	}

	UserConnection struct {
		Edges      func(childComplexity int) int
		List       func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	UserEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	UserPayload struct {
		ClientMutationID func(childComplexity int) int
		User             func(childComplexity int) int
		UserID           func(childComplexity int) int
	}

	Zone struct {
		AccountID          func(childComplexity int) int
		Active             func(childComplexity int) int
		AllowedFormats     func(childComplexity int) int
		AllowedSources     func(childComplexity int) int
		AllowedTypes       func(childComplexity int) int
		Campaigns          func(childComplexity int) int
		Codename           func(childComplexity int) int
		Context            func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		DefaultCode        func(childComplexity int) int
		DeletedAt          func(childComplexity int) int
		Description        func(childComplexity int) int
		DisallowedSources  func(childComplexity int) int
		FixedPurchasePrice func(childComplexity int) int
		ID                 func(childComplexity int) int
		MinEcpm            func(childComplexity int) int
		Status             func(childComplexity int) int
		Title              func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
	}

	ZoneConnection struct {
		Edges      func(childComplexity int) int
		List       func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ZoneEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ZonePayload struct {
		ClientMutationID func(childComplexity int) int
		Zone             func(childComplexity int) int
		ZoneID           func(childComplexity int) int
	}
}

type CategoryResolver interface {
	Childrens(ctx context.Context, obj *models.Category) ([]*models.Category, error)
}
type DeviceModelResolver interface {
	Versions(ctx context.Context, obj *models.DeviceModel, filter *models.DeviceModelListFilter, order []*models.DeviceModelListOrder) ([]*models.DeviceModel, error)
}
type MutationResolver interface {
	Poke(ctx context.Context) (string, error)
	Login(ctx context.Context, login string, password string) (*models1.SessionToken, error)
	Logout(ctx context.Context) (bool, error)
	SwitchAccount(ctx context.Context, id uint64) (*models1.SessionToken, error)
	RegisterAccount(ctx context.Context, input models1.AccountCreateInput) (*models1.AccountCreatePayload, error)
	UpdateAccount(ctx context.Context, id uint64, input models1.AccountInput) (*models1.AccountPayload, error)
	ApproveAccount(ctx context.Context, id uint64, msg string) (*models1.AccountPayload, error)
	RejectAccount(ctx context.Context, id uint64, msg string) (*models1.AccountPayload, error)
	InviteAccountMember(ctx context.Context, accountID uint64, member models1.InviteMemberInput) (*models1.MemberPayload, error)
	UpdateAccountMember(ctx context.Context, memberID uint64, member models1.MemberInput) (*models1.MemberPayload, error)
	RemoveAccountMember(ctx context.Context, memberID uint64) (*models1.MemberPayload, error)
	ApproveAccountMember(ctx context.Context, memberID uint64, msg string) (*models1.MemberPayload, error)
	RejectAccountMember(ctx context.Context, memberID uint64, msg string) (*models1.MemberPayload, error)
	DisconnectSocialAccount(ctx context.Context, id uint64) (*models1.SocialAccountPayload, error)
	CreateUser(ctx context.Context, input models1.UserInput) (*models1.UserPayload, error)
	UpdateUser(ctx context.Context, id uint64, input models1.UserInput) (*models1.UserPayload, error)
	ApproveUser(ctx context.Context, id uint64, msg *string) (*models1.UserPayload, error)
	RejectUser(ctx context.Context, id uint64, msg *string) (*models1.UserPayload, error)
	ResetUserPassword(ctx context.Context, email string) (*models1.StatusResponse, error)
	UpdateUserPassword(ctx context.Context, token string, email string, password string) (*models1.StatusResponse, error)
	CreateAuthClient(ctx context.Context, input models1.AuthClientInput) (*models1.AuthClientPayload, error)
	UpdateAuthClient(ctx context.Context, id string, input models1.AuthClientInput) (*models1.AuthClientPayload, error)
	DeleteAuthClient(ctx context.Context, id string, msg *string) (*models1.AuthClientPayload, error)
	GenerateDirectAccessToken(ctx context.Context, userID *uint64, description string, expiresAt *time.Time) (*models1.DirectAccessTokenPayload, error)
	RevokeDirectAccessToken(ctx context.Context, filter models1.DirectAccessTokenListFilter) (*models1.StatusResponse, error)
	SetOption(ctx context.Context, name string, value *types.NullableJSON, typeArg models1.OptionType, targetID uint64) (*models1.OptionPayload, error)
	CreateRole(ctx context.Context, input models1.RBACRoleInput) (*models1.RBACRolePayload, error)
	UpdateRole(ctx context.Context, id uint64, input models1.RBACRoleInput) (*models1.RBACRolePayload, error)
	DeleteRole(ctx context.Context, id uint64, msg *string) (*models1.RBACRolePayload, error)
	CreateFormat(ctx context.Context, input models.AdFormatInput) (*models.AdFormatPayload, error)
	UpdateFormat(ctx context.Context, id uint64, input models.AdFormatInput) (*models.AdFormatPayload, error)
	DeleteFormat(ctx context.Context, id uint64, codename string, msg *string) (*models.AdFormatPayload, error)
	CreateApplication(ctx context.Context, input models.ApplicationCreateInput) (*models.ApplicationPayload, error)
	UpdateApplication(ctx context.Context, id uint64, input models.ApplicationUpdateInput) (*models.ApplicationPayload, error)
	DeleteApplication(ctx context.Context, id uint64, msg *string) (*models.ApplicationPayload, error)
	RunApplication(ctx context.Context, id uint64, msg *string) (*models1.StatusResponse, error)
	PauseApplication(ctx context.Context, id uint64, msg *string) (*models1.StatusResponse, error)
	ApproveApplication(ctx context.Context, id uint64, msg *string) (*models1.StatusResponse, error)
	RejectApplication(ctx context.Context, id uint64, msg *string) (*models1.StatusResponse, error)
	CreateBrowser(ctx context.Context, input models.BrowserCreateInput) (*models.BrowserPayload, error)
	UpdateBrowser(ctx context.Context, id uint64, input models.BrowserUpdateInput) (*models.BrowserPayload, error)
	DeleteBrowser(ctx context.Context, id uint64, msg *string) (*models.BrowserPayload, error)
	CreateCategory(ctx context.Context, input models.CategoryInput) (*models.CategoryPayload, error)
	UpdateCategory(ctx context.Context, id uint64, input models.CategoryInput) (*models.CategoryPayload, error)
	DeleteCategory(ctx context.Context, id uint64, msg *string) (*models.CategoryPayload, error)
	CreateDeviceMaker(ctx context.Context, input models.DeviceMakerCreateInput) (*models.DeviceMakerPayload, error)
	UpdateDeviceMaker(ctx context.Context, id uint64, input models.DeviceMakerUpdateInput) (*models.DeviceMakerPayload, error)
	DeleteDeviceMaker(ctx context.Context, id uint64, msg *string) (*models.DeviceMakerPayload, error)
	CreateDeviceModel(ctx context.Context, input models.DeviceModelCreateInput) (*models.DeviceModelPayload, error)
	UpdateDeviceModel(ctx context.Context, id uint64, input models.DeviceModelUpdateInput) (*models.DeviceModelPayload, error)
	DeleteDeviceModel(ctx context.Context, id uint64, msg *string) (*models.DeviceModelPayload, error)
	CreateOs(ctx context.Context, input models.OSCreateInput) (*models.OSPayload, error)
	UpdateOs(ctx context.Context, id uint64, input models.OSUpdateInput) (*models.OSPayload, error)
	DeleteOs(ctx context.Context, id uint64, msg *string) (*models.OSPayload, error)
	CreateRTBSource(ctx context.Context, input models.RTBSourceInput) (*models.RTBSourcePayload, error)
	UpdateRTBSource(ctx context.Context, id uint64, input models.RTBSourceInput) (*models.RTBSourcePayload, error)
	DeleteRTBSource(ctx context.Context, id uint64, msg *string) (*models.RTBSourcePayload, error)
	RunRTBSource(ctx context.Context, id uint64) (*models1.StatusResponse, error)
	PauseRTBSource(ctx context.Context, id uint64) (*models1.StatusResponse, error)
	ApproveRTBSource(ctx context.Context, id uint64, msg *string) (*models1.StatusResponse, error)
	RejectRTBSource(ctx context.Context, id uint64, msg *string) (*models1.StatusResponse, error)
	CreateZone(ctx context.Context, input models.ZoneInput) (*models.ZonePayload, error)
	UpdateZone(ctx context.Context, id uint64, input models.ZoneInput) (*models.ZonePayload, error)
	DeleteZone(ctx context.Context, id uint64, msg *string) (*models.ZonePayload, error)
	ActivateZone(ctx context.Context, id uint64, msg *string) (*models1.StatusResponse, error)
	DeactivateZone(ctx context.Context, id uint64, msg *string) (*models1.StatusResponse, error)
	ApproveZone(ctx context.Context, id uint64, msg *string) (*models1.StatusResponse, error)
	RejectZone(ctx context.Context, id uint64, msg *string) (*models1.StatusResponse, error)
}
type OSResolver interface {
	Versions(ctx context.Context, obj *models.Os) ([]*models.Os, error)
}
type QueryResolver interface {
	ServiceVersion(ctx context.Context) (string, error)
	CurrentSession(ctx context.Context) (*models1.SessionToken, error)
	CurrentAccount(ctx context.Context) (*models1.AccountPayload, error)
	Account(ctx context.Context, id uint64) (*models1.AccountPayload, error)
	ListAccounts(ctx context.Context, filter *models1.AccountListFilter, order *models1.AccountListOrder, page *models1.Page) (*connectors.CollectionConnection[models1.Account, models1.AccountEdge], error)
	ListAccountRolesAndPermissions(ctx context.Context, accountID uint64, order *models1.RBACRoleListOrder) (*connectors.CollectionConnection[models1.RBACRole, models1.RBACRoleEdge], error)
	ListMembers(ctx context.Context, filter *models1.MemberListFilter, order *models1.MemberListOrder, page *models1.Page) (*connectors.CollectionConnection[models1.Member, models1.MemberEdge], error)
	SocialAccount(ctx context.Context, id uint64) (*models1.SocialAccountPayload, error)
	CurrentSocialAccounts(ctx context.Context, filter *models1.SocialAccountListFilter, order *models1.SocialAccountListOrder) (*connectors.CollectionConnection[models1.SocialAccount, models1.SocialAccountEdge], error)
	ListSocialAccounts(ctx context.Context, filter *models1.SocialAccountListFilter, order *models1.SocialAccountListOrder, page *models1.Page) (*connectors.CollectionConnection[models1.SocialAccount, models1.SocialAccountEdge], error)
	CurrentUser(ctx context.Context) (*models1.UserPayload, error)
	User(ctx context.Context, id uint64, username string) (*models1.UserPayload, error)
	ListUsers(ctx context.Context, filter *models1.UserListFilter, order *models1.UserListOrder, page *models1.Page) (*connectors.CollectionConnection[models1.User, models1.UserEdge], error)
	AuthClient(ctx context.Context, id string) (*models1.AuthClientPayload, error)
	ListAuthClients(ctx context.Context, filter *models1.AuthClientListFilter, order *models1.AuthClientListOrder, page *models1.Page) (*connectors.CollectionConnection[models1.AuthClient, models1.AuthClientEdge], error)
	GetDirectAccessToken(ctx context.Context, id uint64) (*models1.DirectAccessTokenPayload, error)
	ListDirectAccessTokens(ctx context.Context, filter *models1.DirectAccessTokenListFilter, order *models1.DirectAccessTokenListOrder, page *models1.Page) (*connectors.CollectionConnection[models1.DirectAccessToken, models1.DirectAccessTokenEdge], error)
	ListHistory(ctx context.Context, filter *models1.HistoryActionListFilter, order *models1.HistoryActionListOrder, page *models1.Page) (*connectors.CollectionConnection[models1.HistoryAction, models1.HistoryActionEdge], error)
	Option(ctx context.Context, name string, typeArg models1.OptionType, targetID uint64) (*models1.OptionPayload, error)
	ListOptions(ctx context.Context, filter *models1.OptionListFilter, order *models1.OptionListOrder, page *models1.Page) (*connectors.CollectionConnection[models1.Option, models1.OptionEdge], error)
	Role(ctx context.Context, id uint64) (*models1.RBACRolePayload, error)
	CheckPermission(ctx context.Context, name string, key *string, targetID *string, idKey *string) (*string, error)
	ListRoles(ctx context.Context, filter *models1.RBACRoleListFilter, order *models1.RBACRoleListOrder, page *models1.Page) (*connectors.CollectionConnection[models1.RBACRole, models1.RBACRoleEdge], error)
	ListPermissions(ctx context.Context, patterns []string) ([]*models1.RBACPermission, error)
	ListMyPermissions(ctx context.Context, patterns []string) ([]*models1.RBACPermission, error)
	Format(ctx context.Context, id uint64, codename string) (*models.AdFormatPayload, error)
	ListFormats(ctx context.Context, filter *models.AdFormatListFilter, order *models.AdFormatListOrder, page *models1.Page) (*connectors.CollectionConnection[models.AdFormat, models.AdFormatEdge], error)
	Application(ctx context.Context, id uint64) (*models.ApplicationPayload, error)
	ListApplications(ctx context.Context, filter *models.ApplicationListFilter, order *models.ApplicationListOrder, page *models1.Page) (*connectors.CollectionConnection[models.Application, models.ApplicationEdge], error)
	Browser(ctx context.Context, id uint64) (*models.BrowserPayload, error)
	ListBrowsers(ctx context.Context, filter *models.BrowserListFilter, order []*models.BrowserListOrder, page *models1.Page) (*connectors.CollectionConnection[models.Browser, models.BrowserEdge], error)
	Category(ctx context.Context, id uint64) (*models.CategoryPayload, error)
	ListCategories(ctx context.Context, filter *models.CategoryListFilter, order *models.CategoryListOrder, page *models1.Page) (*connectors.CollectionConnection[models.Category, models.CategoryEdge], error)
	Continents(ctx context.Context) ([]*models.Continent, error)
	Countries(ctx context.Context) ([]*models.Country, error)
	DeviceMaker(ctx context.Context, id uint64, codename string) (*models.DeviceMakerPayload, error)
	ListDeviceMakers(ctx context.Context, filter *models.DeviceMakerListFilter, order []*models.DeviceMakerListOrder, page *models1.Page) (*connectors.CollectionConnection[models.DeviceMaker, models.DeviceMakerEdge], error)
	DeviceModel(ctx context.Context, id uint64, codename string) (*models.DeviceModelPayload, error)
	ListDeviceModels(ctx context.Context, filter *models.DeviceModelListFilter, order []*models.DeviceModelListOrder, page *models1.Page) (*connectors.CollectionConnection[models.DeviceModel, models.DeviceModelEdge], error)
	ListDeviceTypes(ctx context.Context) ([]*models.DeviceType, error)
	Os(ctx context.Context, id uint64) (*models.OSPayload, error)
	ListOs(ctx context.Context, filter *models.OSListFilter, order []*models.OSListOrder, page *models1.Page) (*connectors.CollectionConnection[models.Os, models.OSEdge], error)
	RTBSource(ctx context.Context, id uint64) (*models.RTBSourcePayload, error)
	ListRTBSources(ctx context.Context, filter *models.RTBSourceListFilter, order *models.RTBSourceListOrder, page *models1.Page) (*connectors.CollectionConnection[models.RTBSource, models.RTBSourceEdge], error)
	StatisticAdList(ctx context.Context, filter *models.StatisticAdListFilter, group []models.StatisticKey, order []*models.StatisticAdKeyOrder, page *models1.Page) (*connectors.CollectionConnection[models.StatisticAdItem, struct{}], error)
	Zone(ctx context.Context, id uint64) (*models.ZonePayload, error)
	ListZones(ctx context.Context, filter *models.ZoneListFilter, order *models.ZoneListOrder, page *models1.Page) (*connectors.CollectionConnection[models.Zone, models.ZoneEdge], error)
}
type StatisticItemKeyResolver interface {
	Text(ctx context.Context, obj *models.StatisticItemKey) (string, error)
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]any) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "Account.clientURI":
		if e.complexity.Account.ClientURI == nil {
			break
		}

		return e.complexity.Account.ClientURI(childComplexity), true

	case "Account.contacts":
		if e.complexity.Account.Contacts == nil {
			break
		}

		return e.complexity.Account.Contacts(childComplexity), true

	case "Account.createdAt":
		if e.complexity.Account.CreatedAt == nil {
			break
		}

		return e.complexity.Account.CreatedAt(childComplexity), true

	case "Account.description":
		if e.complexity.Account.Description == nil {
			break
		}

		return e.complexity.Account.Description(childComplexity), true

	case "Account.ID":
		if e.complexity.Account.ID == nil {
			break
		}

		return e.complexity.Account.ID(childComplexity), true

	case "Account.logoURI":
		if e.complexity.Account.LogoURI == nil {
			break
		}

		return e.complexity.Account.LogoURI(childComplexity), true

	case "Account.policyURI":
		if e.complexity.Account.PolicyURI == nil {
			break
		}

		return e.complexity.Account.PolicyURI(childComplexity), true

	case "Account.status":
		if e.complexity.Account.Status == nil {
			break
		}

		return e.complexity.Account.Status(childComplexity), true

	case "Account.statusMessage":
		if e.complexity.Account.StatusMessage == nil {
			break
		}

		return e.complexity.Account.StatusMessage(childComplexity), true

	case "Account.termsOfServiceURI":
		if e.complexity.Account.TermsOfServiceURI == nil {
			break
		}

		return e.complexity.Account.TermsOfServiceURI(childComplexity), true

	case "Account.title":
		if e.complexity.Account.Title == nil {
			break
		}

		return e.complexity.Account.Title(childComplexity), true

	case "Account.updatedAt":
		if e.complexity.Account.UpdatedAt == nil {
			break
		}

		return e.complexity.Account.UpdatedAt(childComplexity), true

	case "AccountConnection.edges":
		if e.complexity.AccountConnection.Edges == nil {
			break
		}

		return e.complexity.AccountConnection.Edges(childComplexity), true

	case "AccountConnection.list":
		if e.complexity.AccountConnection.List == nil {
			break
		}

		return e.complexity.AccountConnection.List(childComplexity), true

	case "AccountConnection.pageInfo":
		if e.complexity.AccountConnection.PageInfo == nil {
			break
		}

		return e.complexity.AccountConnection.PageInfo(childComplexity), true

	case "AccountConnection.totalCount":
		if e.complexity.AccountConnection.TotalCount == nil {
			break
		}

		return e.complexity.AccountConnection.TotalCount(childComplexity), true

	case "AccountCreatePayload.account":
		if e.complexity.AccountCreatePayload.Account == nil {
			break
		}

		return e.complexity.AccountCreatePayload.Account(childComplexity), true

	case "AccountCreatePayload.clientMutationID":
		if e.complexity.AccountCreatePayload.ClientMutationID == nil {
			break
		}

		return e.complexity.AccountCreatePayload.ClientMutationID(childComplexity), true

	case "AccountCreatePayload.owner":
		if e.complexity.AccountCreatePayload.Owner == nil {
			break
		}

		return e.complexity.AccountCreatePayload.Owner(childComplexity), true

	case "AccountEdge.cursor":
		if e.complexity.AccountEdge.Cursor == nil {
			break
		}

		return e.complexity.AccountEdge.Cursor(childComplexity), true

	case "AccountEdge.node":
		if e.complexity.AccountEdge.Node == nil {
			break
		}

		return e.complexity.AccountEdge.Node(childComplexity), true

	case "AccountPayload.account":
		if e.complexity.AccountPayload.Account == nil {
			break
		}

		return e.complexity.AccountPayload.Account(childComplexity), true

	case "AccountPayload.accountID":
		if e.complexity.AccountPayload.AccountID == nil {
			break
		}

		return e.complexity.AccountPayload.AccountID(childComplexity), true

	case "AccountPayload.clientMutationID":
		if e.complexity.AccountPayload.ClientMutationID == nil {
			break
		}

		return e.complexity.AccountPayload.ClientMutationID(childComplexity), true

	case "AdFormat.active":
		if e.complexity.AdFormat.Active == nil {
			break
		}

		return e.complexity.AdFormat.Active(childComplexity), true

	case "AdFormat.codename":
		if e.complexity.AdFormat.Codename == nil {
			break
		}

		return e.complexity.AdFormat.Codename(childComplexity), true

	case "AdFormat.config":
		if e.complexity.AdFormat.Config == nil {
			break
		}

		return e.complexity.AdFormat.Config(childComplexity), true

	case "AdFormat.createdAt":
		if e.complexity.AdFormat.CreatedAt == nil {
			break
		}

		return e.complexity.AdFormat.CreatedAt(childComplexity), true

	case "AdFormat.deletedAt":
		if e.complexity.AdFormat.DeletedAt == nil {
			break
		}

		return e.complexity.AdFormat.DeletedAt(childComplexity), true

	case "AdFormat.description":
		if e.complexity.AdFormat.Description == nil {
			break
		}

		return e.complexity.AdFormat.Description(childComplexity), true

	case "AdFormat.height":
		if e.complexity.AdFormat.Height == nil {
			break
		}

		return e.complexity.AdFormat.Height(childComplexity), true

	case "AdFormat.ID":
		if e.complexity.AdFormat.ID == nil {
			break
		}

		return e.complexity.AdFormat.ID(childComplexity), true

	case "AdFormat.minHeight":
		if e.complexity.AdFormat.MinHeight == nil {
			break
		}

		return e.complexity.AdFormat.MinHeight(childComplexity), true

	case "AdFormat.minWidth":
		if e.complexity.AdFormat.MinWidth == nil {
			break
		}

		return e.complexity.AdFormat.MinWidth(childComplexity), true

	case "AdFormat.title":
		if e.complexity.AdFormat.Title == nil {
			break
		}

		return e.complexity.AdFormat.Title(childComplexity), true

	case "AdFormat.type":
		if e.complexity.AdFormat.Type == nil {
			break
		}

		return e.complexity.AdFormat.Type(childComplexity), true

	case "AdFormat.updatedAt":
		if e.complexity.AdFormat.UpdatedAt == nil {
			break
		}

		return e.complexity.AdFormat.UpdatedAt(childComplexity), true

	case "AdFormat.width":
		if e.complexity.AdFormat.Width == nil {
			break
		}

		return e.complexity.AdFormat.Width(childComplexity), true

	case "AdFormatConnection.edges":
		if e.complexity.AdFormatConnection.Edges == nil {
			break
		}

		return e.complexity.AdFormatConnection.Edges(childComplexity), true

	case "AdFormatConnection.list":
		if e.complexity.AdFormatConnection.List == nil {
			break
		}

		return e.complexity.AdFormatConnection.List(childComplexity), true

	case "AdFormatConnection.pageInfo":
		if e.complexity.AdFormatConnection.PageInfo == nil {
			break
		}

		return e.complexity.AdFormatConnection.PageInfo(childComplexity), true

	case "AdFormatConnection.totalCount":
		if e.complexity.AdFormatConnection.TotalCount == nil {
			break
		}

		return e.complexity.AdFormatConnection.TotalCount(childComplexity), true

	case "AdFormatEdge.cursor":
		if e.complexity.AdFormatEdge.Cursor == nil {
			break
		}

		return e.complexity.AdFormatEdge.Cursor(childComplexity), true

	case "AdFormatEdge.node":
		if e.complexity.AdFormatEdge.Node == nil {
			break
		}

		return e.complexity.AdFormatEdge.Node(childComplexity), true

	case "AdFormatPayload.clientMutationID":
		if e.complexity.AdFormatPayload.ClientMutationID == nil {
			break
		}

		return e.complexity.AdFormatPayload.ClientMutationID(childComplexity), true

	case "AdFormatPayload.format":
		if e.complexity.AdFormatPayload.Format == nil {
			break
		}

		return e.complexity.AdFormatPayload.Format(childComplexity), true

	case "AdFormatPayload.formatID":
		if e.complexity.AdFormatPayload.FormatID == nil {
			break
		}

		return e.complexity.AdFormatPayload.FormatID(childComplexity), true

	case "Application.accountID":
		if e.complexity.Application.AccountID == nil {
			break
		}

		return e.complexity.Application.AccountID(childComplexity), true

	case "Application.active":
		if e.complexity.Application.Active == nil {
			break
		}

		return e.complexity.Application.Active(childComplexity), true

	case "Application.categories":
		if e.complexity.Application.Categories == nil {
			break
		}

		return e.complexity.Application.Categories(childComplexity), true

	case "Application.createdAt":
		if e.complexity.Application.CreatedAt == nil {
			break
		}

		return e.complexity.Application.CreatedAt(childComplexity), true

	case "Application.creatorID":
		if e.complexity.Application.CreatorID == nil {
			break
		}

		return e.complexity.Application.CreatorID(childComplexity), true

	case "Application.deletedAt":
		if e.complexity.Application.DeletedAt == nil {
			break
		}

		return e.complexity.Application.DeletedAt(childComplexity), true

	case "Application.description":
		if e.complexity.Application.Description == nil {
			break
		}

		return e.complexity.Application.Description(childComplexity), true

	case "Application.ID":
		if e.complexity.Application.ID == nil {
			break
		}

		return e.complexity.Application.ID(childComplexity), true

	case "Application.platform":
		if e.complexity.Application.Platform == nil {
			break
		}

		return e.complexity.Application.Platform(childComplexity), true

	case "Application.premium":
		if e.complexity.Application.Premium == nil {
			break
		}

		return e.complexity.Application.Premium(childComplexity), true

	case "Application.private":
		if e.complexity.Application.Private == nil {
			break
		}

		return e.complexity.Application.Private(childComplexity), true

	case "Application.revenueShare":
		if e.complexity.Application.RevenueShare == nil {
			break
		}

		return e.complexity.Application.RevenueShare(childComplexity), true

	case "Application.status":
		if e.complexity.Application.Status == nil {
			break
		}

		return e.complexity.Application.Status(childComplexity), true

	case "Application.title":
		if e.complexity.Application.Title == nil {
			break
		}

		return e.complexity.Application.Title(childComplexity), true

	case "Application.type":
		if e.complexity.Application.Type == nil {
			break
		}

		return e.complexity.Application.Type(childComplexity), true

	case "Application.URI":
		if e.complexity.Application.URI == nil {
			break
		}

		return e.complexity.Application.URI(childComplexity), true

	case "Application.updatedAt":
		if e.complexity.Application.UpdatedAt == nil {
			break
		}

		return e.complexity.Application.UpdatedAt(childComplexity), true

	case "ApplicationConnection.edges":
		if e.complexity.ApplicationConnection.Edges == nil {
			break
		}

		return e.complexity.ApplicationConnection.Edges(childComplexity), true

	case "ApplicationConnection.list":
		if e.complexity.ApplicationConnection.List == nil {
			break
		}

		return e.complexity.ApplicationConnection.List(childComplexity), true

	case "ApplicationConnection.pageInfo":
		if e.complexity.ApplicationConnection.PageInfo == nil {
			break
		}

		return e.complexity.ApplicationConnection.PageInfo(childComplexity), true

	case "ApplicationConnection.totalCount":
		if e.complexity.ApplicationConnection.TotalCount == nil {
			break
		}

		return e.complexity.ApplicationConnection.TotalCount(childComplexity), true

	case "ApplicationEdge.cursor":
		if e.complexity.ApplicationEdge.Cursor == nil {
			break
		}

		return e.complexity.ApplicationEdge.Cursor(childComplexity), true

	case "ApplicationEdge.node":
		if e.complexity.ApplicationEdge.Node == nil {
			break
		}

		return e.complexity.ApplicationEdge.Node(childComplexity), true

	case "ApplicationPayload.application":
		if e.complexity.ApplicationPayload.Application == nil {
			break
		}

		return e.complexity.ApplicationPayload.Application(childComplexity), true

	case "ApplicationPayload.applicationID":
		if e.complexity.ApplicationPayload.ApplicationID == nil {
			break
		}

		return e.complexity.ApplicationPayload.ApplicationID(childComplexity), true

	case "ApplicationPayload.clientMutationID":
		if e.complexity.ApplicationPayload.ClientMutationID == nil {
			break
		}

		return e.complexity.ApplicationPayload.ClientMutationID(childComplexity), true

	case "AuthClient.accountID":
		if e.complexity.AuthClient.AccountID == nil {
			break
		}

		return e.complexity.AuthClient.AccountID(childComplexity), true

	case "AuthClient.allowedCORSOrigins":
		if e.complexity.AuthClient.AllowedCORSOrigins == nil {
			break
		}

		return e.complexity.AuthClient.AllowedCORSOrigins(childComplexity), true

	case "AuthClient.audience":
		if e.complexity.AuthClient.Audience == nil {
			break
		}

		return e.complexity.AuthClient.Audience(childComplexity), true

	case "AuthClient.createdAt":
		if e.complexity.AuthClient.CreatedAt == nil {
			break
		}

		return e.complexity.AuthClient.CreatedAt(childComplexity), true

	case "AuthClient.deletedAt":
		if e.complexity.AuthClient.DeletedAt == nil {
			break
		}

		return e.complexity.AuthClient.DeletedAt(childComplexity), true

	case "AuthClient.expiresAt":
		if e.complexity.AuthClient.ExpiresAt == nil {
			break
		}

		return e.complexity.AuthClient.ExpiresAt(childComplexity), true

	case "AuthClient.grantTypes":
		if e.complexity.AuthClient.GrantTypes == nil {
			break
		}

		return e.complexity.AuthClient.GrantTypes(childComplexity), true

	case "AuthClient.ID":
		if e.complexity.AuthClient.ID == nil {
			break
		}

		return e.complexity.AuthClient.ID(childComplexity), true

	case "AuthClient.public":
		if e.complexity.AuthClient.Public == nil {
			break
		}

		return e.complexity.AuthClient.Public(childComplexity), true

	case "AuthClient.redirectURIs":
		if e.complexity.AuthClient.RedirectURIs == nil {
			break
		}

		return e.complexity.AuthClient.RedirectURIs(childComplexity), true

	case "AuthClient.responseTypes":
		if e.complexity.AuthClient.ResponseTypes == nil {
			break
		}

		return e.complexity.AuthClient.ResponseTypes(childComplexity), true

	case "AuthClient.scope":
		if e.complexity.AuthClient.Scope == nil {
			break
		}

		return e.complexity.AuthClient.Scope(childComplexity), true

	case "AuthClient.secret":
		if e.complexity.AuthClient.Secret == nil {
			break
		}

		return e.complexity.AuthClient.Secret(childComplexity), true

	case "AuthClient.subjectType":
		if e.complexity.AuthClient.SubjectType == nil {
			break
		}

		return e.complexity.AuthClient.SubjectType(childComplexity), true

	case "AuthClient.title":
		if e.complexity.AuthClient.Title == nil {
			break
		}

		return e.complexity.AuthClient.Title(childComplexity), true

	case "AuthClient.updatedAt":
		if e.complexity.AuthClient.UpdatedAt == nil {
			break
		}

		return e.complexity.AuthClient.UpdatedAt(childComplexity), true

	case "AuthClient.userID":
		if e.complexity.AuthClient.UserID == nil {
			break
		}

		return e.complexity.AuthClient.UserID(childComplexity), true

	case "AuthClientConnection.edges":
		if e.complexity.AuthClientConnection.Edges == nil {
			break
		}

		return e.complexity.AuthClientConnection.Edges(childComplexity), true

	case "AuthClientConnection.list":
		if e.complexity.AuthClientConnection.List == nil {
			break
		}

		return e.complexity.AuthClientConnection.List(childComplexity), true

	case "AuthClientConnection.pageInfo":
		if e.complexity.AuthClientConnection.PageInfo == nil {
			break
		}

		return e.complexity.AuthClientConnection.PageInfo(childComplexity), true

	case "AuthClientConnection.totalCount":
		if e.complexity.AuthClientConnection.TotalCount == nil {
			break
		}

		return e.complexity.AuthClientConnection.TotalCount(childComplexity), true

	case "AuthClientEdge.cursor":
		if e.complexity.AuthClientEdge.Cursor == nil {
			break
		}

		return e.complexity.AuthClientEdge.Cursor(childComplexity), true

	case "AuthClientEdge.node":
		if e.complexity.AuthClientEdge.Node == nil {
			break
		}

		return e.complexity.AuthClientEdge.Node(childComplexity), true

	case "AuthClientPayload.authClient":
		if e.complexity.AuthClientPayload.AuthClient == nil {
			break
		}

		return e.complexity.AuthClientPayload.AuthClient(childComplexity), true

	case "AuthClientPayload.authClientID":
		if e.complexity.AuthClientPayload.AuthClientID == nil {
			break
		}

		return e.complexity.AuthClientPayload.AuthClientID(childComplexity), true

	case "AuthClientPayload.clientMutationID":
		if e.complexity.AuthClientPayload.ClientMutationID == nil {
			break
		}

		return e.complexity.AuthClientPayload.ClientMutationID(childComplexity), true

	case "Browser.active":
		if e.complexity.Browser.Active == nil {
			break
		}

		return e.complexity.Browser.Active(childComplexity), true

	case "Browser.createdAt":
		if e.complexity.Browser.CreatedAt == nil {
			break
		}

		return e.complexity.Browser.CreatedAt(childComplexity), true

	case "Browser.deletedAt":
		if e.complexity.Browser.DeletedAt == nil {
			break
		}

		return e.complexity.Browser.DeletedAt(childComplexity), true

	case "Browser.description":
		if e.complexity.Browser.Description == nil {
			break
		}

		return e.complexity.Browser.Description(childComplexity), true

	case "Browser.ID":
		if e.complexity.Browser.ID == nil {
			break
		}

		return e.complexity.Browser.ID(childComplexity), true

	case "Browser.matchNameExp":
		if e.complexity.Browser.MatchNameExp == nil {
			break
		}

		return e.complexity.Browser.MatchNameExp(childComplexity), true

	case "Browser.matchUserAgentExp":
		if e.complexity.Browser.MatchUserAgentExp == nil {
			break
		}

		return e.complexity.Browser.MatchUserAgentExp(childComplexity), true

	case "Browser.matchVersionMaxExp":
		if e.complexity.Browser.MatchVersionMaxExp == nil {
			break
		}

		return e.complexity.Browser.MatchVersionMaxExp(childComplexity), true

	case "Browser.matchVersionMinExp":
		if e.complexity.Browser.MatchVersionMinExp == nil {
			break
		}

		return e.complexity.Browser.MatchVersionMinExp(childComplexity), true

	case "Browser.name":
		if e.complexity.Browser.Name == nil {
			break
		}

		return e.complexity.Browser.Name(childComplexity), true

	case "Browser.parent":
		if e.complexity.Browser.Parent == nil {
			break
		}

		return e.complexity.Browser.Parent(childComplexity), true

	case "Browser.parentID":
		if e.complexity.Browser.ParentID == nil {
			break
		}

		return e.complexity.Browser.ParentID(childComplexity), true

	case "Browser.updatedAt":
		if e.complexity.Browser.UpdatedAt == nil {
			break
		}

		return e.complexity.Browser.UpdatedAt(childComplexity), true

	case "Browser.version":
		if e.complexity.Browser.Version == nil {
			break
		}

		return e.complexity.Browser.Version(childComplexity), true

	case "Browser.versions":
		if e.complexity.Browser.Versions == nil {
			break
		}

		return e.complexity.Browser.Versions(childComplexity), true

	case "Browser.yearEndSupport":
		if e.complexity.Browser.YearEndSupport == nil {
			break
		}

		return e.complexity.Browser.YearEndSupport(childComplexity), true

	case "Browser.yearRelease":
		if e.complexity.Browser.YearRelease == nil {
			break
		}

		return e.complexity.Browser.YearRelease(childComplexity), true

	case "BrowserConnection.edges":
		if e.complexity.BrowserConnection.Edges == nil {
			break
		}

		return e.complexity.BrowserConnection.Edges(childComplexity), true

	case "BrowserConnection.list":
		if e.complexity.BrowserConnection.List == nil {
			break
		}

		return e.complexity.BrowserConnection.List(childComplexity), true

	case "BrowserConnection.pageInfo":
		if e.complexity.BrowserConnection.PageInfo == nil {
			break
		}

		return e.complexity.BrowserConnection.PageInfo(childComplexity), true

	case "BrowserConnection.totalCount":
		if e.complexity.BrowserConnection.TotalCount == nil {
			break
		}

		return e.complexity.BrowserConnection.TotalCount(childComplexity), true

	case "BrowserEdge.cursor":
		if e.complexity.BrowserEdge.Cursor == nil {
			break
		}

		return e.complexity.BrowserEdge.Cursor(childComplexity), true

	case "BrowserEdge.node":
		if e.complexity.BrowserEdge.Node == nil {
			break
		}

		return e.complexity.BrowserEdge.Node(childComplexity), true

	case "BrowserPayload.browser":
		if e.complexity.BrowserPayload.Browser == nil {
			break
		}

		return e.complexity.BrowserPayload.Browser(childComplexity), true

	case "BrowserPayload.browserID":
		if e.complexity.BrowserPayload.BrowserID == nil {
			break
		}

		return e.complexity.BrowserPayload.BrowserID(childComplexity), true

	case "BrowserPayload.clientMutationID":
		if e.complexity.BrowserPayload.ClientMutationID == nil {
			break
		}

		return e.complexity.BrowserPayload.ClientMutationID(childComplexity), true

	case "Category.active":
		if e.complexity.Category.Active == nil {
			break
		}

		return e.complexity.Category.Active(childComplexity), true

	case "Category.childrens":
		if e.complexity.Category.Childrens == nil {
			break
		}

		return e.complexity.Category.Childrens(childComplexity), true

	case "Category.createdAt":
		if e.complexity.Category.CreatedAt == nil {
			break
		}

		return e.complexity.Category.CreatedAt(childComplexity), true

	case "Category.deletedAt":
		if e.complexity.Category.DeletedAt == nil {
			break
		}

		return e.complexity.Category.DeletedAt(childComplexity), true

	case "Category.description":
		if e.complexity.Category.Description == nil {
			break
		}

		return e.complexity.Category.Description(childComplexity), true

	case "Category.IABCode":
		if e.complexity.Category.IABCode == nil {
			break
		}

		return e.complexity.Category.IABCode(childComplexity), true

	case "Category.ID":
		if e.complexity.Category.ID == nil {
			break
		}

		return e.complexity.Category.ID(childComplexity), true

	case "Category.name":
		if e.complexity.Category.Name == nil {
			break
		}

		return e.complexity.Category.Name(childComplexity), true

	case "Category.parent":
		if e.complexity.Category.Parent == nil {
			break
		}

		return e.complexity.Category.Parent(childComplexity), true

	case "Category.parentID":
		if e.complexity.Category.ParentID == nil {
			break
		}

		return e.complexity.Category.ParentID(childComplexity), true

	case "Category.position":
		if e.complexity.Category.Position == nil {
			break
		}

		return e.complexity.Category.Position(childComplexity), true

	case "Category.updatedAt":
		if e.complexity.Category.UpdatedAt == nil {
			break
		}

		return e.complexity.Category.UpdatedAt(childComplexity), true

	case "CategoryConnection.edges":
		if e.complexity.CategoryConnection.Edges == nil {
			break
		}

		return e.complexity.CategoryConnection.Edges(childComplexity), true

	case "CategoryConnection.list":
		if e.complexity.CategoryConnection.List == nil {
			break
		}

		return e.complexity.CategoryConnection.List(childComplexity), true

	case "CategoryConnection.pageInfo":
		if e.complexity.CategoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.CategoryConnection.PageInfo(childComplexity), true

	case "CategoryConnection.totalCount":
		if e.complexity.CategoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.CategoryConnection.TotalCount(childComplexity), true

	case "CategoryEdge.cursor":
		if e.complexity.CategoryEdge.Cursor == nil {
			break
		}

		return e.complexity.CategoryEdge.Cursor(childComplexity), true

	case "CategoryEdge.node":
		if e.complexity.CategoryEdge.Node == nil {
			break
		}

		return e.complexity.CategoryEdge.Node(childComplexity), true

	case "CategoryPayload.category":
		if e.complexity.CategoryPayload.Category == nil {
			break
		}

		return e.complexity.CategoryPayload.Category(childComplexity), true

	case "CategoryPayload.categoryID":
		if e.complexity.CategoryPayload.CategoryID == nil {
			break
		}

		return e.complexity.CategoryPayload.CategoryID(childComplexity), true

	case "CategoryPayload.clientMutationID":
		if e.complexity.CategoryPayload.ClientMutationID == nil {
			break
		}

		return e.complexity.CategoryPayload.ClientMutationID(childComplexity), true

	case "Continent.code2":
		if e.complexity.Continent.Code2 == nil {
			break
		}

		return e.complexity.Continent.Code2(childComplexity), true

	case "Continent.countries":
		if e.complexity.Continent.Countries == nil {
			break
		}

		return e.complexity.Continent.Countries(childComplexity), true

	case "Continent.ID":
		if e.complexity.Continent.ID == nil {
			break
		}

		return e.complexity.Continent.ID(childComplexity), true

	case "Continent.name":
		if e.complexity.Continent.Name == nil {
			break
		}

		return e.complexity.Continent.Name(childComplexity), true

	case "Coordinates.lat":
		if e.complexity.Coordinates.Lat == nil {
			break
		}

		return e.complexity.Coordinates.Lat(childComplexity), true

	case "Coordinates.lon":
		if e.complexity.Coordinates.Lon == nil {
			break
		}

		return e.complexity.Coordinates.Lon(childComplexity), true

	case "Country.capital":
		if e.complexity.Country.Capital == nil {
			break
		}

		return e.complexity.Country.Capital(childComplexity), true

	case "Country.code2":
		if e.complexity.Country.Code2 == nil {
			break
		}

		return e.complexity.Country.Code2(childComplexity), true

	case "Country.code3":
		if e.complexity.Country.Code3 == nil {
			break
		}

		return e.complexity.Country.Code3(childComplexity), true

	case "Country.continent":
		if e.complexity.Country.Continent == nil {
			break
		}

		return e.complexity.Country.Continent(childComplexity), true

	case "Country.continentCode":
		if e.complexity.Country.ContinentCode == nil {
			break
		}

		return e.complexity.Country.ContinentCode(childComplexity), true

	case "Country.coordinates":
		if e.complexity.Country.Coordinates == nil {
			break
		}

		return e.complexity.Country.Coordinates(childComplexity), true

	case "Country.currency":
		if e.complexity.Country.Currency == nil {
			break
		}

		return e.complexity.Country.Currency(childComplexity), true

	case "Country.ID":
		if e.complexity.Country.ID == nil {
			break
		}

		return e.complexity.Country.ID(childComplexity), true

	case "Country.languages":
		if e.complexity.Country.Languages == nil {
			break
		}

		return e.complexity.Country.Languages(childComplexity), true

	case "Country.name":
		if e.complexity.Country.Name == nil {
			break
		}

		return e.complexity.Country.Name(childComplexity), true

	case "Country.nativeName":
		if e.complexity.Country.NativeName == nil {
			break
		}

		return e.complexity.Country.NativeName(childComplexity), true

	case "Country.phoneCodes":
		if e.complexity.Country.PhoneCodes == nil {
			break
		}

		return e.complexity.Country.PhoneCodes(childComplexity), true

	case "Country.timeZones":
		if e.complexity.Country.TimeZones == nil {
			break
		}

		return e.complexity.Country.TimeZones(childComplexity), true

	case "DeviceMaker.active":
		if e.complexity.DeviceMaker.Active == nil {
			break
		}

		return e.complexity.DeviceMaker.Active(childComplexity), true

	case "DeviceMaker.codename":
		if e.complexity.DeviceMaker.Codename == nil {
			break
		}

		return e.complexity.DeviceMaker.Codename(childComplexity), true

	case "DeviceMaker.createdAt":
		if e.complexity.DeviceMaker.CreatedAt == nil {
			break
		}

		return e.complexity.DeviceMaker.CreatedAt(childComplexity), true

	case "DeviceMaker.deletedAt":
		if e.complexity.DeviceMaker.DeletedAt == nil {
			break
		}

		return e.complexity.DeviceMaker.DeletedAt(childComplexity), true

	case "DeviceMaker.description":
		if e.complexity.DeviceMaker.Description == nil {
			break
		}

		return e.complexity.DeviceMaker.Description(childComplexity), true

	case "DeviceMaker.ID":
		if e.complexity.DeviceMaker.ID == nil {
			break
		}

		return e.complexity.DeviceMaker.ID(childComplexity), true

	case "DeviceMaker.matchExp":
		if e.complexity.DeviceMaker.MatchExp == nil {
			break
		}

		return e.complexity.DeviceMaker.MatchExp(childComplexity), true

	case "DeviceMaker.models":
		if e.complexity.DeviceMaker.Models == nil {
			break
		}

		return e.complexity.DeviceMaker.Models(childComplexity), true

	case "DeviceMaker.name":
		if e.complexity.DeviceMaker.Name == nil {
			break
		}

		return e.complexity.DeviceMaker.Name(childComplexity), true

	case "DeviceMaker.updatedAt":
		if e.complexity.DeviceMaker.UpdatedAt == nil {
			break
		}

		return e.complexity.DeviceMaker.UpdatedAt(childComplexity), true

	case "DeviceMakerConnection.edges":
		if e.complexity.DeviceMakerConnection.Edges == nil {
			break
		}

		return e.complexity.DeviceMakerConnection.Edges(childComplexity), true

	case "DeviceMakerConnection.list":
		if e.complexity.DeviceMakerConnection.List == nil {
			break
		}

		return e.complexity.DeviceMakerConnection.List(childComplexity), true

	case "DeviceMakerConnection.pageInfo":
		if e.complexity.DeviceMakerConnection.PageInfo == nil {
			break
		}

		return e.complexity.DeviceMakerConnection.PageInfo(childComplexity), true

	case "DeviceMakerConnection.totalCount":
		if e.complexity.DeviceMakerConnection.TotalCount == nil {
			break
		}

		return e.complexity.DeviceMakerConnection.TotalCount(childComplexity), true

	case "DeviceMakerEdge.cursor":
		if e.complexity.DeviceMakerEdge.Cursor == nil {
			break
		}

		return e.complexity.DeviceMakerEdge.Cursor(childComplexity), true

	case "DeviceMakerEdge.node":
		if e.complexity.DeviceMakerEdge.Node == nil {
			break
		}

		return e.complexity.DeviceMakerEdge.Node(childComplexity), true

	case "DeviceMakerPayload.clientMutationID":
		if e.complexity.DeviceMakerPayload.ClientMutationID == nil {
			break
		}

		return e.complexity.DeviceMakerPayload.ClientMutationID(childComplexity), true

	case "DeviceMakerPayload.maker":
		if e.complexity.DeviceMakerPayload.Maker == nil {
			break
		}

		return e.complexity.DeviceMakerPayload.Maker(childComplexity), true

	case "DeviceMakerPayload.makerID":
		if e.complexity.DeviceMakerPayload.MakerID == nil {
			break
		}

		return e.complexity.DeviceMakerPayload.MakerID(childComplexity), true

	case "DeviceModel.active":
		if e.complexity.DeviceModel.Active == nil {
			break
		}

		return e.complexity.DeviceModel.Active(childComplexity), true

	case "DeviceModel.codename":
		if e.complexity.DeviceModel.Codename == nil {
			break
		}

		return e.complexity.DeviceModel.Codename(childComplexity), true

	case "DeviceModel.createdAt":
		if e.complexity.DeviceModel.CreatedAt == nil {
			break
		}

		return e.complexity.DeviceModel.CreatedAt(childComplexity), true

	case "DeviceModel.deletedAt":
		if e.complexity.DeviceModel.DeletedAt == nil {
			break
		}

		return e.complexity.DeviceModel.DeletedAt(childComplexity), true

	case "DeviceModel.description":
		if e.complexity.DeviceModel.Description == nil {
			break
		}

		return e.complexity.DeviceModel.Description(childComplexity), true

	case "DeviceModel.ID":
		if e.complexity.DeviceModel.ID == nil {
			break
		}

		return e.complexity.DeviceModel.ID(childComplexity), true

	case "DeviceModel.maker":
		if e.complexity.DeviceModel.Maker == nil {
			break
		}

		return e.complexity.DeviceModel.Maker(childComplexity), true

	case "DeviceModel.makerCodename":
		if e.complexity.DeviceModel.MakerCodename == nil {
			break
		}

		return e.complexity.DeviceModel.MakerCodename(childComplexity), true

	case "DeviceModel.matchExp":
		if e.complexity.DeviceModel.MatchExp == nil {
			break
		}

		return e.complexity.DeviceModel.MatchExp(childComplexity), true

	case "DeviceModel.name":
		if e.complexity.DeviceModel.Name == nil {
			break
		}

		return e.complexity.DeviceModel.Name(childComplexity), true

	case "DeviceModel.parent":
		if e.complexity.DeviceModel.Parent == nil {
			break
		}

		return e.complexity.DeviceModel.Parent(childComplexity), true

	case "DeviceModel.parentID":
		if e.complexity.DeviceModel.ParentID == nil {
			break
		}

		return e.complexity.DeviceModel.ParentID(childComplexity), true

	case "DeviceModel.type":
		if e.complexity.DeviceModel.Type == nil {
			break
		}

		return e.complexity.DeviceModel.Type(childComplexity), true

	case "DeviceModel.typeCodename":
		if e.complexity.DeviceModel.TypeCodename == nil {
			break
		}

		return e.complexity.DeviceModel.TypeCodename(childComplexity), true

	case "DeviceModel.updatedAt":
		if e.complexity.DeviceModel.UpdatedAt == nil {
			break
		}

		return e.complexity.DeviceModel.UpdatedAt(childComplexity), true

	case "DeviceModel.version":
		if e.complexity.DeviceModel.Version == nil {
			break
		}

		return e.complexity.DeviceModel.Version(childComplexity), true

	case "DeviceModel.versions":
		if e.complexity.DeviceModel.Versions == nil {
			break
		}

		args, err := ec.field_DeviceModel_versions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.DeviceModel.Versions(childComplexity, args["filter"].(*models.DeviceModelListFilter), args["order"].([]*models.DeviceModelListOrder)), true

	case "DeviceModel.yearRelease":
		if e.complexity.DeviceModel.YearRelease == nil {
			break
		}

		return e.complexity.DeviceModel.YearRelease(childComplexity), true

	case "DeviceModelConnection.edges":
		if e.complexity.DeviceModelConnection.Edges == nil {
			break
		}

		return e.complexity.DeviceModelConnection.Edges(childComplexity), true

	case "DeviceModelConnection.list":
		if e.complexity.DeviceModelConnection.List == nil {
			break
		}

		return e.complexity.DeviceModelConnection.List(childComplexity), true

	case "DeviceModelConnection.pageInfo":
		if e.complexity.DeviceModelConnection.PageInfo == nil {
			break
		}

		return e.complexity.DeviceModelConnection.PageInfo(childComplexity), true

	case "DeviceModelConnection.totalCount":
		if e.complexity.DeviceModelConnection.TotalCount == nil {
			break
		}

		return e.complexity.DeviceModelConnection.TotalCount(childComplexity), true

	case "DeviceModelEdge.cursor":
		if e.complexity.DeviceModelEdge.Cursor == nil {
			break
		}

		return e.complexity.DeviceModelEdge.Cursor(childComplexity), true

	case "DeviceModelEdge.node":
		if e.complexity.DeviceModelEdge.Node == nil {
			break
		}

		return e.complexity.DeviceModelEdge.Node(childComplexity), true

	case "DeviceModelPayload.clientMutationID":
		if e.complexity.DeviceModelPayload.ClientMutationID == nil {
			break
		}

		return e.complexity.DeviceModelPayload.ClientMutationID(childComplexity), true

	case "DeviceModelPayload.model":
		if e.complexity.DeviceModelPayload.Model == nil {
			break
		}

		return e.complexity.DeviceModelPayload.Model(childComplexity), true

	case "DeviceModelPayload.modelID":
		if e.complexity.DeviceModelPayload.ModelID == nil {
			break
		}

		return e.complexity.DeviceModelPayload.ModelID(childComplexity), true

	case "DeviceType.active":
		if e.complexity.DeviceType.Active == nil {
			break
		}

		return e.complexity.DeviceType.Active(childComplexity), true

	case "DeviceType.codename":
		if e.complexity.DeviceType.Codename == nil {
			break
		}

		return e.complexity.DeviceType.Codename(childComplexity), true

	case "DeviceType.description":
		if e.complexity.DeviceType.Description == nil {
			break
		}

		return e.complexity.DeviceType.Description(childComplexity), true

	case "DeviceType.ID":
		if e.complexity.DeviceType.ID == nil {
			break
		}

		return e.complexity.DeviceType.ID(childComplexity), true

	case "DeviceType.name":
		if e.complexity.DeviceType.Name == nil {
			break
		}

		return e.complexity.DeviceType.Name(childComplexity), true

	case "DirectAccessToken.accountID":
		if e.complexity.DirectAccessToken.AccountID == nil {
			break
		}

		return e.complexity.DirectAccessToken.AccountID(childComplexity), true

	case "DirectAccessToken.createdAt":
		if e.complexity.DirectAccessToken.CreatedAt == nil {
			break
		}

		return e.complexity.DirectAccessToken.CreatedAt(childComplexity), true

	case "DirectAccessToken.description":
		if e.complexity.DirectAccessToken.Description == nil {
			break
		}

		return e.complexity.DirectAccessToken.Description(childComplexity), true

	case "DirectAccessToken.expiresAt":
		if e.complexity.DirectAccessToken.ExpiresAt == nil {
			break
		}

		return e.complexity.DirectAccessToken.ExpiresAt(childComplexity), true

	case "DirectAccessToken.ID":
		if e.complexity.DirectAccessToken.ID == nil {
			break
		}

		return e.complexity.DirectAccessToken.ID(childComplexity), true

	case "DirectAccessToken.token":
		if e.complexity.DirectAccessToken.Token == nil {
			break
		}

		return e.complexity.DirectAccessToken.Token(childComplexity), true

	case "DirectAccessToken.userID":
		if e.complexity.DirectAccessToken.UserID == nil {
			break
		}

		return e.complexity.DirectAccessToken.UserID(childComplexity), true

	case "DirectAccessTokenConnection.edges":
		if e.complexity.DirectAccessTokenConnection.Edges == nil {
			break
		}

		return e.complexity.DirectAccessTokenConnection.Edges(childComplexity), true

	case "DirectAccessTokenConnection.list":
		if e.complexity.DirectAccessTokenConnection.List == nil {
			break
		}

		return e.complexity.DirectAccessTokenConnection.List(childComplexity), true

	case "DirectAccessTokenConnection.pageInfo":
		if e.complexity.DirectAccessTokenConnection.PageInfo == nil {
			break
		}

		return e.complexity.DirectAccessTokenConnection.PageInfo(childComplexity), true

	case "DirectAccessTokenConnection.totalCount":
		if e.complexity.DirectAccessTokenConnection.TotalCount == nil {
			break
		}

		return e.complexity.DirectAccessTokenConnection.TotalCount(childComplexity), true

	case "DirectAccessTokenEdge.cursor":
		if e.complexity.DirectAccessTokenEdge.Cursor == nil {
			break
		}

		return e.complexity.DirectAccessTokenEdge.Cursor(childComplexity), true

	case "DirectAccessTokenEdge.node":
		if e.complexity.DirectAccessTokenEdge.Node == nil {
			break
		}

		return e.complexity.DirectAccessTokenEdge.Node(childComplexity), true

	case "DirectAccessTokenPayload.clientMutationID":
		if e.complexity.DirectAccessTokenPayload.ClientMutationID == nil {
			break
		}

		return e.complexity.DirectAccessTokenPayload.ClientMutationID(childComplexity), true

	case "DirectAccessTokenPayload.token":
		if e.complexity.DirectAccessTokenPayload.Token == nil {
			break
		}

		return e.complexity.DirectAccessTokenPayload.Token(childComplexity), true

	case "HistoryAction.accountID":
		if e.complexity.HistoryAction.AccountID == nil {
			break
		}

		return e.complexity.HistoryAction.AccountID(childComplexity), true

	case "HistoryAction.actionAt":
		if e.complexity.HistoryAction.ActionAt == nil {
			break
		}

		return e.complexity.HistoryAction.ActionAt(childComplexity), true

	case "HistoryAction.data":
		if e.complexity.HistoryAction.Data == nil {
			break
		}

		return e.complexity.HistoryAction.Data(childComplexity), true

	case "HistoryAction.ID":
		if e.complexity.HistoryAction.ID == nil {
			break
		}

		return e.complexity.HistoryAction.ID(childComplexity), true

	case "HistoryAction.message":
		if e.complexity.HistoryAction.Message == nil {
			break
		}

		return e.complexity.HistoryAction.Message(childComplexity), true

	case "HistoryAction.name":
		if e.complexity.HistoryAction.Name == nil {
			break
		}

		return e.complexity.HistoryAction.Name(childComplexity), true

	case "HistoryAction.objectID":
		if e.complexity.HistoryAction.ObjectID == nil {
			break
		}

		return e.complexity.HistoryAction.ObjectID(childComplexity), true

	case "HistoryAction.objectIDs":
		if e.complexity.HistoryAction.ObjectIDs == nil {
			break
		}

		return e.complexity.HistoryAction.ObjectIDs(childComplexity), true

	case "HistoryAction.objectType":
		if e.complexity.HistoryAction.ObjectType == nil {
			break
		}

		return e.complexity.HistoryAction.ObjectType(childComplexity), true

	case "HistoryAction.RequestID":
		if e.complexity.HistoryAction.RequestID == nil {
			break
		}

		return e.complexity.HistoryAction.RequestID(childComplexity), true

	case "HistoryAction.userID":
		if e.complexity.HistoryAction.UserID == nil {
			break
		}

		return e.complexity.HistoryAction.UserID(childComplexity), true

	case "HistoryActionConnection.edges":
		if e.complexity.HistoryActionConnection.Edges == nil {
			break
		}

		return e.complexity.HistoryActionConnection.Edges(childComplexity), true

	case "HistoryActionConnection.list":
		if e.complexity.HistoryActionConnection.List == nil {
			break
		}

		return e.complexity.HistoryActionConnection.List(childComplexity), true

	case "HistoryActionConnection.pageInfo":
		if e.complexity.HistoryActionConnection.PageInfo == nil {
			break
		}

		return e.complexity.HistoryActionConnection.PageInfo(childComplexity), true

	case "HistoryActionConnection.totalCount":
		if e.complexity.HistoryActionConnection.TotalCount == nil {
			break
		}

		return e.complexity.HistoryActionConnection.TotalCount(childComplexity), true

	case "HistoryActionEdge.cursor":
		if e.complexity.HistoryActionEdge.Cursor == nil {
			break
		}

		return e.complexity.HistoryActionEdge.Cursor(childComplexity), true

	case "HistoryActionEdge.node":
		if e.complexity.HistoryActionEdge.Node == nil {
			break
		}

		return e.complexity.HistoryActionEdge.Node(childComplexity), true

	case "HistoryActionPayload.action":
		if e.complexity.HistoryActionPayload.Action == nil {
			break
		}

		return e.complexity.HistoryActionPayload.Action(childComplexity), true

	case "HistoryActionPayload.actionID":
		if e.complexity.HistoryActionPayload.ActionID == nil {
			break
		}

		return e.complexity.HistoryActionPayload.ActionID(childComplexity), true

	case "HistoryActionPayload.clientMutationId":
		if e.complexity.HistoryActionPayload.ClientMutationID == nil {
			break
		}

		return e.complexity.HistoryActionPayload.ClientMutationID(childComplexity), true

	case "Member.account":
		if e.complexity.Member.Account == nil {
			break
		}

		return e.complexity.Member.Account(childComplexity), true

	case "Member.createdAt":
		if e.complexity.Member.CreatedAt == nil {
			break
		}

		return e.complexity.Member.CreatedAt(childComplexity), true

	case "Member.deletedAt":
		if e.complexity.Member.DeletedAt == nil {
			break
		}

		return e.complexity.Member.DeletedAt(childComplexity), true

	case "Member.ID":
		if e.complexity.Member.ID == nil {
			break
		}

		return e.complexity.Member.ID(childComplexity), true

	case "Member.isAdmin":
		if e.complexity.Member.IsAdmin == nil {
			break
		}

		return e.complexity.Member.IsAdmin(childComplexity), true

	case "Member.roles":
		if e.complexity.Member.Roles == nil {
			break
		}

		return e.complexity.Member.Roles(childComplexity), true

	case "Member.status":
		if e.complexity.Member.Status == nil {
			break
		}

		return e.complexity.Member.Status(childComplexity), true

	case "Member.updatedAt":
		if e.complexity.Member.UpdatedAt == nil {
			break
		}

		return e.complexity.Member.UpdatedAt(childComplexity), true

	case "Member.user":
		if e.complexity.Member.User == nil {
			break
		}

		return e.complexity.Member.User(childComplexity), true

	case "MemberConnection.edges":
		if e.complexity.MemberConnection.Edges == nil {
			break
		}

		return e.complexity.MemberConnection.Edges(childComplexity), true

	case "MemberConnection.list":
		if e.complexity.MemberConnection.List == nil {
			break
		}

		return e.complexity.MemberConnection.List(childComplexity), true

	case "MemberConnection.pageInfo":
		if e.complexity.MemberConnection.PageInfo == nil {
			break
		}

		return e.complexity.MemberConnection.PageInfo(childComplexity), true

	case "MemberConnection.totalCount":
		if e.complexity.MemberConnection.TotalCount == nil {
			break
		}

		return e.complexity.MemberConnection.TotalCount(childComplexity), true

	case "MemberEdge.cursor":
		if e.complexity.MemberEdge.Cursor == nil {
			break
		}

		return e.complexity.MemberEdge.Cursor(childComplexity), true

	case "MemberEdge.node":
		if e.complexity.MemberEdge.Node == nil {
			break
		}

		return e.complexity.MemberEdge.Node(childComplexity), true

	case "MemberPayload.clientMutationID":
		if e.complexity.MemberPayload.ClientMutationID == nil {
			break
		}

		return e.complexity.MemberPayload.ClientMutationID(childComplexity), true

	case "MemberPayload.member":
		if e.complexity.MemberPayload.Member == nil {
			break
		}

		return e.complexity.MemberPayload.Member(childComplexity), true

	case "MemberPayload.memberID":
		if e.complexity.MemberPayload.MemberID == nil {
			break
		}

		return e.complexity.MemberPayload.MemberID(childComplexity), true

	case "Mutation.activateZone":
		if e.complexity.Mutation.ActivateZone == nil {
			break
		}

		args, err := ec.field_Mutation_activateZone_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ActivateZone(childComplexity, args["ID"].(uint64), args["msg"].(*string)), true

	case "Mutation.approveAccount":
		if e.complexity.Mutation.ApproveAccount == nil {
			break
		}

		args, err := ec.field_Mutation_approveAccount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ApproveAccount(childComplexity, args["id"].(uint64), args["msg"].(string)), true

	case "Mutation.approveAccountMember":
		if e.complexity.Mutation.ApproveAccountMember == nil {
			break
		}

		args, err := ec.field_Mutation_approveAccountMember_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ApproveAccountMember(childComplexity, args["memberID"].(uint64), args["msg"].(string)), true

	case "Mutation.approveApplication":
		if e.complexity.Mutation.ApproveApplication == nil {
			break
		}

		args, err := ec.field_Mutation_approveApplication_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ApproveApplication(childComplexity, args["ID"].(uint64), args["msg"].(*string)), true

	case "Mutation.approveRTBSource":
		if e.complexity.Mutation.ApproveRTBSource == nil {
			break
		}

		args, err := ec.field_Mutation_approveRTBSource_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ApproveRTBSource(childComplexity, args["ID"].(uint64), args["msg"].(*string)), true

	case "Mutation.approveUser":
		if e.complexity.Mutation.ApproveUser == nil {
			break
		}

		args, err := ec.field_Mutation_approveUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ApproveUser(childComplexity, args["id"].(uint64), args["msg"].(*string)), true

	case "Mutation.approveZone":
		if e.complexity.Mutation.ApproveZone == nil {
			break
		}

		args, err := ec.field_Mutation_approveZone_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ApproveZone(childComplexity, args["ID"].(uint64), args["msg"].(*string)), true

	case "Mutation.createApplication":
		if e.complexity.Mutation.CreateApplication == nil {
			break
		}

		args, err := ec.field_Mutation_createApplication_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateApplication(childComplexity, args["input"].(models.ApplicationCreateInput)), true

	case "Mutation.createAuthClient":
		if e.complexity.Mutation.CreateAuthClient == nil {
			break
		}

		args, err := ec.field_Mutation_createAuthClient_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateAuthClient(childComplexity, args["input"].(models1.AuthClientInput)), true

	case "Mutation.createBrowser":
		if e.complexity.Mutation.CreateBrowser == nil {
			break
		}

		args, err := ec.field_Mutation_createBrowser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBrowser(childComplexity, args["input"].(models.BrowserCreateInput)), true

	case "Mutation.createCategory":
		if e.complexity.Mutation.CreateCategory == nil {
			break
		}

		args, err := ec.field_Mutation_createCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCategory(childComplexity, args["input"].(models.CategoryInput)), true

	case "Mutation.createDeviceMaker":
		if e.complexity.Mutation.CreateDeviceMaker == nil {
			break
		}

		args, err := ec.field_Mutation_createDeviceMaker_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateDeviceMaker(childComplexity, args["input"].(models.DeviceMakerCreateInput)), true

	case "Mutation.createDeviceModel":
		if e.complexity.Mutation.CreateDeviceModel == nil {
			break
		}

		args, err := ec.field_Mutation_createDeviceModel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateDeviceModel(childComplexity, args["input"].(models.DeviceModelCreateInput)), true

	case "Mutation.createFormat":
		if e.complexity.Mutation.CreateFormat == nil {
			break
		}

		args, err := ec.field_Mutation_createFormat_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateFormat(childComplexity, args["input"].(models.AdFormatInput)), true

	case "Mutation.createOS":
		if e.complexity.Mutation.CreateOs == nil {
			break
		}

		args, err := ec.field_Mutation_createOS_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateOs(childComplexity, args["input"].(models.OSCreateInput)), true

	case "Mutation.createRTBSource":
		if e.complexity.Mutation.CreateRTBSource == nil {
			break
		}

		args, err := ec.field_Mutation_createRTBSource_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateRTBSource(childComplexity, args["input"].(models.RTBSourceInput)), true

	case "Mutation.createRole":
		if e.complexity.Mutation.CreateRole == nil {
			break
		}

		args, err := ec.field_Mutation_createRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateRole(childComplexity, args["input"].(models1.RBACRoleInput)), true

	case "Mutation.createUser":
		if e.complexity.Mutation.CreateUser == nil {
			break
		}

		args, err := ec.field_Mutation_createUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateUser(childComplexity, args["input"].(models1.UserInput)), true

	case "Mutation.createZone":
		if e.complexity.Mutation.CreateZone == nil {
			break
		}

		args, err := ec.field_Mutation_createZone_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateZone(childComplexity, args["input"].(models.ZoneInput)), true

	case "Mutation.deactivateZone":
		if e.complexity.Mutation.DeactivateZone == nil {
			break
		}

		args, err := ec.field_Mutation_deactivateZone_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeactivateZone(childComplexity, args["ID"].(uint64), args["msg"].(*string)), true

	case "Mutation.deleteApplication":
		if e.complexity.Mutation.DeleteApplication == nil {
			break
		}

		args, err := ec.field_Mutation_deleteApplication_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteApplication(childComplexity, args["ID"].(uint64), args["msg"].(*string)), true

	case "Mutation.deleteAuthClient":
		if e.complexity.Mutation.DeleteAuthClient == nil {
			break
		}

		args, err := ec.field_Mutation_deleteAuthClient_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAuthClient(childComplexity, args["id"].(string), args["msg"].(*string)), true

	case "Mutation.deleteBrowser":
		if e.complexity.Mutation.DeleteBrowser == nil {
			break
		}

		args, err := ec.field_Mutation_deleteBrowser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteBrowser(childComplexity, args["ID"].(uint64), args["msg"].(*string)), true

	case "Mutation.deleteCategory":
		if e.complexity.Mutation.DeleteCategory == nil {
			break
		}

		args, err := ec.field_Mutation_deleteCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteCategory(childComplexity, args["ID"].(uint64), args["msg"].(*string)), true

	case "Mutation.deleteDeviceMaker":
		if e.complexity.Mutation.DeleteDeviceMaker == nil {
			break
		}

		args, err := ec.field_Mutation_deleteDeviceMaker_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDeviceMaker(childComplexity, args["ID"].(uint64), args["msg"].(*string)), true

	case "Mutation.deleteDeviceModel":
		if e.complexity.Mutation.DeleteDeviceModel == nil {
			break
		}

		args, err := ec.field_Mutation_deleteDeviceModel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDeviceModel(childComplexity, args["ID"].(uint64), args["msg"].(*string)), true

	case "Mutation.deleteFormat":
		if e.complexity.Mutation.DeleteFormat == nil {
			break
		}

		args, err := ec.field_Mutation_deleteFormat_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteFormat(childComplexity, args["ID"].(uint64), args["codename"].(string), args["msg"].(*string)), true

	case "Mutation.deleteOS":
		if e.complexity.Mutation.DeleteOs == nil {
			break
		}

		args, err := ec.field_Mutation_deleteOS_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteOs(childComplexity, args["ID"].(uint64), args["msg"].(*string)), true

	case "Mutation.deleteRTBSource":
		if e.complexity.Mutation.DeleteRTBSource == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRTBSource_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRTBSource(childComplexity, args["ID"].(uint64), args["msg"].(*string)), true

	case "Mutation.deleteRole":
		if e.complexity.Mutation.DeleteRole == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRole(childComplexity, args["id"].(uint64), args["msg"].(*string)), true

	case "Mutation.deleteZone":
		if e.complexity.Mutation.DeleteZone == nil {
			break
		}

		args, err := ec.field_Mutation_deleteZone_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteZone(childComplexity, args["ID"].(uint64), args["msg"].(*string)), true

	case "Mutation.disconnectSocialAccount":
		if e.complexity.Mutation.DisconnectSocialAccount == nil {
			break
		}

		args, err := ec.field_Mutation_disconnectSocialAccount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DisconnectSocialAccount(childComplexity, args["id"].(uint64)), true

	case "Mutation.generateDirectAccessToken":
		if e.complexity.Mutation.GenerateDirectAccessToken == nil {
			break
		}

		args, err := ec.field_Mutation_generateDirectAccessToken_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.GenerateDirectAccessToken(childComplexity, args["userID"].(*uint64), args["description"].(string), args["expiresAt"].(*time.Time)), true

	case "Mutation.inviteAccountMember":
		if e.complexity.Mutation.InviteAccountMember == nil {
			break
		}

		args, err := ec.field_Mutation_inviteAccountMember_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InviteAccountMember(childComplexity, args["accountID"].(uint64), args["member"].(models1.InviteMemberInput)), true

	case "Mutation.login":
		if e.complexity.Mutation.Login == nil {
			break
		}

		args, err := ec.field_Mutation_login_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Login(childComplexity, args["login"].(string), args["password"].(string)), true

	case "Mutation.logout":
		if e.complexity.Mutation.Logout == nil {
			break
		}

		return e.complexity.Mutation.Logout(childComplexity), true

	case "Mutation.pauseApplication":
		if e.complexity.Mutation.PauseApplication == nil {
			break
		}

		args, err := ec.field_Mutation_pauseApplication_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PauseApplication(childComplexity, args["ID"].(uint64), args["msg"].(*string)), true

	case "Mutation.pauseRTBSource":
		if e.complexity.Mutation.PauseRTBSource == nil {
			break
		}

		args, err := ec.field_Mutation_pauseRTBSource_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PauseRTBSource(childComplexity, args["ID"].(uint64)), true

	case "Mutation.poke":
		if e.complexity.Mutation.Poke == nil {
			break
		}

		return e.complexity.Mutation.Poke(childComplexity), true

	case "Mutation.registerAccount":
		if e.complexity.Mutation.RegisterAccount == nil {
			break
		}

		args, err := ec.field_Mutation_registerAccount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RegisterAccount(childComplexity, args["input"].(models1.AccountCreateInput)), true

	case "Mutation.rejectAccount":
		if e.complexity.Mutation.RejectAccount == nil {
			break
		}

		args, err := ec.field_Mutation_rejectAccount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RejectAccount(childComplexity, args["id"].(uint64), args["msg"].(string)), true

	case "Mutation.rejectAccountMember":
		if e.complexity.Mutation.RejectAccountMember == nil {
			break
		}

		args, err := ec.field_Mutation_rejectAccountMember_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RejectAccountMember(childComplexity, args["memberID"].(uint64), args["msg"].(string)), true

	case "Mutation.rejectApplication":
		if e.complexity.Mutation.RejectApplication == nil {
			break
		}

		args, err := ec.field_Mutation_rejectApplication_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RejectApplication(childComplexity, args["ID"].(uint64), args["msg"].(*string)), true

	case "Mutation.rejectRTBSource":
		if e.complexity.Mutation.RejectRTBSource == nil {
			break
		}

		args, err := ec.field_Mutation_rejectRTBSource_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RejectRTBSource(childComplexity, args["ID"].(uint64), args["msg"].(*string)), true

	case "Mutation.rejectUser":
		if e.complexity.Mutation.RejectUser == nil {
			break
		}

		args, err := ec.field_Mutation_rejectUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RejectUser(childComplexity, args["id"].(uint64), args["msg"].(*string)), true

	case "Mutation.rejectZone":
		if e.complexity.Mutation.RejectZone == nil {
			break
		}

		args, err := ec.field_Mutation_rejectZone_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RejectZone(childComplexity, args["ID"].(uint64), args["msg"].(*string)), true

	case "Mutation.removeAccountMember":
		if e.complexity.Mutation.RemoveAccountMember == nil {
			break
		}

		args, err := ec.field_Mutation_removeAccountMember_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RemoveAccountMember(childComplexity, args["memberID"].(uint64)), true

	case "Mutation.resetUserPassword":
		if e.complexity.Mutation.ResetUserPassword == nil {
			break
		}

		args, err := ec.field_Mutation_resetUserPassword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ResetUserPassword(childComplexity, args["email"].(string)), true

	case "Mutation.revokeDirectAccessToken":
		if e.complexity.Mutation.RevokeDirectAccessToken == nil {
			break
		}

		args, err := ec.field_Mutation_revokeDirectAccessToken_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RevokeDirectAccessToken(childComplexity, args["filter"].(models1.DirectAccessTokenListFilter)), true

	case "Mutation.runApplication":
		if e.complexity.Mutation.RunApplication == nil {
			break
		}

		args, err := ec.field_Mutation_runApplication_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RunApplication(childComplexity, args["ID"].(uint64), args["msg"].(*string)), true

	case "Mutation.runRTBSource":
		if e.complexity.Mutation.RunRTBSource == nil {
			break
		}

		args, err := ec.field_Mutation_runRTBSource_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RunRTBSource(childComplexity, args["ID"].(uint64)), true

	case "Mutation.setOption":
		if e.complexity.Mutation.SetOption == nil {
			break
		}

		args, err := ec.field_Mutation_setOption_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetOption(childComplexity, args["name"].(string), args["value"].(*types.NullableJSON), args["type"].(models1.OptionType), args["targetID"].(uint64)), true

	case "Mutation.switchAccount":
		if e.complexity.Mutation.SwitchAccount == nil {
			break
		}

		args, err := ec.field_Mutation_switchAccount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SwitchAccount(childComplexity, args["id"].(uint64)), true

	case "Mutation.updateAccount":
		if e.complexity.Mutation.UpdateAccount == nil {
			break
		}

		args, err := ec.field_Mutation_updateAccount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAccount(childComplexity, args["id"].(uint64), args["input"].(models1.AccountInput)), true

	case "Mutation.updateAccountMember":
		if e.complexity.Mutation.UpdateAccountMember == nil {
			break
		}

		args, err := ec.field_Mutation_updateAccountMember_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAccountMember(childComplexity, args["memberID"].(uint64), args["member"].(models1.MemberInput)), true

	case "Mutation.updateApplication":
		if e.complexity.Mutation.UpdateApplication == nil {
			break
		}

		args, err := ec.field_Mutation_updateApplication_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateApplication(childComplexity, args["ID"].(uint64), args["input"].(models.ApplicationUpdateInput)), true

	case "Mutation.updateAuthClient":
		if e.complexity.Mutation.UpdateAuthClient == nil {
			break
		}

		args, err := ec.field_Mutation_updateAuthClient_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAuthClient(childComplexity, args["id"].(string), args["input"].(models1.AuthClientInput)), true

	case "Mutation.updateBrowser":
		if e.complexity.Mutation.UpdateBrowser == nil {
			break
		}

		args, err := ec.field_Mutation_updateBrowser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateBrowser(childComplexity, args["ID"].(uint64), args["input"].(models.BrowserUpdateInput)), true

	case "Mutation.updateCategory":
		if e.complexity.Mutation.UpdateCategory == nil {
			break
		}

		args, err := ec.field_Mutation_updateCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCategory(childComplexity, args["ID"].(uint64), args["input"].(models.CategoryInput)), true

	case "Mutation.updateDeviceMaker":
		if e.complexity.Mutation.UpdateDeviceMaker == nil {
			break
		}

		args, err := ec.field_Mutation_updateDeviceMaker_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDeviceMaker(childComplexity, args["ID"].(uint64), args["input"].(models.DeviceMakerUpdateInput)), true

	case "Mutation.updateDeviceModel":
		if e.complexity.Mutation.UpdateDeviceModel == nil {
			break
		}

		args, err := ec.field_Mutation_updateDeviceModel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDeviceModel(childComplexity, args["ID"].(uint64), args["input"].(models.DeviceModelUpdateInput)), true

	case "Mutation.updateFormat":
		if e.complexity.Mutation.UpdateFormat == nil {
			break
		}

		args, err := ec.field_Mutation_updateFormat_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateFormat(childComplexity, args["ID"].(uint64), args["input"].(models.AdFormatInput)), true

	case "Mutation.updateOS":
		if e.complexity.Mutation.UpdateOs == nil {
			break
		}

		args, err := ec.field_Mutation_updateOS_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateOs(childComplexity, args["ID"].(uint64), args["input"].(models.OSUpdateInput)), true

	case "Mutation.updateRTBSource":
		if e.complexity.Mutation.UpdateRTBSource == nil {
			break
		}

		args, err := ec.field_Mutation_updateRTBSource_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRTBSource(childComplexity, args["ID"].(uint64), args["input"].(models.RTBSourceInput)), true

	case "Mutation.updateRole":
		if e.complexity.Mutation.UpdateRole == nil {
			break
		}

		args, err := ec.field_Mutation_updateRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRole(childComplexity, args["id"].(uint64), args["input"].(models1.RBACRoleInput)), true

	case "Mutation.updateUser":
		if e.complexity.Mutation.UpdateUser == nil {
			break
		}

		args, err := ec.field_Mutation_updateUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUser(childComplexity, args["id"].(uint64), args["input"].(models1.UserInput)), true

	case "Mutation.updateUserPassword":
		if e.complexity.Mutation.UpdateUserPassword == nil {
			break
		}

		args, err := ec.field_Mutation_updateUserPassword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUserPassword(childComplexity, args["token"].(string), args["email"].(string), args["password"].(string)), true

	case "Mutation.updateZone":
		if e.complexity.Mutation.UpdateZone == nil {
			break
		}

		args, err := ec.field_Mutation_updateZone_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateZone(childComplexity, args["ID"].(uint64), args["input"].(models.ZoneInput)), true

	case "OS.active":
		if e.complexity.OS.Active == nil {
			break
		}

		return e.complexity.OS.Active(childComplexity), true

	case "OS.createdAt":
		if e.complexity.OS.CreatedAt == nil {
			break
		}

		return e.complexity.OS.CreatedAt(childComplexity), true

	case "OS.deletedAt":
		if e.complexity.OS.DeletedAt == nil {
			break
		}

		return e.complexity.OS.DeletedAt(childComplexity), true

	case "OS.description":
		if e.complexity.OS.Description == nil {
			break
		}

		return e.complexity.OS.Description(childComplexity), true

	case "OS.ID":
		if e.complexity.OS.ID == nil {
			break
		}

		return e.complexity.OS.ID(childComplexity), true

	case "OS.matchNameExp":
		if e.complexity.OS.MatchNameExp == nil {
			break
		}

		return e.complexity.OS.MatchNameExp(childComplexity), true

	case "OS.matchUserAgentExp":
		if e.complexity.OS.MatchUserAgentExp == nil {
			break
		}

		return e.complexity.OS.MatchUserAgentExp(childComplexity), true

	case "OS.matchVersionMaxExp":
		if e.complexity.OS.MatchVersionMaxExp == nil {
			break
		}

		return e.complexity.OS.MatchVersionMaxExp(childComplexity), true

	case "OS.matchVersionMinExp":
		if e.complexity.OS.MatchVersionMinExp == nil {
			break
		}

		return e.complexity.OS.MatchVersionMinExp(childComplexity), true

	case "OS.name":
		if e.complexity.OS.Name == nil {
			break
		}

		return e.complexity.OS.Name(childComplexity), true

	case "OS.parent":
		if e.complexity.OS.Parent == nil {
			break
		}

		return e.complexity.OS.Parent(childComplexity), true

	case "OS.parentID":
		if e.complexity.OS.ParentID == nil {
			break
		}

		return e.complexity.OS.ParentID(childComplexity), true

	case "OS.updatedAt":
		if e.complexity.OS.UpdatedAt == nil {
			break
		}

		return e.complexity.OS.UpdatedAt(childComplexity), true

	case "OS.version":
		if e.complexity.OS.Version == nil {
			break
		}

		return e.complexity.OS.Version(childComplexity), true

	case "OS.versions":
		if e.complexity.OS.Versions == nil {
			break
		}

		return e.complexity.OS.Versions(childComplexity), true

	case "OS.yearEndSupport":
		if e.complexity.OS.YearEndSupport == nil {
			break
		}

		return e.complexity.OS.YearEndSupport(childComplexity), true

	case "OS.yearRelease":
		if e.complexity.OS.YearRelease == nil {
			break
		}

		return e.complexity.OS.YearRelease(childComplexity), true

	case "OSConnection.edges":
		if e.complexity.OSConnection.Edges == nil {
			break
		}

		return e.complexity.OSConnection.Edges(childComplexity), true

	case "OSConnection.list":
		if e.complexity.OSConnection.List == nil {
			break
		}

		return e.complexity.OSConnection.List(childComplexity), true

	case "OSConnection.pageInfo":
		if e.complexity.OSConnection.PageInfo == nil {
			break
		}

		return e.complexity.OSConnection.PageInfo(childComplexity), true

	case "OSConnection.totalCount":
		if e.complexity.OSConnection.TotalCount == nil {
			break
		}

		return e.complexity.OSConnection.TotalCount(childComplexity), true

	case "OSEdge.cursor":
		if e.complexity.OSEdge.Cursor == nil {
			break
		}

		return e.complexity.OSEdge.Cursor(childComplexity), true

	case "OSEdge.node":
		if e.complexity.OSEdge.Node == nil {
			break
		}

		return e.complexity.OSEdge.Node(childComplexity), true

	case "OSPayload.clientMutationID":
		if e.complexity.OSPayload.ClientMutationID == nil {
			break
		}

		return e.complexity.OSPayload.ClientMutationID(childComplexity), true

	case "OSPayload.OS":
		if e.complexity.OSPayload.Os == nil {
			break
		}

		return e.complexity.OSPayload.Os(childComplexity), true

	case "OSPayload.OSID":
		if e.complexity.OSPayload.Osid == nil {
			break
		}

		return e.complexity.OSPayload.Osid(childComplexity), true

	case "Option.name":
		if e.complexity.Option.Name == nil {
			break
		}

		return e.complexity.Option.Name(childComplexity), true

	case "Option.targetID":
		if e.complexity.Option.TargetID == nil {
			break
		}

		return e.complexity.Option.TargetID(childComplexity), true

	case "Option.type":
		if e.complexity.Option.Type == nil {
			break
		}

		return e.complexity.Option.Type(childComplexity), true

	case "Option.value":
		if e.complexity.Option.Value == nil {
			break
		}

		return e.complexity.Option.Value(childComplexity), true

	case "OptionConnection.edges":
		if e.complexity.OptionConnection.Edges == nil {
			break
		}

		return e.complexity.OptionConnection.Edges(childComplexity), true

	case "OptionConnection.list":
		if e.complexity.OptionConnection.List == nil {
			break
		}

		return e.complexity.OptionConnection.List(childComplexity), true

	case "OptionConnection.pageInfo":
		if e.complexity.OptionConnection.PageInfo == nil {
			break
		}

		return e.complexity.OptionConnection.PageInfo(childComplexity), true

	case "OptionConnection.totalCount":
		if e.complexity.OptionConnection.TotalCount == nil {
			break
		}

		return e.complexity.OptionConnection.TotalCount(childComplexity), true

	case "OptionEdge.cursor":
		if e.complexity.OptionEdge.Cursor == nil {
			break
		}

		return e.complexity.OptionEdge.Cursor(childComplexity), true

	case "OptionEdge.node":
		if e.complexity.OptionEdge.Node == nil {
			break
		}

		return e.complexity.OptionEdge.Node(childComplexity), true

	case "OptionPayload.clientMutationId":
		if e.complexity.OptionPayload.ClientMutationID == nil {
			break
		}

		return e.complexity.OptionPayload.ClientMutationID(childComplexity), true

	case "OptionPayload.name":
		if e.complexity.OptionPayload.Name == nil {
			break
		}

		return e.complexity.OptionPayload.Name(childComplexity), true

	case "OptionPayload.option":
		if e.complexity.OptionPayload.Option == nil {
			break
		}

		return e.complexity.OptionPayload.Option(childComplexity), true

	case "PageInfo.count":
		if e.complexity.PageInfo.Count == nil {
			break
		}

		return e.complexity.PageInfo.Count(childComplexity), true

	case "PageInfo.endCursor":
		if e.complexity.PageInfo.EndCursor == nil {
			break
		}

		return e.complexity.PageInfo.EndCursor(childComplexity), true

	case "PageInfo.hasNextPage":
		if e.complexity.PageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.PageInfo.HasNextPage(childComplexity), true

	case "PageInfo.hasPreviousPage":
		if e.complexity.PageInfo.HasPreviousPage == nil {
			break
		}

		return e.complexity.PageInfo.HasPreviousPage(childComplexity), true

	case "PageInfo.page":
		if e.complexity.PageInfo.Page == nil {
			break
		}

		return e.complexity.PageInfo.Page(childComplexity), true

	case "PageInfo.startCursor":
		if e.complexity.PageInfo.StartCursor == nil {
			break
		}

		return e.complexity.PageInfo.StartCursor(childComplexity), true

	case "PageInfo.total":
		if e.complexity.PageInfo.Total == nil {
			break
		}

		return e.complexity.PageInfo.Total(childComplexity), true

	case "Profile.about":
		if e.complexity.Profile.About == nil {
			break
		}

		return e.complexity.Profile.About(childComplexity), true

	case "Profile.companyName":
		if e.complexity.Profile.CompanyName == nil {
			break
		}

		return e.complexity.Profile.CompanyName(childComplexity), true

	case "Profile.createdAt":
		if e.complexity.Profile.CreatedAt == nil {
			break
		}

		return e.complexity.Profile.CreatedAt(childComplexity), true

	case "Profile.email":
		if e.complexity.Profile.Email == nil {
			break
		}

		return e.complexity.Profile.Email(childComplexity), true

	case "Profile.firstName":
		if e.complexity.Profile.FirstName == nil {
			break
		}

		return e.complexity.Profile.FirstName(childComplexity), true

	case "Profile.ID":
		if e.complexity.Profile.ID == nil {
			break
		}

		return e.complexity.Profile.ID(childComplexity), true

	case "Profile.lastName":
		if e.complexity.Profile.LastName == nil {
			break
		}

		return e.complexity.Profile.LastName(childComplexity), true

	case "Profile.messgangers":
		if e.complexity.Profile.Messgangers == nil {
			break
		}

		return e.complexity.Profile.Messgangers(childComplexity), true

	case "Profile.updatedAt":
		if e.complexity.Profile.UpdatedAt == nil {
			break
		}

		return e.complexity.Profile.UpdatedAt(childComplexity), true

	case "Profile.user":
		if e.complexity.Profile.User == nil {
			break
		}

		return e.complexity.Profile.User(childComplexity), true

	case "ProfileMessanger.address":
		if e.complexity.ProfileMessanger.Address == nil {
			break
		}

		return e.complexity.ProfileMessanger.Address(childComplexity), true

	case "ProfileMessanger.mtype":
		if e.complexity.ProfileMessanger.Mtype == nil {
			break
		}

		return e.complexity.ProfileMessanger.Mtype(childComplexity), true

	case "Query.account":
		if e.complexity.Query.Account == nil {
			break
		}

		args, err := ec.field_Query_account_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Account(childComplexity, args["id"].(uint64)), true

	case "Query.application":
		if e.complexity.Query.Application == nil {
			break
		}

		args, err := ec.field_Query_application_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Application(childComplexity, args["ID"].(uint64)), true

	case "Query.authClient":
		if e.complexity.Query.AuthClient == nil {
			break
		}

		args, err := ec.field_Query_authClient_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AuthClient(childComplexity, args["id"].(string)), true

	case "Query.browser":
		if e.complexity.Query.Browser == nil {
			break
		}

		args, err := ec.field_Query_browser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Browser(childComplexity, args["ID"].(uint64)), true

	case "Query.category":
		if e.complexity.Query.Category == nil {
			break
		}

		args, err := ec.field_Query_category_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Category(childComplexity, args["ID"].(uint64)), true

	case "Query.checkPermission":
		if e.complexity.Query.CheckPermission == nil {
			break
		}

		args, err := ec.field_Query_checkPermission_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CheckPermission(childComplexity, args["name"].(string), args["key"].(*string), args["targetID"].(*string), args["idKey"].(*string)), true

	case "Query.continents":
		if e.complexity.Query.Continents == nil {
			break
		}

		return e.complexity.Query.Continents(childComplexity), true

	case "Query.countries":
		if e.complexity.Query.Countries == nil {
			break
		}

		return e.complexity.Query.Countries(childComplexity), true

	case "Query.currentAccount":
		if e.complexity.Query.CurrentAccount == nil {
			break
		}

		return e.complexity.Query.CurrentAccount(childComplexity), true

	case "Query.currentSession":
		if e.complexity.Query.CurrentSession == nil {
			break
		}

		return e.complexity.Query.CurrentSession(childComplexity), true

	case "Query.currentSocialAccounts":
		if e.complexity.Query.CurrentSocialAccounts == nil {
			break
		}

		args, err := ec.field_Query_currentSocialAccounts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CurrentSocialAccounts(childComplexity, args["filter"].(*models1.SocialAccountListFilter), args["order"].(*models1.SocialAccountListOrder)), true

	case "Query.currentUser":
		if e.complexity.Query.CurrentUser == nil {
			break
		}

		return e.complexity.Query.CurrentUser(childComplexity), true

	case "Query.deviceMaker":
		if e.complexity.Query.DeviceMaker == nil {
			break
		}

		args, err := ec.field_Query_deviceMaker_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DeviceMaker(childComplexity, args["ID"].(uint64), args["codename"].(string)), true

	case "Query.deviceModel":
		if e.complexity.Query.DeviceModel == nil {
			break
		}

		args, err := ec.field_Query_deviceModel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DeviceModel(childComplexity, args["ID"].(uint64), args["codename"].(string)), true

	case "Query.format":
		if e.complexity.Query.Format == nil {
			break
		}

		args, err := ec.field_Query_format_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Format(childComplexity, args["ID"].(uint64), args["codename"].(string)), true

	case "Query.getDirectAccessToken":
		if e.complexity.Query.GetDirectAccessToken == nil {
			break
		}

		args, err := ec.field_Query_getDirectAccessToken_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetDirectAccessToken(childComplexity, args["id"].(uint64)), true

	case "Query.listAccountRolesAndPermissions":
		if e.complexity.Query.ListAccountRolesAndPermissions == nil {
			break
		}

		args, err := ec.field_Query_listAccountRolesAndPermissions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListAccountRolesAndPermissions(childComplexity, args["accountID"].(uint64), args["order"].(*models1.RBACRoleListOrder)), true

	case "Query.listAccounts":
		if e.complexity.Query.ListAccounts == nil {
			break
		}

		args, err := ec.field_Query_listAccounts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListAccounts(childComplexity, args["filter"].(*models1.AccountListFilter), args["order"].(*models1.AccountListOrder), args["page"].(*models1.Page)), true

	case "Query.listApplications":
		if e.complexity.Query.ListApplications == nil {
			break
		}

		args, err := ec.field_Query_listApplications_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListApplications(childComplexity, args["filter"].(*models.ApplicationListFilter), args["order"].(*models.ApplicationListOrder), args["page"].(*models1.Page)), true

	case "Query.listAuthClients":
		if e.complexity.Query.ListAuthClients == nil {
			break
		}

		args, err := ec.field_Query_listAuthClients_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListAuthClients(childComplexity, args["filter"].(*models1.AuthClientListFilter), args["order"].(*models1.AuthClientListOrder), args["page"].(*models1.Page)), true

	case "Query.listBrowsers":
		if e.complexity.Query.ListBrowsers == nil {
			break
		}

		args, err := ec.field_Query_listBrowsers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListBrowsers(childComplexity, args["filter"].(*models.BrowserListFilter), args["order"].([]*models.BrowserListOrder), args["page"].(*models1.Page)), true

	case "Query.listCategories":
		if e.complexity.Query.ListCategories == nil {
			break
		}

		args, err := ec.field_Query_listCategories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListCategories(childComplexity, args["filter"].(*models.CategoryListFilter), args["order"].(*models.CategoryListOrder), args["page"].(*models1.Page)), true

	case "Query.listDeviceMakers":
		if e.complexity.Query.ListDeviceMakers == nil {
			break
		}

		args, err := ec.field_Query_listDeviceMakers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListDeviceMakers(childComplexity, args["filter"].(*models.DeviceMakerListFilter), args["order"].([]*models.DeviceMakerListOrder), args["page"].(*models1.Page)), true

	case "Query.listDeviceModels":
		if e.complexity.Query.ListDeviceModels == nil {
			break
		}

		args, err := ec.field_Query_listDeviceModels_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListDeviceModels(childComplexity, args["filter"].(*models.DeviceModelListFilter), args["order"].([]*models.DeviceModelListOrder), args["page"].(*models1.Page)), true

	case "Query.listDeviceTypes":
		if e.complexity.Query.ListDeviceTypes == nil {
			break
		}

		return e.complexity.Query.ListDeviceTypes(childComplexity), true

	case "Query.listDirectAccessTokens":
		if e.complexity.Query.ListDirectAccessTokens == nil {
			break
		}

		args, err := ec.field_Query_listDirectAccessTokens_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListDirectAccessTokens(childComplexity, args["filter"].(*models1.DirectAccessTokenListFilter), args["order"].(*models1.DirectAccessTokenListOrder), args["page"].(*models1.Page)), true

	case "Query.listFormats":
		if e.complexity.Query.ListFormats == nil {
			break
		}

		args, err := ec.field_Query_listFormats_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListFormats(childComplexity, args["filter"].(*models.AdFormatListFilter), args["order"].(*models.AdFormatListOrder), args["page"].(*models1.Page)), true

	case "Query.listHistory":
		if e.complexity.Query.ListHistory == nil {
			break
		}

		args, err := ec.field_Query_listHistory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListHistory(childComplexity, args["filter"].(*models1.HistoryActionListFilter), args["order"].(*models1.HistoryActionListOrder), args["page"].(*models1.Page)), true

	case "Query.listMembers":
		if e.complexity.Query.ListMembers == nil {
			break
		}

		args, err := ec.field_Query_listMembers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListMembers(childComplexity, args["filter"].(*models1.MemberListFilter), args["order"].(*models1.MemberListOrder), args["page"].(*models1.Page)), true

	case "Query.listMyPermissions":
		if e.complexity.Query.ListMyPermissions == nil {
			break
		}

		args, err := ec.field_Query_listMyPermissions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListMyPermissions(childComplexity, args["patterns"].([]string)), true

	case "Query.listOptions":
		if e.complexity.Query.ListOptions == nil {
			break
		}

		args, err := ec.field_Query_listOptions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListOptions(childComplexity, args["filter"].(*models1.OptionListFilter), args["order"].(*models1.OptionListOrder), args["page"].(*models1.Page)), true

	case "Query.listOS":
		if e.complexity.Query.ListOs == nil {
			break
		}

		args, err := ec.field_Query_listOS_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListOs(childComplexity, args["filter"].(*models.OSListFilter), args["order"].([]*models.OSListOrder), args["page"].(*models1.Page)), true

	case "Query.listPermissions":
		if e.complexity.Query.ListPermissions == nil {
			break
		}

		args, err := ec.field_Query_listPermissions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListPermissions(childComplexity, args["patterns"].([]string)), true

	case "Query.listRTBSources":
		if e.complexity.Query.ListRTBSources == nil {
			break
		}

		args, err := ec.field_Query_listRTBSources_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListRTBSources(childComplexity, args["filter"].(*models.RTBSourceListFilter), args["order"].(*models.RTBSourceListOrder), args["page"].(*models1.Page)), true

	case "Query.listRoles":
		if e.complexity.Query.ListRoles == nil {
			break
		}

		args, err := ec.field_Query_listRoles_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListRoles(childComplexity, args["filter"].(*models1.RBACRoleListFilter), args["order"].(*models1.RBACRoleListOrder), args["page"].(*models1.Page)), true

	case "Query.listSocialAccounts":
		if e.complexity.Query.ListSocialAccounts == nil {
			break
		}

		args, err := ec.field_Query_listSocialAccounts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListSocialAccounts(childComplexity, args["filter"].(*models1.SocialAccountListFilter), args["order"].(*models1.SocialAccountListOrder), args["page"].(*models1.Page)), true

	case "Query.listUsers":
		if e.complexity.Query.ListUsers == nil {
			break
		}

		args, err := ec.field_Query_listUsers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListUsers(childComplexity, args["filter"].(*models1.UserListFilter), args["order"].(*models1.UserListOrder), args["page"].(*models1.Page)), true

	case "Query.listZones":
		if e.complexity.Query.ListZones == nil {
			break
		}

		args, err := ec.field_Query_listZones_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListZones(childComplexity, args["filter"].(*models.ZoneListFilter), args["order"].(*models.ZoneListOrder), args["page"].(*models1.Page)), true

	case "Query.option":
		if e.complexity.Query.Option == nil {
			break
		}

		args, err := ec.field_Query_option_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Option(childComplexity, args["name"].(string), args["type"].(models1.OptionType), args["targetID"].(uint64)), true

	case "Query.OS":
		if e.complexity.Query.Os == nil {
			break
		}

		args, err := ec.field_Query_OS_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Os(childComplexity, args["ID"].(uint64)), true

	case "Query.RTBSource":
		if e.complexity.Query.RTBSource == nil {
			break
		}

		args, err := ec.field_Query_RTBSource_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RTBSource(childComplexity, args["ID"].(uint64)), true

	case "Query.role":
		if e.complexity.Query.Role == nil {
			break
		}

		args, err := ec.field_Query_role_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Role(childComplexity, args["id"].(uint64)), true

	case "Query.serviceVersion":
		if e.complexity.Query.ServiceVersion == nil {
			break
		}

		return e.complexity.Query.ServiceVersion(childComplexity), true

	case "Query.socialAccount":
		if e.complexity.Query.SocialAccount == nil {
			break
		}

		args, err := ec.field_Query_socialAccount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SocialAccount(childComplexity, args["id"].(uint64)), true

	case "Query.statisticAdList":
		if e.complexity.Query.StatisticAdList == nil {
			break
		}

		args, err := ec.field_Query_statisticAdList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.StatisticAdList(childComplexity, args["filter"].(*models.StatisticAdListFilter), args["group"].([]models.StatisticKey), args["order"].([]*models.StatisticAdKeyOrder), args["page"].(*models1.Page)), true

	case "Query.user":
		if e.complexity.Query.User == nil {
			break
		}

		args, err := ec.field_Query_user_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.User(childComplexity, args["id"].(uint64), args["username"].(string)), true

	case "Query.zone":
		if e.complexity.Query.Zone == nil {
			break
		}

		args, err := ec.field_Query_zone_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Zone(childComplexity, args["ID"].(uint64)), true

	case "RBACPermission.access":
		if e.complexity.RBACPermission.Access == nil {
			break
		}

		return e.complexity.RBACPermission.Access(childComplexity), true

	case "RBACPermission.description":
		if e.complexity.RBACPermission.Description == nil {
			break
		}

		return e.complexity.RBACPermission.Description(childComplexity), true

	case "RBACPermission.fullname":
		if e.complexity.RBACPermission.Fullname == nil {
			break
		}

		return e.complexity.RBACPermission.Fullname(childComplexity), true

	case "RBACPermission.name":
		if e.complexity.RBACPermission.Name == nil {
			break
		}

		return e.complexity.RBACPermission.Name(childComplexity), true

	case "RBACPermission.object":
		if e.complexity.RBACPermission.Object == nil {
			break
		}

		return e.complexity.RBACPermission.Object(childComplexity), true

	case "RBACRole.childRoles":
		if e.complexity.RBACRole.ChildRoles == nil {
			break
		}

		return e.complexity.RBACRole.ChildRoles(childComplexity), true

	case "RBACRole.context":
		if e.complexity.RBACRole.Context == nil {
			break
		}

		return e.complexity.RBACRole.Context(childComplexity), true

	case "RBACRole.createdAt":
		if e.complexity.RBACRole.CreatedAt == nil {
			break
		}

		return e.complexity.RBACRole.CreatedAt(childComplexity), true

	case "RBACRole.deletedAt":
		if e.complexity.RBACRole.DeletedAt == nil {
			break
		}

		return e.complexity.RBACRole.DeletedAt(childComplexity), true

	case "RBACRole.description":
		if e.complexity.RBACRole.Description == nil {
			break
		}

		return e.complexity.RBACRole.Description(childComplexity), true

	case "RBACRole.ID":
		if e.complexity.RBACRole.ID == nil {
			break
		}

		return e.complexity.RBACRole.ID(childComplexity), true

	case "RBACRole.name":
		if e.complexity.RBACRole.Name == nil {
			break
		}

		return e.complexity.RBACRole.Name(childComplexity), true

	case "RBACRole.permissionPatterns":
		if e.complexity.RBACRole.PermissionPatterns == nil {
			break
		}

		return e.complexity.RBACRole.PermissionPatterns(childComplexity), true

	case "RBACRole.permissions":
		if e.complexity.RBACRole.Permissions == nil {
			break
		}

		return e.complexity.RBACRole.Permissions(childComplexity), true

	case "RBACRole.title":
		if e.complexity.RBACRole.Title == nil {
			break
		}

		return e.complexity.RBACRole.Title(childComplexity), true

	case "RBACRole.updatedAt":
		if e.complexity.RBACRole.UpdatedAt == nil {
			break
		}

		return e.complexity.RBACRole.UpdatedAt(childComplexity), true

	case "RBACRoleConnection.edges":
		if e.complexity.RBACRoleConnection.Edges == nil {
			break
		}

		return e.complexity.RBACRoleConnection.Edges(childComplexity), true

	case "RBACRoleConnection.list":
		if e.complexity.RBACRoleConnection.List == nil {
			break
		}

		return e.complexity.RBACRoleConnection.List(childComplexity), true

	case "RBACRoleConnection.pageInfo":
		if e.complexity.RBACRoleConnection.PageInfo == nil {
			break
		}

		return e.complexity.RBACRoleConnection.PageInfo(childComplexity), true

	case "RBACRoleConnection.totalCount":
		if e.complexity.RBACRoleConnection.TotalCount == nil {
			break
		}

		return e.complexity.RBACRoleConnection.TotalCount(childComplexity), true

	case "RBACRoleEdge.cursor":
		if e.complexity.RBACRoleEdge.Cursor == nil {
			break
		}

		return e.complexity.RBACRoleEdge.Cursor(childComplexity), true

	case "RBACRoleEdge.node":
		if e.complexity.RBACRoleEdge.Node == nil {
			break
		}

		return e.complexity.RBACRoleEdge.Node(childComplexity), true

	case "RBACRolePayload.clientMutationID":
		if e.complexity.RBACRolePayload.ClientMutationID == nil {
			break
		}

		return e.complexity.RBACRolePayload.ClientMutationID(childComplexity), true

	case "RBACRolePayload.role":
		if e.complexity.RBACRolePayload.Role == nil {
			break
		}

		return e.complexity.RBACRolePayload.Role(childComplexity), true

	case "RBACRolePayload.roleID":
		if e.complexity.RBACRolePayload.RoleID == nil {
			break
		}

		return e.complexity.RBACRolePayload.RoleID(childComplexity), true

	case "RTBSource.accountID":
		if e.complexity.RTBSource.AccountID == nil {
			break
		}

		return e.complexity.RTBSource.AccountID(childComplexity), true

	case "RTBSource.accuracy":
		if e.complexity.RTBSource.Accuracy == nil {
			break
		}

		return e.complexity.RTBSource.Accuracy(childComplexity), true

	case "RTBSource.active":
		if e.complexity.RTBSource.Active == nil {
			break
		}

		return e.complexity.RTBSource.Active(childComplexity), true

	case "RTBSource.adBlock":
		if e.complexity.RTBSource.AdBlock == nil {
			break
		}

		return e.complexity.RTBSource.AdBlock(childComplexity), true

	case "RTBSource.applications":
		if e.complexity.RTBSource.Applications == nil {
			break
		}

		return e.complexity.RTBSource.Applications(childComplexity), true

	case "RTBSource.auctionType":
		if e.complexity.RTBSource.AuctionType == nil {
			break
		}

		return e.complexity.RTBSource.AuctionType(childComplexity), true

	case "RTBSource.browsers":
		if e.complexity.RTBSource.Browsers == nil {
			break
		}

		return e.complexity.RTBSource.Browsers(childComplexity), true

	case "RTBSource.carriers":
		if e.complexity.RTBSource.Carriers == nil {
			break
		}

		return e.complexity.RTBSource.Carriers(childComplexity), true

	case "RTBSource.categories":
		if e.complexity.RTBSource.Categories == nil {
			break
		}

		return e.complexity.RTBSource.Categories(childComplexity), true

	case "RTBSource.config":
		if e.complexity.RTBSource.Config == nil {
			break
		}

		return e.complexity.RTBSource.Config(childComplexity), true

	case "RTBSource.countries":
		if e.complexity.RTBSource.Countries == nil {
			break
		}

		return e.complexity.RTBSource.Countries(childComplexity), true

	case "RTBSource.createdAt":
		if e.complexity.RTBSource.CreatedAt == nil {
			break
		}

		return e.complexity.RTBSource.CreatedAt(childComplexity), true

	case "RTBSource.deletedAt":
		if e.complexity.RTBSource.DeletedAt == nil {
			break
		}

		return e.complexity.RTBSource.DeletedAt(childComplexity), true

	case "RTBSource.description":
		if e.complexity.RTBSource.Description == nil {
			break
		}

		return e.complexity.RTBSource.Description(childComplexity), true

	case "RTBSource.deviceTypes":
		if e.complexity.RTBSource.DeviceTypes == nil {
			break
		}

		return e.complexity.RTBSource.DeviceTypes(childComplexity), true

	case "RTBSource.devices":
		if e.complexity.RTBSource.Devices == nil {
			break
		}

		return e.complexity.RTBSource.Devices(childComplexity), true

	case "RTBSource.domains":
		if e.complexity.RTBSource.Domains == nil {
			break
		}

		return e.complexity.RTBSource.Domains(childComplexity), true

	case "RTBSource.flags":
		if e.complexity.RTBSource.Flags == nil {
			break
		}

		return e.complexity.RTBSource.Flags(childComplexity), true

	case "RTBSource.formats":
		if e.complexity.RTBSource.Formats == nil {
			break
		}

		return e.complexity.RTBSource.Formats(childComplexity), true

	case "RTBSource.headers":
		if e.complexity.RTBSource.Headers == nil {
			break
		}

		return e.complexity.RTBSource.Headers(childComplexity), true

	case "RTBSource.ID":
		if e.complexity.RTBSource.ID == nil {
			break
		}

		return e.complexity.RTBSource.ID(childComplexity), true

	case "RTBSource.IP":
		if e.complexity.RTBSource.IP == nil {
			break
		}

		return e.complexity.RTBSource.IP(childComplexity), true

	case "RTBSource.languages":
		if e.complexity.RTBSource.Languages == nil {
			break
		}

		return e.complexity.RTBSource.Languages(childComplexity), true

	case "RTBSource.maxBid":
		if e.complexity.RTBSource.MaxBid == nil {
			break
		}

		return e.complexity.RTBSource.MaxBid(childComplexity), true

	case "RTBSource.method":
		if e.complexity.RTBSource.Method == nil {
			break
		}

		return e.complexity.RTBSource.Method(childComplexity), true

	case "RTBSource.minBid":
		if e.complexity.RTBSource.MinBid == nil {
			break
		}

		return e.complexity.RTBSource.MinBid(childComplexity), true

	case "RTBSource.minimalWeight":
		if e.complexity.RTBSource.MinimalWeight == nil {
			break
		}

		return e.complexity.RTBSource.MinimalWeight(childComplexity), true

	case "RTBSource.OS":
		if e.complexity.RTBSource.Os == nil {
			break
		}

		return e.complexity.RTBSource.Os(childComplexity), true

	case "RTBSource.priceCorrectionReduce":
		if e.complexity.RTBSource.PriceCorrectionReduce == nil {
			break
		}

		return e.complexity.RTBSource.PriceCorrectionReduce(childComplexity), true

	case "RTBSource.privateBrowsing":
		if e.complexity.RTBSource.PrivateBrowsing == nil {
			break
		}

		return e.complexity.RTBSource.PrivateBrowsing(childComplexity), true

	case "RTBSource.protocol":
		if e.complexity.RTBSource.Protocol == nil {
			break
		}

		return e.complexity.RTBSource.Protocol(childComplexity), true

	case "RTBSource.requestType":
		if e.complexity.RTBSource.RequestType == nil {
			break
		}

		return e.complexity.RTBSource.RequestType(childComplexity), true

	case "RTBSource.RPS":
		if e.complexity.RTBSource.Rps == nil {
			break
		}

		return e.complexity.RTBSource.Rps(childComplexity), true

	case "RTBSource.secure":
		if e.complexity.RTBSource.Secure == nil {
			break
		}

		return e.complexity.RTBSource.Secure(childComplexity), true

	case "RTBSource.status":
		if e.complexity.RTBSource.Status == nil {
			break
		}

		return e.complexity.RTBSource.Status(childComplexity), true

	case "RTBSource.timeout":
		if e.complexity.RTBSource.Timeout == nil {
			break
		}

		return e.complexity.RTBSource.Timeout(childComplexity), true

	case "RTBSource.title":
		if e.complexity.RTBSource.Title == nil {
			break
		}

		return e.complexity.RTBSource.Title(childComplexity), true

	case "RTBSource.URL":
		if e.complexity.RTBSource.URL == nil {
			break
		}

		return e.complexity.RTBSource.URL(childComplexity), true

	case "RTBSource.updatedAt":
		if e.complexity.RTBSource.UpdatedAt == nil {
			break
		}

		return e.complexity.RTBSource.UpdatedAt(childComplexity), true

	case "RTBSource.zones":
		if e.complexity.RTBSource.Zones == nil {
			break
		}

		return e.complexity.RTBSource.Zones(childComplexity), true

	case "RTBSourceConnection.edges":
		if e.complexity.RTBSourceConnection.Edges == nil {
			break
		}

		return e.complexity.RTBSourceConnection.Edges(childComplexity), true

	case "RTBSourceConnection.list":
		if e.complexity.RTBSourceConnection.List == nil {
			break
		}

		return e.complexity.RTBSourceConnection.List(childComplexity), true

	case "RTBSourceConnection.pageInfo":
		if e.complexity.RTBSourceConnection.PageInfo == nil {
			break
		}

		return e.complexity.RTBSourceConnection.PageInfo(childComplexity), true

	case "RTBSourceConnection.totalCount":
		if e.complexity.RTBSourceConnection.TotalCount == nil {
			break
		}

		return e.complexity.RTBSourceConnection.TotalCount(childComplexity), true

	case "RTBSourceEdge.cursor":
		if e.complexity.RTBSourceEdge.Cursor == nil {
			break
		}

		return e.complexity.RTBSourceEdge.Cursor(childComplexity), true

	case "RTBSourceEdge.node":
		if e.complexity.RTBSourceEdge.Node == nil {
			break
		}

		return e.complexity.RTBSourceEdge.Node(childComplexity), true

	case "RTBSourcePayload.clientMutationID":
		if e.complexity.RTBSourcePayload.ClientMutationID == nil {
			break
		}

		return e.complexity.RTBSourcePayload.ClientMutationID(childComplexity), true

	case "RTBSourcePayload.source":
		if e.complexity.RTBSourcePayload.Source == nil {
			break
		}

		return e.complexity.RTBSourcePayload.Source(childComplexity), true

	case "RTBSourcePayload.sourceID":
		if e.complexity.RTBSourcePayload.SourceID == nil {
			break
		}

		return e.complexity.RTBSourcePayload.SourceID(childComplexity), true

	case "SessionToken.expiresAt":
		if e.complexity.SessionToken.ExpiresAt == nil {
			break
		}

		return e.complexity.SessionToken.ExpiresAt(childComplexity), true

	case "SessionToken.isAdmin":
		if e.complexity.SessionToken.IsAdmin == nil {
			break
		}

		return e.complexity.SessionToken.IsAdmin(childComplexity), true

	case "SessionToken.roles":
		if e.complexity.SessionToken.Roles == nil {
			break
		}

		return e.complexity.SessionToken.Roles(childComplexity), true

	case "SessionToken.token":
		if e.complexity.SessionToken.Token == nil {
			break
		}

		return e.complexity.SessionToken.Token(childComplexity), true

	case "SocialAccount.avatar":
		if e.complexity.SocialAccount.Avatar == nil {
			break
		}

		return e.complexity.SocialAccount.Avatar(childComplexity), true

	case "SocialAccount.createdAt":
		if e.complexity.SocialAccount.CreatedAt == nil {
			break
		}

		return e.complexity.SocialAccount.CreatedAt(childComplexity), true

	case "SocialAccount.data":
		if e.complexity.SocialAccount.Data == nil {
			break
		}

		return e.complexity.SocialAccount.Data(childComplexity), true

	case "SocialAccount.deletedAt":
		if e.complexity.SocialAccount.DeletedAt == nil {
			break
		}

		return e.complexity.SocialAccount.DeletedAt(childComplexity), true

	case "SocialAccount.email":
		if e.complexity.SocialAccount.Email == nil {
			break
		}

		return e.complexity.SocialAccount.Email(childComplexity), true

	case "SocialAccount.firstName":
		if e.complexity.SocialAccount.FirstName == nil {
			break
		}

		return e.complexity.SocialAccount.FirstName(childComplexity), true

	case "SocialAccount.ID":
		if e.complexity.SocialAccount.ID == nil {
			break
		}

		return e.complexity.SocialAccount.ID(childComplexity), true

	case "SocialAccount.lastName":
		if e.complexity.SocialAccount.LastName == nil {
			break
		}

		return e.complexity.SocialAccount.LastName(childComplexity), true

	case "SocialAccount.link":
		if e.complexity.SocialAccount.Link == nil {
			break
		}

		return e.complexity.SocialAccount.Link(childComplexity), true

	case "SocialAccount.provider":
		if e.complexity.SocialAccount.Provider == nil {
			break
		}

		return e.complexity.SocialAccount.Provider(childComplexity), true

	case "SocialAccount.sessions":
		if e.complexity.SocialAccount.Sessions == nil {
			break
		}

		return e.complexity.SocialAccount.Sessions(childComplexity), true

	case "SocialAccount.socialID":
		if e.complexity.SocialAccount.SocialID == nil {
			break
		}

		return e.complexity.SocialAccount.SocialID(childComplexity), true

	case "SocialAccount.updatedAt":
		if e.complexity.SocialAccount.UpdatedAt == nil {
			break
		}

		return e.complexity.SocialAccount.UpdatedAt(childComplexity), true

	case "SocialAccount.userID":
		if e.complexity.SocialAccount.UserID == nil {
			break
		}

		return e.complexity.SocialAccount.UserID(childComplexity), true

	case "SocialAccount.username":
		if e.complexity.SocialAccount.Username == nil {
			break
		}

		return e.complexity.SocialAccount.Username(childComplexity), true

	case "SocialAccountConnection.edges":
		if e.complexity.SocialAccountConnection.Edges == nil {
			break
		}

		return e.complexity.SocialAccountConnection.Edges(childComplexity), true

	case "SocialAccountConnection.list":
		if e.complexity.SocialAccountConnection.List == nil {
			break
		}

		return e.complexity.SocialAccountConnection.List(childComplexity), true

	case "SocialAccountConnection.pageInfo":
		if e.complexity.SocialAccountConnection.PageInfo == nil {
			break
		}

		return e.complexity.SocialAccountConnection.PageInfo(childComplexity), true

	case "SocialAccountConnection.totalCount":
		if e.complexity.SocialAccountConnection.TotalCount == nil {
			break
		}

		return e.complexity.SocialAccountConnection.TotalCount(childComplexity), true

	case "SocialAccountEdge.cursor":
		if e.complexity.SocialAccountEdge.Cursor == nil {
			break
		}

		return e.complexity.SocialAccountEdge.Cursor(childComplexity), true

	case "SocialAccountEdge.node":
		if e.complexity.SocialAccountEdge.Node == nil {
			break
		}

		return e.complexity.SocialAccountEdge.Node(childComplexity), true

	case "SocialAccountPayload.clientMutationID":
		if e.complexity.SocialAccountPayload.ClientMutationID == nil {
			break
		}

		return e.complexity.SocialAccountPayload.ClientMutationID(childComplexity), true

	case "SocialAccountPayload.socialAccount":
		if e.complexity.SocialAccountPayload.SocialAccount == nil {
			break
		}

		return e.complexity.SocialAccountPayload.SocialAccount(childComplexity), true

	case "SocialAccountPayload.socialAccountID":
		if e.complexity.SocialAccountPayload.SocialAccountID == nil {
			break
		}

		return e.complexity.SocialAccountPayload.SocialAccountID(childComplexity), true

	case "SocialAccountSession.accessToken":
		if e.complexity.SocialAccountSession.AccessToken == nil {
			break
		}

		return e.complexity.SocialAccountSession.AccessToken(childComplexity), true

	case "SocialAccountSession.createdAt":
		if e.complexity.SocialAccountSession.CreatedAt == nil {
			break
		}

		return e.complexity.SocialAccountSession.CreatedAt(childComplexity), true

	case "SocialAccountSession.deletedAt":
		if e.complexity.SocialAccountSession.DeletedAt == nil {
			break
		}

		return e.complexity.SocialAccountSession.DeletedAt(childComplexity), true

	case "SocialAccountSession.expiresAt":
		if e.complexity.SocialAccountSession.ExpiresAt == nil {
			break
		}

		return e.complexity.SocialAccountSession.ExpiresAt(childComplexity), true

	case "SocialAccountSession.name":
		if e.complexity.SocialAccountSession.Name == nil {
			break
		}

		return e.complexity.SocialAccountSession.Name(childComplexity), true

	case "SocialAccountSession.refreshToken":
		if e.complexity.SocialAccountSession.RefreshToken == nil {
			break
		}

		return e.complexity.SocialAccountSession.RefreshToken(childComplexity), true

	case "SocialAccountSession.scope":
		if e.complexity.SocialAccountSession.Scope == nil {
			break
		}

		return e.complexity.SocialAccountSession.Scope(childComplexity), true

	case "SocialAccountSession.socialAccountID":
		if e.complexity.SocialAccountSession.SocialAccountID == nil {
			break
		}

		return e.complexity.SocialAccountSession.SocialAccountID(childComplexity), true

	case "SocialAccountSession.tokenType":
		if e.complexity.SocialAccountSession.TokenType == nil {
			break
		}

		return e.complexity.SocialAccountSession.TokenType(childComplexity), true

	case "SocialAccountSession.updatedAt":
		if e.complexity.SocialAccountSession.UpdatedAt == nil {
			break
		}

		return e.complexity.SocialAccountSession.UpdatedAt(childComplexity), true

	case "StatisticAdItem.bidPrice":
		if e.complexity.StatisticAdItem.BidPrice == nil {
			break
		}

		return e.complexity.StatisticAdItem.BidPrice(childComplexity), true

	case "StatisticAdItem.bids":
		if e.complexity.StatisticAdItem.Bids == nil {
			break
		}

		return e.complexity.StatisticAdItem.Bids(childComplexity), true

	case "StatisticAdItem.clicks":
		if e.complexity.StatisticAdItem.Clicks == nil {
			break
		}

		return e.complexity.StatisticAdItem.Clicks(childComplexity), true

	case "StatisticAdItem.CTR":
		if e.complexity.StatisticAdItem.Ctr == nil {
			break
		}

		return e.complexity.StatisticAdItem.Ctr(childComplexity), true

	case "StatisticAdItem.directs":
		if e.complexity.StatisticAdItem.Directs == nil {
			break
		}

		return e.complexity.StatisticAdItem.Directs(childComplexity), true

	case "StatisticAdItem.eCPC":
		if e.complexity.StatisticAdItem.ECpc == nil {
			break
		}

		return e.complexity.StatisticAdItem.ECpc(childComplexity), true

	case "StatisticAdItem.eCPM":
		if e.complexity.StatisticAdItem.ECpm == nil {
			break
		}

		return e.complexity.StatisticAdItem.ECpm(childComplexity), true

	case "StatisticAdItem.errors":
		if e.complexity.StatisticAdItem.Errors == nil {
			break
		}

		return e.complexity.StatisticAdItem.Errors(childComplexity), true

	case "StatisticAdItem.impressions":
		if e.complexity.StatisticAdItem.Impressions == nil {
			break
		}

		return e.complexity.StatisticAdItem.Impressions(childComplexity), true

	case "StatisticAdItem.keys":
		if e.complexity.StatisticAdItem.Keys == nil {
			break
		}

		return e.complexity.StatisticAdItem.Keys(childComplexity), true

	case "StatisticAdItem.nobids":
		if e.complexity.StatisticAdItem.Nobids == nil {
			break
		}

		return e.complexity.StatisticAdItem.Nobids(childComplexity), true

	case "StatisticAdItem.profit":
		if e.complexity.StatisticAdItem.Profit == nil {
			break
		}

		return e.complexity.StatisticAdItem.Profit(childComplexity), true

	case "StatisticAdItem.requests":
		if e.complexity.StatisticAdItem.Requests == nil {
			break
		}

		return e.complexity.StatisticAdItem.Requests(childComplexity), true

	case "StatisticAdItem.skips":
		if e.complexity.StatisticAdItem.Skips == nil {
			break
		}

		return e.complexity.StatisticAdItem.Skips(childComplexity), true

	case "StatisticAdItem.views":
		if e.complexity.StatisticAdItem.Views == nil {
			break
		}

		return e.complexity.StatisticAdItem.Views(childComplexity), true

	case "StatisticAdItem.wins":
		if e.complexity.StatisticAdItem.Wins == nil {
			break
		}

		return e.complexity.StatisticAdItem.Wins(childComplexity), true

	case "StatisticAdItemConnection.list":
		if e.complexity.StatisticAdItemConnection.List == nil {
			break
		}

		return e.complexity.StatisticAdItemConnection.List(childComplexity), true

	case "StatisticAdItemConnection.pageInfo":
		if e.complexity.StatisticAdItemConnection.PageInfo == nil {
			break
		}

		return e.complexity.StatisticAdItemConnection.PageInfo(childComplexity), true

	case "StatisticAdItemConnection.totalCount":
		if e.complexity.StatisticAdItemConnection.TotalCount == nil {
			break
		}

		return e.complexity.StatisticAdItemConnection.TotalCount(childComplexity), true

	case "StatisticItemKey.key":
		if e.complexity.StatisticItemKey.Key == nil {
			break
		}

		return e.complexity.StatisticItemKey.Key(childComplexity), true

	case "StatisticItemKey.text":
		if e.complexity.StatisticItemKey.Text == nil {
			break
		}

		return e.complexity.StatisticItemKey.Text(childComplexity), true

	case "StatisticItemKey.value":
		if e.complexity.StatisticItemKey.Value == nil {
			break
		}

		return e.complexity.StatisticItemKey.Value(childComplexity), true

	case "StatusResponse.clientMutationID":
		if e.complexity.StatusResponse.ClientMutationID == nil {
			break
		}

		return e.complexity.StatusResponse.ClientMutationID(childComplexity), true

	case "StatusResponse.message":
		if e.complexity.StatusResponse.Message == nil {
			break
		}

		return e.complexity.StatusResponse.Message(childComplexity), true

	case "StatusResponse.status":
		if e.complexity.StatusResponse.Status == nil {
			break
		}

		return e.complexity.StatusResponse.Status(childComplexity), true

	case "TimeZone.lon":
		if e.complexity.TimeZone.Lon == nil {
			break
		}

		return e.complexity.TimeZone.Lon(childComplexity), true

	case "TimeZone.name":
		if e.complexity.TimeZone.Name == nil {
			break
		}

		return e.complexity.TimeZone.Name(childComplexity), true

	case "User.createdAt":
		if e.complexity.User.CreatedAt == nil {
			break
		}

		return e.complexity.User.CreatedAt(childComplexity), true

	case "User.ID":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.status":
		if e.complexity.User.Status == nil {
			break
		}

		return e.complexity.User.Status(childComplexity), true

	case "User.statusMessage":
		if e.complexity.User.StatusMessage == nil {
			break
		}

		return e.complexity.User.StatusMessage(childComplexity), true

	case "User.updatedAt":
		if e.complexity.User.UpdatedAt == nil {
			break
		}

		return e.complexity.User.UpdatedAt(childComplexity), true

	case "User.username":
		if e.complexity.User.Username == nil {
			break
		}

		return e.complexity.User.Username(childComplexity), true

	case "UserConnection.edges":
		if e.complexity.UserConnection.Edges == nil {
			break
		}

		return e.complexity.UserConnection.Edges(childComplexity), true

	case "UserConnection.list":
		if e.complexity.UserConnection.List == nil {
			break
		}

		return e.complexity.UserConnection.List(childComplexity), true

	case "UserConnection.pageInfo":
		if e.complexity.UserConnection.PageInfo == nil {
			break
		}

		return e.complexity.UserConnection.PageInfo(childComplexity), true

	case "UserConnection.totalCount":
		if e.complexity.UserConnection.TotalCount == nil {
			break
		}

		return e.complexity.UserConnection.TotalCount(childComplexity), true

	case "UserEdge.cursor":
		if e.complexity.UserEdge.Cursor == nil {
			break
		}

		return e.complexity.UserEdge.Cursor(childComplexity), true

	case "UserEdge.node":
		if e.complexity.UserEdge.Node == nil {
			break
		}

		return e.complexity.UserEdge.Node(childComplexity), true

	case "UserPayload.clientMutationID":
		if e.complexity.UserPayload.ClientMutationID == nil {
			break
		}

		return e.complexity.UserPayload.ClientMutationID(childComplexity), true

	case "UserPayload.user":
		if e.complexity.UserPayload.User == nil {
			break
		}

		return e.complexity.UserPayload.User(childComplexity), true

	case "UserPayload.userID":
		if e.complexity.UserPayload.UserID == nil {
			break
		}

		return e.complexity.UserPayload.UserID(childComplexity), true

	case "Zone.accountID":
		if e.complexity.Zone.AccountID == nil {
			break
		}

		return e.complexity.Zone.AccountID(childComplexity), true

	case "Zone.active":
		if e.complexity.Zone.Active == nil {
			break
		}

		return e.complexity.Zone.Active(childComplexity), true

	case "Zone.allowedFormats":
		if e.complexity.Zone.AllowedFormats == nil {
			break
		}

		return e.complexity.Zone.AllowedFormats(childComplexity), true

	case "Zone.allowedSources":
		if e.complexity.Zone.AllowedSources == nil {
			break
		}

		return e.complexity.Zone.AllowedSources(childComplexity), true

	case "Zone.allowedTypes":
		if e.complexity.Zone.AllowedTypes == nil {
			break
		}

		return e.complexity.Zone.AllowedTypes(childComplexity), true

	case "Zone.campaigns":
		if e.complexity.Zone.Campaigns == nil {
			break
		}

		return e.complexity.Zone.Campaigns(childComplexity), true

	case "Zone.codename":
		if e.complexity.Zone.Codename == nil {
			break
		}

		return e.complexity.Zone.Codename(childComplexity), true

	case "Zone.context":
		if e.complexity.Zone.Context == nil {
			break
		}

		return e.complexity.Zone.Context(childComplexity), true

	case "Zone.createdAt":
		if e.complexity.Zone.CreatedAt == nil {
			break
		}

		return e.complexity.Zone.CreatedAt(childComplexity), true

	case "Zone.defaultCode":
		if e.complexity.Zone.DefaultCode == nil {
			break
		}

		return e.complexity.Zone.DefaultCode(childComplexity), true

	case "Zone.deletedAt":
		if e.complexity.Zone.DeletedAt == nil {
			break
		}

		return e.complexity.Zone.DeletedAt(childComplexity), true

	case "Zone.description":
		if e.complexity.Zone.Description == nil {
			break
		}

		return e.complexity.Zone.Description(childComplexity), true

	case "Zone.disallowedSources":
		if e.complexity.Zone.DisallowedSources == nil {
			break
		}

		return e.complexity.Zone.DisallowedSources(childComplexity), true

	case "Zone.fixedPurchasePrice":
		if e.complexity.Zone.FixedPurchasePrice == nil {
			break
		}

		return e.complexity.Zone.FixedPurchasePrice(childComplexity), true

	case "Zone.ID":
		if e.complexity.Zone.ID == nil {
			break
		}

		return e.complexity.Zone.ID(childComplexity), true

	case "Zone.minECPM":
		if e.complexity.Zone.MinEcpm == nil {
			break
		}

		return e.complexity.Zone.MinEcpm(childComplexity), true

	case "Zone.status":
		if e.complexity.Zone.Status == nil {
			break
		}

		return e.complexity.Zone.Status(childComplexity), true

	case "Zone.title":
		if e.complexity.Zone.Title == nil {
			break
		}

		return e.complexity.Zone.Title(childComplexity), true

	case "Zone.updatedAt":
		if e.complexity.Zone.UpdatedAt == nil {
			break
		}

		return e.complexity.Zone.UpdatedAt(childComplexity), true

	case "ZoneConnection.edges":
		if e.complexity.ZoneConnection.Edges == nil {
			break
		}

		return e.complexity.ZoneConnection.Edges(childComplexity), true

	case "ZoneConnection.list":
		if e.complexity.ZoneConnection.List == nil {
			break
		}

		return e.complexity.ZoneConnection.List(childComplexity), true

	case "ZoneConnection.pageInfo":
		if e.complexity.ZoneConnection.PageInfo == nil {
			break
		}

		return e.complexity.ZoneConnection.PageInfo(childComplexity), true

	case "ZoneConnection.totalCount":
		if e.complexity.ZoneConnection.TotalCount == nil {
			break
		}

		return e.complexity.ZoneConnection.TotalCount(childComplexity), true

	case "ZoneEdge.cursor":
		if e.complexity.ZoneEdge.Cursor == nil {
			break
		}

		return e.complexity.ZoneEdge.Cursor(childComplexity), true

	case "ZoneEdge.node":
		if e.complexity.ZoneEdge.Node == nil {
			break
		}

		return e.complexity.ZoneEdge.Node(childComplexity), true

	case "ZonePayload.clientMutationID":
		if e.complexity.ZonePayload.ClientMutationID == nil {
			break
		}

		return e.complexity.ZonePayload.ClientMutationID(childComplexity), true

	case "ZonePayload.zone":
		if e.complexity.ZonePayload.Zone == nil {
			break
		}

		return e.complexity.ZonePayload.Zone(childComplexity), true

	case "ZonePayload.zoneID":
		if e.complexity.ZonePayload.ZoneID == nil {
			break
		}

		return e.complexity.ZonePayload.ZoneID(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	opCtx := graphql.GetOperationContext(ctx)
	ec := executionContext{opCtx, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputAccountCreateInput,
		ec.unmarshalInputAccountInput,
		ec.unmarshalInputAccountListFilter,
		ec.unmarshalInputAccountListOrder,
		ec.unmarshalInputAdFormatInput,
		ec.unmarshalInputAdFormatListFilter,
		ec.unmarshalInputAdFormatListOrder,
		ec.unmarshalInputApplicationCreateInput,
		ec.unmarshalInputApplicationListFilter,
		ec.unmarshalInputApplicationListOrder,
		ec.unmarshalInputApplicationUpdateInput,
		ec.unmarshalInputAuthClientInput,
		ec.unmarshalInputAuthClientListFilter,
		ec.unmarshalInputAuthClientListOrder,
		ec.unmarshalInputBrowserCreateInput,
		ec.unmarshalInputBrowserListFilter,
		ec.unmarshalInputBrowserListOrder,
		ec.unmarshalInputBrowserUpdateInput,
		ec.unmarshalInputCategoryInput,
		ec.unmarshalInputCategoryListFilter,
		ec.unmarshalInputCategoryListOrder,
		ec.unmarshalInputDeviceMakerCreateInput,
		ec.unmarshalInputDeviceMakerListFilter,
		ec.unmarshalInputDeviceMakerListOrder,
		ec.unmarshalInputDeviceMakerUpdateInput,
		ec.unmarshalInputDeviceModelCreateInput,
		ec.unmarshalInputDeviceModelListFilter,
		ec.unmarshalInputDeviceModelListOrder,
		ec.unmarshalInputDeviceModelUpdateInput,
		ec.unmarshalInputDirectAccessTokenListFilter,
		ec.unmarshalInputDirectAccessTokenListOrder,
		ec.unmarshalInputHistoryActionListFilter,
		ec.unmarshalInputHistoryActionListOrder,
		ec.unmarshalInputInviteMemberInput,
		ec.unmarshalInputMemberInput,
		ec.unmarshalInputMemberListFilter,
		ec.unmarshalInputMemberListOrder,
		ec.unmarshalInputOSCreateInput,
		ec.unmarshalInputOSListFilter,
		ec.unmarshalInputOSListOrder,
		ec.unmarshalInputOSUpdateInput,
		ec.unmarshalInputOptionListFilter,
		ec.unmarshalInputOptionListOrder,
		ec.unmarshalInputPage,
		ec.unmarshalInputRBACRoleInput,
		ec.unmarshalInputRBACRoleListFilter,
		ec.unmarshalInputRBACRoleListOrder,
		ec.unmarshalInputRTBSourceInput,
		ec.unmarshalInputRTBSourceListFilter,
		ec.unmarshalInputRTBSourceListOrder,
		ec.unmarshalInputSocialAccountListFilter,
		ec.unmarshalInputSocialAccountListOrder,
		ec.unmarshalInputStatisticAdKeyCondition,
		ec.unmarshalInputStatisticAdKeyOrder,
		ec.unmarshalInputStatisticAdListFilter,
		ec.unmarshalInputUserInput,
		ec.unmarshalInputUserListFilter,
		ec.unmarshalInputUserListOrder,
		ec.unmarshalInputZoneInput,
		ec.unmarshalInputZoneListFilter,
		ec.unmarshalInputZoneListOrder,
	)
	first := true

	switch opCtx.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, opCtx.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, opCtx.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../../../../submodules/blaze-api/protocol/graphql/schemas/account_base.graphql", Input: `"""
Account is a company account that can be used to login to the system.
"""
type Account {
  """
  The primary key of the Account
  """
  ID: ID64!

  """
  Status of Account active
  """
  status: ApproveStatus!

  """
  Message which defined during user approve/rejection process
  """
  statusMessage: String

  title: String!
  description: String!

  """
	logoURI is an URL string that references a logo for the client.
  """
	logoURI: String!

  """
	policyURI is a URL string that points to a human-readable privacy policy document
	that describes how the deployment organization collects, uses,
	retains, and discloses personal data.
  """
	policyURI: String!

  """
	termsOfServiceURI is a URL string that points to a human-readable terms of service
	document for the client that describes a contractual relationship
	between the end-user and the client that the end-user accepts when
	authorizing the client.
  """
	termsOfServiceURI: String!

  """
	clientURI is an URL string of a web page providing information about the client.
	If present, the server SHOULD display this URL to the end-user in
	a clickable fashion.
  """
	clientURI: String!

  """
	contacts is a array of strings representing ways to contact people responsible
	for this client, typically email addresses.
  """
	contacts: [String!]

  createdAt: Time!
  updatedAt: Time!
}

type AccountEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Account
}

"""
AccountConnection implements collection accessor interface with pagination.
"""
type AccountConnection {
  """
  The total number of campaigns
  """
  totalCount: Int!

  """
  The edges for each of the account's lists
  """
  edges: [AccountEdge!]

  """
  A list of the accounts, as a convenience when edges are not needed.
  """
  list: [Account!]

  """
  Information for paginating this connection
  """
  pageInfo: PageInfo!
}

"""
AccountPayload wrapper to access of Account oprtation results
"""
type AccountPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationID: String!

  """
  Account ID operation result
  """
  accountID: ID64!

  """
  Account object accessor
  """
  account: Account
}

###############################################################################
# Query
###############################################################################

input AccountListFilter {
  ID: [ID64!]
  UserID: [ID64!]
  title: [String!]
  status: [ApproveStatus!]
}

input AccountListOrder {
  ID: Ordering
  title: Ordering
  status: Ordering
}

###############################################################################
# Mutations
###############################################################################

input AccountInput {
  status: ApproveStatus
  title: String
  description: String
	logoURI: String
	policyURI: String
	termsOfServiceURI: String
	clientURI: String
	contacts: [String!]
}

input AccountCreateInput {
  ownerID:  ID64
  owner:    UserInput
  account:  AccountInput!
  password: String!
}

type AccountCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationID: String!

  """
  The account object
  """
  account: Account!

  """
  The user object
  """
  owner: User!
}

###############################################################################
# Query declarations
###############################################################################

extend type Query {
  """
  Current session from the token
  """
  currentSession: SessionToken! @hasPermissions(permissions: ["account.view.*"])

  """
  Current account from the session
  """
  currentAccount: AccountPayload! @hasPermissions(permissions: ["account.view.*"])

  """
  Get account object by ID
  """
  account(id: ID64!): AccountPayload! @hasPermissions(permissions: ["account.view.*"])

  """
  List of the account objects which can be filtered and ordered by some fields
  """
  listAccounts(
    filter: AccountListFilter = null,
    order: AccountListOrder = null,
    page: Page = null
  ): AccountConnection @hasPermissions(permissions: ["account.list.*"])

  """
  List of the account roles/permissions
  """
  listAccountRolesAndPermissions(accountID: ID64!, order: RBACRoleListOrder = null): RBACRoleConnection @hasPermissions(permissions: ["account.view.*"])
}

extend type Mutation {
  """
  Login to the system and get the token as JWT session
  """
  login(login: String!, password: String!): SessionToken!

  """
  Logout from the system
  """
  logout: Boolean!

  """
  Switch the account by ID
  """
  switchAccount(id: ID64!): SessionToken!

  """
  Register the new account
  """
  registerAccount(input: AccountCreateInput!): AccountCreatePayload! @hasPermissions(permissions: ["account.register"])

  """
  Update account info
  """
  updateAccount(id: ID64!, input: AccountInput!): AccountPayload! @hasPermissions(permissions: ["account.update.*"])

  """
  Approve account and leave the comment
  """
  approveAccount(id: ID64!, msg: String!): AccountPayload! @hasPermissions(permissions: ["account.approve.*"])

  """
  Reject account and leave the comment
  """
  rejectAccount(id: ID64!, msg: String!): AccountPayload! @hasPermissions(permissions: ["account.reject.*"])
}
`, BuiltIn: false},
	{Name: "../../../../submodules/blaze-api/protocol/graphql/schemas/account_member.graphql", Input: `"""
Account Member represents a member of the account
"""
type Member {
  """
  The primary key of the Member
  """
  ID: ID64!

  """
  Status of Member active
  """
  status: ApproveStatus!

  """
  User object accessor
  """
  user: User!

  """
  Account object accessor
  """
  account: Account!

  """
  Is the user an admin of the account
  """
  isAdmin: Boolean!

  """
  Roles of the member
  """
  roles: [RBACRole!]

  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
}

type MemberEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Member
}

type MemberConnection {
  """
  The total number of campaigns
  """
  totalCount: Int!

  """
  The edges for each of the members's lists
  """
  edges: [MemberEdge!]

  """
  A list of the members, as a convenience when edges are not needed.
  """
  list: [Member!]

  """
  Information for paginating this connection
  """
  pageInfo: PageInfo!
}

type MemberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationID: String!

  """
  Member ID operation result
  """
  memberID: ID64!

  """
  Member object accessor
  """
  member: Member
}

###############################################################################
# Query
###############################################################################

input MemberListFilter {
  ID: [ID64!]
  status: [ApproveStatus!]
  userID: [ID64!]
  accountID: [ID64!]
  isAdmin: Boolean
}

input MemberListOrder {
  ID: Ordering
  status: Ordering
  userID: Ordering
  accountID: Ordering
  isAdmin: Ordering
  createdAt: Ordering
  updatedAt: Ordering
}

input InviteMemberInput {
  """
  The email of the member to invite
  """
  email: String!

  """
  The roles to assign to the member
  """
  roles: [String!]!

  """
  Is the user an admin of the account
  """
  isAdmin: Boolean! = false
}

input MemberInput {
  """
  The roles to assign to the member
  """
  roles: [String!]!

  """
  Is the user an admin of the account
  """
  isAdmin: Boolean! = false
}

###############################################################################
# Query declarations
###############################################################################

extend type Query {
  listMembers(
    """
    The filter to apply to the list
    """
    filter: MemberListFilter = null,

    """
    The order to apply to the list
    """
    order: MemberListOrder = null,

    """
    The pagination to apply to the list
    """
    page: Page = null
  ): MemberConnection @acl(permissions: ["account.member.list.*"])
}

extend type Mutation {
  """
  Invite a new member to the account
  """
  inviteAccountMember(
    """
    The account ID to invite the member to
    """
    accountID: ID64!,

    """
    The new member to invite to the account
    """
    member: InviteMemberInput!
  ): MemberPayload! @acl(permissions: ["account.member.invite.*"])

  """
  Update the member data
  """
  updateAccountMember(
    """
    The member ID to update
    """
    memberID: ID64!,

    """
    The new member data to update
    """
    member: MemberInput!
  ): MemberPayload! @acl(permissions: ["account.member.update.*"])

  """
  Remove the member from the account
  """
  removeAccountMember(
    """
    The member ID to remove
    """
    memberID: ID64!
  ): MemberPayload! @acl(permissions: ["account.member.delete.*"])

  """
  Approve the member to join the account
  """
  approveAccountMember(
    """
    The member ID to approve
    """
    memberID: ID64!

    """
    Reason message for the approval
    """
    msg: String! = ""
  ): MemberPayload! @acl(permissions: ["account.member.approve.*"])

  """
  Reject the member to join the account
  """
  rejectAccountMember(
    """
    The member ID to reject
    """
    memberID: ID64!

    """
    Reason message for the rejection
    """
    msg: String! = ""
  ): MemberPayload! @acl(permissions: ["account.member.reject.*"])
}
`, BuiltIn: false},
	{Name: "../../../../submodules/blaze-api/protocol/graphql/schemas/account_social.graphql", Input: `type SocialAccountSession {
  """
  The unique name of the session to destinguish between different sessions with different scopes
  """
  name: String!
  socialAccountID: ID64!

  tokenType: String!
  accessToken: String!
  refreshToken: String!
  scope: [String!]

  createdAt: Time!
  updatedAt: Time!
  expiresAt: Time
  deletedAt: Time
}

type SocialAccount {
  ID: ID64!
  userID: ID64!

  socialID: String!
  provider: String!
  email: String!
  username: String!

  firstName: String!
  lastName: String!
  avatar: String!
  link: String!

  data: NullableJSON!

  """
  Social Account session object accessor
  """
  sessions: [SocialAccountSession!]

  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
}

type SocialAccountEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SocialAccount
}

"""
SocialAccountConnection implements collection accessor interface with pagination
"""
type SocialAccountConnection {
  """
  The total number of records
  """
  totalCount: Int!

  """
  The edges for each of the social account's lists
  """
  edges: [SocialAccountEdge!]

  """
  A list of the social accounts, as a convenience when edges are not needed.
  """
  list: [SocialAccount!]

  """
  Information for paginating this connection
  """
  pageInfo: PageInfo!
}

"""
SocialAccountPayload wrapper to access of SocialAccount oprtation results
"""
type SocialAccountPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationID: String!

  """
  Social Account ID operation result
  """
  socialAccountID: ID64!

  """
  Social Account object accessor
  """
  socialAccount: SocialAccount
}

###############################################################################
# Query
###############################################################################

input SocialAccountListFilter {
  ID: [ID64!]
  userID: [ID64!]
  provider: [String!]
  username: [String!]
  email: [String!]
}

input SocialAccountListOrder {
  ID: Ordering
  userID: Ordering
  provider: Ordering
  email: Ordering
  username: Ordering
  firstName: Ordering
  lastName: Ordering
}

extend type Query {
  """
  Get a social account by its unique identifier
  """
  socialAccount(
    """
    The unique identifier of the social account
    """
    id: ID64!
  ): SocialAccountPayload! @hasPermissions(permissions: ["account_social.view.*"])

  """
  Get the current user's social accounts
  """
  currentSocialAccounts(
    filter: SocialAccountListFilter = null,
    order: SocialAccountListOrder = null
  ): SocialAccountConnection! @hasPermissions(permissions: ["account_social.list.*"])

  """
  List all social accounts
  """
  listSocialAccounts(
    filter: SocialAccountListFilter = null,
    order: SocialAccountListOrder = null,
    page: Page = null
  ): SocialAccountConnection! @hasPermissions(permissions: ["account_social.list.*"])
}

extend type Mutation {
  """
  Disconnect a social account
  """
  disconnectSocialAccount(
    """
    The unique identifier of the social account to disconnect
    """
    id: ID64!
  ): SocialAccountPayload! @hasPermissions(permissions: ["account_social.disconnect.*"])
}
`, BuiltIn: false},
	{Name: "../../../../submodules/blaze-api/protocol/graphql/schemas/account_users.graphql", Input: `
"""
User represents a user object of the system
"""
type User {
  """
  The primary key of the user
  """
  ID:       ID64!

  """
  Unical user name
  """
  username: String!

  """
  Status of user active
  """
  status: ApproveStatus!

  """
  Message which defined during user approve/rejection process
  """
  statusMessage: String

  createdAt: Time!
  updatedAt: Time!
}

type UserEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: User
}

"""
UserConnection implements collection accessor interface with pagination.
"""
type UserConnection {
  """
  The total number of campaigns
  """
  totalCount: Int!

  """
  The edges for each of the users's lists
  """
  edges: [UserEdge!]

  """
  A list of the users, as a convenience when edges are not needed.
  """
  list: [User!]

  """
  Information for paginating this connection
  """
  pageInfo: PageInfo!
}

"""
UserPayload wrapper to access of user oprtation results
"""
type UserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationID: String!

  """
  User ID operation result
  """
  userID: ID64!

  """
  User object accessor
  """
  user: User
}

###############################################################################
# Query
###############################################################################

"""
UserListFilter implements filter for user list query
"""
input UserListFilter {
  ID: [ID64!]
  accountID: [ID64!]
  emails: [String!]
  roles: [ID64!]
}

"""
UserListOrder implements order for user list query
"""
input UserListOrder {
  ID:                 Ordering
  email:              Ordering
  username:           Ordering
  status:             Ordering
  registrationDate:   Ordering
  country:            Ordering
  manager:            Ordering
  createdAt:          Ordering
  updatedAt:          Ordering
}

###############################################################################
# Mutations
###############################################################################

input UserInput {
  username: String
  status: ApproveStatus
}

type Profile {
  ID:           ID64!
  user:         User!
  firstName:    String!
  lastName:     String!
  companyName:  String!
  about:        String!
  email:        String!
  messgangers: [ProfileMessanger!]

  createdAt: Time!
  updatedAt: Time!
}

enum MessangerType {
  SKYPE
  AIM
  ICQ
  WHATSAPP
  TELEGRAM
  VIBER
  PHONE
}

type ProfileMessanger {
  mtype: MessangerType!
  address: String!
}

###############################################################################
# Query
###############################################################################

extend type Query {
  """
  Current user from the session
  """
  currentUser: UserPayload! @hasPermissions(permissions: ["user.view.*"])

  """
  Get user object by ID or username
  """
  user(
    id: ID64! = 0,
    username: String! = ""
  ): UserPayload! @hasPermissions(permissions: ["user.view.*"])

  """
  List of the user objects which can be filtered and ordered by some fields
  """
  listUsers(
    filter: UserListFilter = null,
    order: UserListOrder = null,
    page: Page = null
  ): UserConnection @hasPermissions(permissions: ["user.list.*"])
}

extend type Mutation {
  """
  Create the new user
  """
  createUser(input: UserInput!): UserPayload! @hasPermissions(permissions: ["user.create.*"])

  """
  Update user info
  """
  updateUser(id: ID64!, input: UserInput!): UserPayload! @hasPermissions(permissions: ["user.update.*"])

  """
  Approve user and leave the comment
  """
  approveUser(id: ID64!, msg: String): UserPayload! @hasPermissions(permissions: ["user.approve.*"])

  """
  Reject user and leave the comment
  """
  rejectUser(id: ID64!, msg: String): UserPayload! @hasPermissions(permissions: ["user.reject.*"])

  """
  Reset password of the particular user in case if user forgot it
  """
  resetUserPassword(email: String!): StatusResponse! @hasPermissions(permissions: ["user.password.reset.*"])

  """
  Update password of the particular user
  """
  updateUserPassword(token: String!, email: String!, password: String!): StatusResponse! @hasPermissions(permissions: ["user.password.reset.*"])
}
`, BuiltIn: false},
	{Name: "../../../../submodules/blaze-api/protocol/graphql/schemas/auth_client.graphql", Input: `"""
AuthClient object represents an OAuth 2.0 client
"""
type AuthClient {
  """
  ClientID is the client ID which represents unique connection indentificator
  """
	ID: ID!

	# Owner and creator of the auth client
	accountID: ID64!
	userID: ID64!

  """
	Title of the AuthClient as himan readable name
  """
	title: String!

  """
	Secret is the client's secret. The secret will be included in the create request as cleartext, and then
	never again. The secret is stored using BCrypt so it is impossible to recover it. Tell your users
	that they need to write the secret down as it will not be made available again.
  """
	secret: String!

  """
	RedirectURIs is an array of allowed redirect urls for the client, for example http://mydomain/oauth/callback .
  """
	redirectURIs: [String!]

  """
	GrantTypes is an array of grant types the client is allowed to use.

	Pattern: client_credentials|authorization_code|implicit|refresh_token
  """
	grantTypes: [String!]

  """
	ResponseTypes is an array of the OAuth 2.0 response type strings that the client can
	use at the authorization endpoint.
	
	Pattern: id_token|code|token
  """
	responseTypes: [String!]

  """
	Scope is a string containing a space-separated list of scope values (as
	described in Section 3.3 of OAuth 2.0 [RFC6749]) that the client
	can use when requesting access tokens.
	
	Pattern: ([a-zA-Z0-9\.\*]+\s?)+
  """
	scope: String!

  """
	Audience is a whitelist defining the audiences this client is allowed to request tokens for. An audience limits
	the applicability of an OAuth 2.0 Access Token to, for example, certain API endpoints. The value is a list
	of URLs. URLs MUST NOT contain whitespaces.
  """
	audience: [String!]

  """
	SubjectType requested for responses to this Client. The subject_types_supported Discovery parameter contains a
	list of the supported subject_type values for this server. Valid types include ` + "`" + `pairwise` + "`" + ` and ` + "`" + `public` + "`" + `.
  """
	subjectType: String!

  """
	AllowedCORSOrigins are one or more URLs (scheme://host[:port]) which are allowed to make CORS requests
	to the /oauth/token endpoint. If this array is empty, the sever's CORS origin configuration (` + "`" + `CORS_ALLOWED_ORIGINS` + "`" + `)
	will be used instead. If this array is set, the allowed origins are appended to the server's CORS origin configuration.
	Be aware that environment variable ` + "`" + `CORS_ENABLED` + "`" + ` MUST be set to ` + "`" + `true` + "`" + ` for this to work.
  """
	allowedCORSOrigins: [String!]

  """
	Public flag tells that the client is public
  """
	public: Boolean!

  """
	ExpiresAt contins the time of expiration of the client
  """
	expiresAt: Time!

  createdAt: Time!
  updatedAt: Time!
	deletedAt: Time
}

type AuthClientEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: AuthClient
}

"""
AuthClientConnection implements collection accessor interface with pagination.
"""
type AuthClientConnection {
  """
  The total number of campaigns
  """
  totalCount: Int!

  """
  The edges for each of the AuthClient's lists
  """
  edges: [AuthClientEdge!]

  """
  A list of the AuthClient's, as a convenience when edges are not needed.
  """
  list: [AuthClient!]

  """
  Information for paginating this connection
  """
  pageInfo: PageInfo!
}

"""
AuthClientPayload wrapper to access of AuthClient oprtation results
"""
type AuthClientPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationID: String!

  """
  AuthClient ID operation result
  """
  authClientID: ID!

  """
  AuthClient object accessor
  """
  authClient: AuthClient
}

"""
SessionToken object represents an OAuth 2.0 / JWT session token
"""
type SessionToken {
  token: String!
  expiresAt: Time!
  isAdmin: Boolean!
  roles: [String!]
}

###############################################################################
# Query
###############################################################################

input AuthClientListFilter {
  ID: [String!]
  userID: [ID64!]
  accountID: [ID64!]
  public: Boolean
}

input AuthClientListOrder {
  ID:                 Ordering
  userID:             Ordering
  accountID:          Ordering
  title:              Ordering
  public:             Ordering
  lastUpdate:         Ordering
}

###############################################################################
# Mutations
###############################################################################

input AuthClientInput {
	accountID: ID64
	userID: ID64
	title: String
	secret: String
	redirectURIs: [String!]
	grantTypes: [String!]
	responseTypes: [String!]
	scope: String
	audience: [String!]
	subjectType: String!
	allowedCORSOrigins: [String!]
	public: Boolean
	expiresAt: Time
}

###############################################################################
# Query and Mutations
###############################################################################

extend type Query {
  """
  Get auth client object by ID
  """
  authClient(id: ID!): AuthClientPayload! @hasPermissions(permissions: ["auth_client.view.*"])

  """
  List of the auth client objects which can be filtered and ordered by some fields
  """
  listAuthClients(
    filter: AuthClientListFilter = null,
    order: AuthClientListOrder = null,
    page: Page = null
  ): AuthClientConnection @hasPermissions(permissions: ["auth_client.list.*"])
}

extend type Mutation {
  """
  Create the new auth client
  """
  createAuthClient(input: AuthClientInput!): AuthClientPayload! @hasPermissions(permissions: ["auth_client.create.*"])

  """
  Update auth client info
  """
  updateAuthClient(id: ID!, input: AuthClientInput!): AuthClientPayload! @hasPermissions(permissions: ["auth_client.update.*"])

  """
  Delete auth client
  """
  deleteAuthClient(id: ID!, msg: String = null): AuthClientPayload! @hasPermissions(permissions: ["auth_client.delete.*"])
}
`, BuiltIn: false},
	{Name: "../../../../submodules/blaze-api/protocol/graphql/schemas/constants.graphql", Input: `
"""
The list of statuses that shows is object approved or not
"""
enum ApproveStatus {
  """
  Pending status of the just inited objects
  """
  PENDING

  """
  Approved status of object could be obtained from the some authorized user who have permissions
  """
  APPROVED

  """
  Rejected status of object could be obtained from the some authorized user who have permissions
  """
  REJECTED
}

"""
The list of statuses that shows is particular object active or paused
"""
enum ActiveStatus {
  """
  All object by default have to be paused
  """
  PAUSED

  """
  Status of the active object
  """
  ACTIVE
}

"""
The list of statuses that shows is particular object is available
"""
enum AvailableStatus {
  """
  All object by default have to be undefined
  """
  UNDEFINED

  """
  Status of the available object
  """
  AVAILABLE

  """
  Status of the unavailable object
  """
  UNAVAILABLE
}

"""
Constants of the order of data
"""
enum Ordering {
  """
  Ascending ordering of data
  """
  ASC

  """
  Descending ordering of data
  """
  DESC
}

"""
Constants of the response status
"""
enum ResponseStatus {
  """
  Success status of the response
  """
  SUCCESS

  """
  Error status of the response
  """
  ERROR
}
`, BuiltIn: false},
	{Name: "../../../../submodules/blaze-api/protocol/graphql/schemas/directaccesstoken.graphql", Input: `type DirectAccessToken {
  ID: ID64!
  token: String!
  description: String!
  userID: ID64
  accountID: ID64!
  createdAt: Time!
  expiresAt: Time!
}

type DirectAccessTokenEdge {
  """
  Cursor for pagination
  """
  cursor: String!

  """
  Node for the edge
  """
  node: DirectAccessToken
}

type DirectAccessTokenConnection {
  """
  Total count of DirectAccessToken objects
  """
  totalCount: Int!

  """
  Edges for the DirectAccessTokenConnection
  """
  edges: [DirectAccessTokenEdge!]

  """
  List of DirectAccessToken objects
  """
  list: [DirectAccessToken!]

  """
  PageInfo for the DirectAccessTokenConnection
  """
  pageInfo: PageInfo!
}

type DirectAccessTokenPayload {
  """
  Unique identifier for the client performing the mutation
  """
  clientMutationID: String!

  """
  DirectAccessToken ID operation result
  """
  token: DirectAccessToken
}

###############################################################################
## Query
###############################################################################

input DirectAccessTokenListFilter {
  ID:           [ID64!]
  token:        [String!]
  userID:       [ID64!]
  accountID:    [ID64!]
  minExpiresAt: Time
  maxExpiresAt: Time
}

input DirectAccessTokenListOrder {
  ID:        Ordering
  token:     Ordering
  userID:    Ordering
  accountID: Ordering
  createdAt: Ordering
  expiresAt: Ordering
}

###############################################################################
# Query and Mutations
###############################################################################

extend type Query {
  """
  Get a DirectAccessToken by its ID
  """
  getDirectAccessToken(id: ID64!): DirectAccessTokenPayload @hasPermissions(permissions: ["directaccesstoken.view.*"])

  """
  List DirectAccessTokens
  """
  listDirectAccessTokens(
    """
    Filter to apply to the list
    """
    filter: DirectAccessTokenListFilter

    """
    Order to apply to the list
    """
    order: DirectAccessTokenListOrder

    """
    Pagination options
    """
    page: Page
  ): DirectAccessTokenConnection @hasPermissions(permissions: ["directaccesstoken.list.*"])
}

extend type Mutation {
  """
  Generate a new DirectAccessToken
  """
  generateDirectAccessToken(
    userID:       ID64    = null,
    description:  String! = "",
    expiresAt:    Time    = null
  ): DirectAccessTokenPayload @hasPermissions(permissions: ["directaccesstoken.create.*"])

  """
  Revoke a DirectAccessToken
  """
  revokeDirectAccessToken(
    filter: DirectAccessTokenListFilter!
  ): StatusResponse @hasPermissions(permissions: ["directaccesstoken.delete.*"])
}
`, BuiltIn: false},
	{Name: "../../../../submodules/blaze-api/protocol/graphql/schemas/directives.graphql", Input: `"Prevents access to a field if the user is not authenticated"
directive @auth on FIELD_DEFINITION | FIELD

"Prevents access to a field/method if the user doesnt have the matching permissions"
directive @hasPermissions(permissions: [String!]!) on FIELD_DEFINITION | FIELD

"Prevents access to a field/method if the user doesnt have the matching permissions"
directive @acl(permissions: [String!]!) on FIELD_DEFINITION | FIELD

"Prevents access to a field/method if the user doesnt have the matching permissions"
directive @skipNoPermissions(permissions: [String!]!) on FIELD_DEFINITION | FIELD
`, BuiltIn: false},
	{Name: "../../../../submodules/blaze-api/protocol/graphql/schemas/history.graphql", Input: `"""
HistoryAction is the model for history actions.
"""
type HistoryAction {
  ID:         UUID!
  RequestID:  String!

  name:       String!
  message:    String!

  userID:     ID64!
  accountID:  ID64!

  objectType: String!
  objectID:   ID64!
  objectIDs:  String!
  data:       NullableJSON!

  actionAt:   Time!
}

"""
Edge of action history object.
"""
type HistoryActionEdge {
  """
  The item at the end of the edge.
  """
  node: HistoryAction!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
A connection to a list of items.
"""
type HistoryActionConnection {
  """
  The total number of nodes in this connection, ignoring pagination.
  """
  totalCount: Int!

  """
  Edges for the HistoryActionConnection connection.
  """
  edges: [HistoryActionEdge!]

  """
  A list of nodes in the connection (without going through the ` + "`" + `edges` + "`" + ` field).
  """
  list: [HistoryAction!]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
HistoryActionPayload contains the information about a history action.
"""
type HistoryActionPayload {
  """
  The client mutation id
  """
  clientMutationId: String

  """
  The history action object ID
  """
  actionID: UUID!

  """
  The action object
  """
  action: HistoryAction!
}

###############################################################################
# Query
###############################################################################

input HistoryActionListFilter {
  ID: [UUID!]

  """
  The request ID of the action
  """
  RequestID: [String!]

  """
  The name of the action
  """
  name: [String!]

  """
  List of users who made the action
  """
  userID: [ID64!]

  """
  List of accounts that the user belongs to
  """
  accountID: [ID64!]

  """
  Type of the object that the action is performed on
  """
  objectType: [String!]

  """
  Object ID of the model that the action is performed on
  """
  objectID: [ID64!]

  """
  Object ID string version of the model that the action is performed on
  """
  objectIDs: [String!]
}

"""
HistoryActionListOptions contains the options for listing history actions ordering.
"""
input HistoryActionListOrder {
  ID: Ordering
  RequestID: Ordering
  name: Ordering
  userID: Ordering
  accountID: Ordering
  objectType: Ordering
  objectID: Ordering
  objectIDs: Ordering
  actionAt: Ordering
}

###############################################################################
# Query declarations
###############################################################################

extend type Query {
  """
  List of the history actions which can be filtered and ordered by some fields
  """
  listHistory(
    filter: HistoryActionListFilter = null,
    order: HistoryActionListOrder = null,
    page: Page = null
  ): HistoryActionConnection @hasPermissions(permissions: ["history_log.list.*"])
}
`, BuiltIn: false},
	{Name: "../../../../submodules/blaze-api/protocol/graphql/schemas/options.graphql", Input: `enum OptionType {
  UNDEFINED,
  USER,
  ACCOUNT,
  SYSTEM
}

"""
Option type definition represents a single option of the user or the system.
"""
type Option {
  type:       OptionType!
  targetID:   ID64!
  name:       String!
  value:      NullableJSON
}

"""
The edge type for Option.
"""
type OptionEdge {
  cursor: String!
  node: Option!
}

"""
The connection type for Option.
"""
type OptionConnection {
  """
  The total number of campaigns
  """
  totalCount: Int!

  """
  A list of edges.
  """
  edges: [OptionEdge!]!

  """
  A list of options.
  """
  list: [Option!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

type OptionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String!

  """
  Option name
  """
  name: String!

  """
  Option value
  """
  option: Option
}

###############################################################################
# Query
###############################################################################

input OptionListFilter {
  type:         [OptionType!]
  targetID:     [ID64!]
  name:         [String!]
  namePattern:  [String!]
}

input OptionListOrder {
  type:         Ordering
  targetID:     Ordering
  name:         Ordering
  value:        Ordering
}

###############################################################################
# Query declarations
###############################################################################

extend type Query {
  """
  Get the option value by name
  """
  option(name: String!, type: OptionType! = USER, targetID: ID64! = 0): OptionPayload! @hasPermissions(permissions: ["option.get.*"])

  """
  List of the option values which can be filtered and ordered by some fields
  """
  listOptions(
    filter: OptionListFilter = null,
    order: OptionListOrder = null,
    page: Page = null
  ): OptionConnection @hasPermissions(permissions: ["option.list.*"])
}

extend type Mutation {
  """
  Set the option value
  """
  setOption(name: String!, value: NullableJSON, type: OptionType! = USER, targetID: ID64! = 0): OptionPayload! @hasPermissions(permissions: ["option.set.*"])
}
`, BuiltIn: false},
	{Name: "../../../../submodules/blaze-api/protocol/graphql/schemas/pagination.graphql", Input: `
# @link https://developer.github.com/v4/object/pageinfo/

"""
Information for paginating
"""
type PageInfo {
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String!

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  Total number of pages available
  """
  total: Int!

  """
  Current page number
  """
  page: Int!

  """
  Number of pages
  """
  count: Int!
}

"""
Information for paginating
"""
input Page {
  """
  Start after the cursor ID
  """
  after: String

  """
  Start after some records
  """
  offset: Int

  """
  Page number to start at (0-based), defaults to 0 (0, 1, 2, etc.)
  """
  startPage: Int

  """
  Maximum number of items to return
  """
  size: Int
}
`, BuiltIn: false},
	{Name: "../../../../submodules/blaze-api/protocol/graphql/schemas/rbac.graphql", Input: `type RBACPermission {
  name:   String!
  object: String!
  access: String!
  fullname: String!
  description: String
}

"""
A role is a collection of permissions. A role can be a child of another role.
"""
type RBACRole {
	ID:       ID64!
	name:     String!
	title:    String!

  description: String

  """
  Context is a JSON object that defines the context of the role.
  The context is used to determine whether the role is applicable to the object.
  The context is a JSON object with the following structure:

	{"cover": "system", "object": "role"}

  where:
	"cover" - is a name of the cover area of the object type
	"object" - is a name of the object type <module>:<object-name>
  """
	context:  NullableJSON

	childRoles: [RBACRole!]
  permissions: [RBACPermission!]
  permissionPatterns: [String!]

  createdAt: Time!
  updatedAt: Time!
	deletedAt: Time
}

"""
RBACRoleEdge is a connection edge type for RBACRole.
"""
type RBACRoleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RBACRole
}

"""
RBACRoleConnection implements collection accessor interface with pagination.
"""
type RBACRoleConnection {
  """
  The total number of campaigns
  """
  totalCount: Int!

  """
  The edges for each of the RBACRoles's lists
  """
  edges: [RBACRoleEdge!]

  """
  A list of the RBACRoles, as a convenience when edges are not needed.
  """
  list: [RBACRole!]

  """
  Information for paginating this connection
  """
  pageInfo: PageInfo!
}

"""
RBACRolePayload wrapper to access of RBACRole oprtation results
"""
type RBACRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationID: String!

  """
  Role ID operation result
  """
  roleID: ID64!

  """
  Role object accessor
  """
  role: RBACRole
}

###############################################################################
# Query
###############################################################################

input RBACRoleListFilter {
  ID:   [ID64!]
  name: [String!]
}

input RBACRoleListOrder {
  ID:    Ordering
  name:  Ordering
  title: Ordering
}

###############################################################################
# Mutations
###############################################################################

input RBACRoleInput {
  name:        String
  title:       String
  context:     NullableJSON
  permissions: [String!]
}

###############################################################################
# Query declarations
###############################################################################

extend type Query {
  """
  Get RBAC role object by ID
  """
  role(id: ID64!): RBACRolePayload! @hasPermissions(permissions: ["role.view.*"])

  """
  Check if the user has access to the particular role or permission.
  Returns the area of the access or null if access is denied.
  """
  checkPermission(name: String!, key: String = null, targetID: String = null, idKey: String = null): String @hasPermissions(permissions: ["role.check"])

  """
  List of the RBAC role objects which can be filtered and ordered by some fields
  """
  listRoles(
    filter: RBACRoleListFilter = null,
    order: RBACRoleListOrder = null,
    page: Page = null
  ): RBACRoleConnection @hasPermissions(permissions: ["role.list.*"])

  """
  List of the RBAC permissions
  """
  listPermissions(patterns: [String!] = null): [RBACPermission!] @hasPermissions(permissions: ["permission.list"])

  """
  List of the RBAC permissions for the current user
  """
  listMyPermissions(patterns: [String!] = null): [RBACPermission!] @hasPermissions(permissions: ["permission.list"])
}

extend type Mutation {
  """
  Create the new RBAC role
  """
  createRole(input: RBACRoleInput!): RBACRolePayload! @hasPermissions(permissions: ["role.create.*"])

  """
  Update RBAC role info
  """
  updateRole(id: ID64!, input: RBACRoleInput!): RBACRolePayload! @hasPermissions(permissions: ["role.update.*"])

  """
  Delete RBAC role
  """
  deleteRole(id: ID64!, msg: String = null): RBACRolePayload! @hasPermissions(permissions: ["role.delete.*"])
}
`, BuiltIn: false},
	{Name: "../../../../submodules/blaze-api/protocol/graphql/schemas/schema.graphql", Input: `# https://github.com/prisma/graphql-import
# Pagination https://graphql.org/learn/pagination/#pagination-and-edges

scalar Time
scalar TimeDuration
scalar DateTime
scalar Map
scalar JSON
scalar NullableJSON
scalar UUID
scalar ID64

schema {
  query: Query
  mutation: Mutation
}

type Query {
  serviceVersion: String!
}

type Mutation {
  poke: String!
}
`, BuiltIn: false},
	{Name: "../../../../submodules/blaze-api/protocol/graphql/schemas/status.graphql", Input: `"""
Simple response type for the API
"""
type StatusResponse {
  """
  Unique identifier for the client performing the mutation
  """
  clientMutationID: String!

  """
  The status of the response
  """
  status: ResponseStatus!

  """
  The message of the response
  """
  message: String
}
`, BuiltIn: false},
	{Name: "../../../../protocol/graphql/schemas/adformat.graphql", Input: `type AdFormat {
  """
  Ad format ID
  """
  ID: ID64!

  """
  Codename of the ad format
  """
  codename: String!

  """
  Ad format type
  """
  type: String!

  """
  Ad format title
  """
  title: String!

  """
  Ad format description
  """
  description: String!

  """
  Active status of the ad format
  """
  active: ActiveStatus!

  """
  Width of the ad format
  """
  width: Int!

  """
  Height of the ad format
  """
  height: Int!

  """
  Minimum width of the ad format
  """
  minWidth: Int!

  """
  Minimum height of the ad format
  """
  minHeight: Int!

  """
  Configurations of the ad format which includes structure of assets and their properties
  """
  config: NullableJSON!

  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
}

type AdFormatEdge {
  """
  A cursor for use in pagination
  """
  cursor: String!

  """
  The AdFormat at the end of the edge
  """
  node: AdFormat!
}

type AdFormatConnection {
  """
  Total count of AdFormat objects
  """
  totalCount: Int!

  """
  Edges of AdFormat objects
  """
  edges: [AdFormatEdge!]!

  """
  List of AdFormat objects
  """
  list: [AdFormat!]!

  """
  Information to aid in pagination
  """
  pageInfo: PageInfo!
}

type AdFormatPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationID: String!

  """
  The AdFormat that was created by this mutation.
  """
  formatID: ID64!

  """
  The AdFormat object accessible by a client.
  """
  format: AdFormat!
}

###############################################################################
### Query input & output
###############################################################################

input AdFormatListFilter {
  ID:        [ID64!]
  codename:  [String!]
  type:      [String!]
  title:     [String!]
  active:    [ActiveStatus!]
}

input AdFormatListOrder {
  ID:        Ordering
  codename:  Ordering
  type:      Ordering
  title:     Ordering
  active:    Ordering
  createdAt: Ordering
  updatedAt: Ordering
}

"""
Input for querying ad formats
"""
input AdFormatInput {
  """
  Codename of the ad format
  """
  codename: String

  """
  Ad format type
  """
  type: String

  """
  Ad format title
  """
  title: String

  """
  Ad format description
  """
  description: String

  """
  Active status of the ad format
  """
  active: ActiveStatus

  """
  Width of the ad format
  """
  width: Int

  """
  Height of the ad format
  """
  height: Int

  """
  Minimum width of the ad format
  """
  minWidth: Int

  """
  Minimum height of the ad format
  """
  minHeight: Int

  """
  Configurations of the ad format which includes structure of assets and their properties
  """
  config: JSON
}

###############################################################################
# Query & Mutation
###############################################################################

extend type Query {
  format(
    """
    Ad format ID
    """
    ID: ID64! = 0,

    """
    Codename of the ad format
    """
    codename: String! = ""
  ): AdFormatPayload @acl(permissions: ["adv_format.view.*"])

  """
  List of ad formats
  """
  listFormats(
    filter: AdFormatListFilter = null,
    order: AdFormatListOrder = null,
    page: Page = null
  ): AdFormatConnection @acl(permissions: ["adv_format.list.*"])
}

extend type Mutation {
  """
  Create new ad format
  """
  createFormat(input: AdFormatInput!): AdFormatPayload @acl(permissions: ["adv_format.create.*"])

  """
  Update ad format
  """
  updateFormat(ID: ID64!, input: AdFormatInput!): AdFormatPayload @acl(permissions: ["adv_format.update.*"])

  """
  Delete ad format
  """
  deleteFormat(
    """
    Ad format ID
    """
    ID: ID64! = 0,

    """
    Codename of the ad format
    """
    codename: String! = "",

    """
    Message for deletion
    """
    msg: String = null
  ): AdFormatPayload @acl(permissions: ["adv_format.delete.*"])
}

`, BuiltIn: false},
	{Name: "../../../../protocol/graphql/schemas/application.graphql", Input: `enum ApplicationType {
  UNDEFINED
  SITE
  APP
  GAME
}

enum PlatformType {
  UNDEFINED
  WEB
  DESKTOP
  MOBILE
  SMART_PHONE
  TABLET
  SMART_TV
  GAME_STATION
  SMART_WATCH
  VR
  SMART_GLASSES
  SMART_BILLBOARD
}

"""
Application object represents a site or mobile/desktop application.
"""
type Application {
  ID: ID64!
  accountID: ID64!
  creatorID: ID64!

  title: String!
  description: String!
  
  """
  Unique application identifier, e.g., site domain or app bundle
  """
  URI: String!
  type: ApplicationType!
  platform: PlatformType!
  premium: Boolean!
  
  """
  Status of the application
  """
  status: ApproveStatus!

  """
  Active status of the application
  """
  active: ActiveStatus!

  """
  Private status of the application
  """
  private: PrivateStatus!

  """
  Categories associated with the application
  """
  categories: [Int!]

  """
  Revenue share percentage with the publisher
  """
  revenueShare: Float

  """
  Time marks
  """
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
}

"""
ApplicationEdge wrapper to access Application objects
"""
type ApplicationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The Application at the end of ApplicationEdge.
  """
  node: Application!
}

"""
ApplicationConnection wrapper to access Application objects
"""
type ApplicationConnection {
  """
  Total count of Application objects
  """
  totalCount: Int!

  """
  Edges of Application objects
  """
  edges: [ApplicationEdge!]!

  """
  List of Application objects
  """
  list: [Application!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
ApplicationPayload wrapper to access Application operation results
"""
type ApplicationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationID: String!

  """
  The Application that was created or updated by this mutation.
  """
  applicationID: ID64!

  """
  The Application object accessible by a client.
  """
  application: Application!
}

###############################################################################
# Query
###############################################################################

input ApplicationListFilter {
  ID: [ID64!]
  title: String
  URI: String
  accountID: ID64
  type: [ApplicationType!]
  platform: [PlatformType!]
  premium: Boolean
  status: ApproveStatus
  active: ActiveStatus
  private: PrivateStatus
}

input ApplicationListOrder {
  ID: Ordering
  title: Ordering
  URI: Ordering
  type: Ordering
  platform: Ordering
  premium: Ordering
  status: Ordering
  active: Ordering
  createdAt: Ordering
  updatedAt: Ordering
  deletedAt: Ordering
}

###############################################################################
# Mutations
###############################################################################

input ApplicationCreateInput {
  """
  Account ID associated with the application and can be defined if have permission
  """
  accountID:    ID64

  title:        String! @length(min: 3, max: 255, trim: true)
  description:  String  @notempty(trim: true, ornil: true)

  """
  Unique application identifier, e.g., site domain or app bundle
  """
  URI:          String! @length(min: 1, max: 255, trim: true)

  type:         ApplicationType
  platform:     PlatformType
  categories:   [Int!]
  revenueShare: Float
}


input ApplicationUpdateInput {
  """
  Account ID associated with the application and can be defined if have permission
  """
  accountID:    ID64

  title:        String @notempty(trim: true, ornil: true)
  description:  String @notempty(trim: true, ornil: true)

  """
  Unique application identifier, e.g., site domain or app bundle
  """
  URI:          String @regex(pattern: "^[a-zA-Z0-9.-]*$", trim: true, ornil: true)

  type:         ApplicationType
  platform:     PlatformType
  categories:   [Int!]
  revenueShare: Float
}

###############################################################################
# Query & Mutation
###############################################################################

extend type Query {
  """
  Get Application object by ID
  """
  application(ID: ID64!): ApplicationPayload! @acl(permissions: ["adv_application.view.*"])

  """
  List of the application objects which can be filtered and ordered by some fields
  """
  listApplications(
    filter: ApplicationListFilter = null,
    order: ApplicationListOrder = null,
    page: Page = null
  ): ApplicationConnection @acl(permissions: ["adv_application.list.*"])
}

extend type Mutation {
  """
  Create a new Application
  """
  createApplication(input: ApplicationCreateInput!): ApplicationPayload! @acl(permissions: ["adv_application.create.*"])

  """
  Update Application information
  """
  updateApplication(ID: ID64!, input: ApplicationUpdateInput!): ApplicationPayload! @acl(permissions: ["adv_application.update.*"])

  """
  Delete Application
  """
  deleteApplication(ID: ID64!, msg: String = null): ApplicationPayload @acl(permissions: ["adv_application.delete.*"])

  """
  Run the Application
  """
  runApplication(ID: ID64!, msg: String = null): StatusResponse! @acl(permissions: ["adv_application.update.*"])

  """
  Pause the Application
  """
  pauseApplication(ID: ID64!, msg: String = null): StatusResponse! @acl(permissions: ["adv_application.update.*"])

  """
  Approve the Application to be active
  """
  approveApplication(ID: ID64!, msg: String = null): StatusResponse! @acl(permissions: ["adv_application.approve.*"])

  """
  Reject the Application
  """
  rejectApplication(ID: ID64!, msg: String = null): StatusResponse! @acl(permissions: ["adv_application.reject.*"])
}
`, BuiltIn: false},
	{Name: "../../../../protocol/graphql/schemas/browser.graphql", Input: `"""
Browser model schema
"""
type Browser {
  """
  Browser ID
  """
  ID: ID64!

  """
  Name of the browser
  """
  name: String!

  """
  Description of the browser
  """
  description: String!

  """
  Version of the browser
  """
  version: String!

  """
  Year of release of the browser
  """
  yearRelease: Int!

  """
  Year of end of support of the browser
  """
  yearEndSupport: Int!

  """
  Active status of the browser
  """
  active: ActiveStatus!

  # Match expressions
  matchNameExp: String!
  matchUserAgentExp: String!
  matchVersionMinExp: String!
  matchVersionMaxExp: String!

  """
  Parent ID of the browser group
  """
  parentID: ID64!

  """
  Parent object of the browser
  """
  parent: Browser

  """
  List of child browser
  """
  versions: [Browser!]

  """
  Creation time of the browser
  """
  createdAt: Time!

  """
  Last update time of the browser
  """
  updatedAt: Time!

  """
  Deletion time of the browser
  """
  deletedAt: Time
}

type BrowserEdge {
  """
  A cursor for use in pagination
  """
  cursor: String!

  """
  The Browser at the end of the edge
  """
  node: Browser!
}

type BrowserConnection {
  """
  Total count of Browser objects
  """
  totalCount: Int!

  """
  Edges of Browser objects
  """
  edges: [BrowserEdge!]!

  """
  List of Browser objects
  """
  list: [Browser!]!

  """
  Information to aid in pagination
  """
  pageInfo: PageInfo!
}

type BrowserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationID: String!

  """
  The Browser that was created by this mutation.
  """
  browserID: ID64!

  """
  The Browser object accessible by a client.
  """
  browser: Browser!
}

###############################################################################
### Query input & output
###############################################################################

input BrowserListFilter {
  ID:           [ID64!]
  parentID:     [ID64!]
  name:         [String!]
  active:       [ActiveStatus!]
}

input BrowserListOrder {
  ID:           Ordering
  name:         Ordering
  active:       Ordering
  createdAt:    Ordering
  updatedAt:    Ordering
  yearRelease:  Ordering
}

"""
Input for querying create browsers
"""
input BrowserCreateInput {
  """
  Parent ID of the OS group
  """
  parentID: ID64

  """
  Name of the browser
  """
  name: String! @length(min: 1, max: 255, trim: true)

  """
  Version of the browser
  """
  version: String @regex(pattern: "^[0-9]+\\.[0-9]+(\\.[0-9]+)?$", trim: true, ornil: true)

  """
  Description of the browser
  """
  description: String @notempty(trim: true, ornil: true)

  """
  Active status of the browser
  """
  active: ActiveStatus

  """
  Year of release of the browser
  """
  yearRelease: Int

  """
  Year of end of support of the browser
  """
  yearEndSupport: Int

  # Match expressions
  matchNameExp:       String @notempty(trim: true, ornil: true)
  matchUserAgentExp:  String @notempty(trim: true, ornil: true)
  matchVersionMinExp: String @notempty(trim: true, ornil: true)
  matchVersionMaxExp: String @notempty(trim: true, ornil: true)
}

"""
Input for querying update browsers
"""
input BrowserUpdateInput {
  """
  Name of the browser
  """
  name: String @length(min: 1, max: 255, trim: true, ornil: true)

  """
  Version of the browser
  """
  version: String @regex(pattern: "^[0-9]+\\.[0-9]+(\\.[0-9]+)?$", trim: true, ornil: true)

  """
  Description of the browser
  """
  description: String @notempty(trim: true, ornil: true)

  """
  Active status of the browser
  """
  active: ActiveStatus

  """
  Year of release of the browser
  """
  yearRelease: Int

  """
  Year of end of support of the browser
  """
  yearEndSupport: Int

  # Match expressions
  matchNameExp:       String @notempty(trim: true, ornil: true)
  matchUserAgentExp:  String @notempty(trim: true, ornil: true)
  matchVersionMinExp: String @notempty(trim: true, ornil: true)
  matchVersionMaxExp: String @notempty(trim: true, ornil: true)
}

###############################################################################
# Query & Mutation
###############################################################################

extend type Query {
  browser(ID: ID64!): BrowserPayload @acl(permissions: ["type_browser.view.*"])

  """
  List of browsers
  """
  listBrowsers(
    filter: BrowserListFilter = null,
    order: [BrowserListOrder!] = null,
    page: Page = null
  ): BrowserConnection @acl(permissions: ["type_browser.list.*"])
}

extend type Mutation {
  """
  Create new browser
  """
  createBrowser(input: BrowserCreateInput!): BrowserPayload @acl(permissions: ["type_browser.create.*"])

  """
  Update browser
  """
  updateBrowser(ID: ID64!, input: BrowserUpdateInput!): BrowserPayload @acl(permissions: ["type_browser.update.*"])

  """
  Delete browser
  """
  deleteBrowser(
    """
    Browser ID
    """
    ID: ID64!,

    """
    Message for deletion
    """
    msg: String = null
  ): BrowserPayload @acl(permissions: ["type_browser.delete.*"])
}
`, BuiltIn: false},
	{Name: "../../../../protocol/graphql/schemas/category.graphql", Input: `"""
Advertising category schema
"""
type Category {
  """
  Category ID
  """
  ID: ID64!

  """
  Name of the category
  """
  name: String!

  """
  Description of the category
  """
  description: String!

  """
  IAB category code of OpenRTB
  """
  IABCode: String!

  """
  Parent category ID
  """
  parentID: ID64

  """
  Parent category object
  """
  parent: Category

  """
  Child categories
  """
  childrens: [Category!]!

  """
  Position of the category
  """
  position: Int!

  """
  Active status of the category
  """
  active: ActiveStatus!

  """
  Creation time of the category
  """
  createdAt: Time!

  """
  Last update time of the category
  """
  updatedAt: Time!

  """
  Deletion time of the category
  """
  deletedAt: Time
}

type CategoryEdge {
  """
  A cursor for use in pagination
  """
  cursor: String!

  """
  The Category at the end of the edge
  """
  node: Category!
}

type CategoryConnection {
  """
  Total count of Category objects
  """
  totalCount: Int!

  """
  Edges of Category objects
  """
  edges: [CategoryEdge!]!

  """
  List of Category objects
  """
  list: [Category!]!

  """
  Information to aid in pagination
  """
  pageInfo: PageInfo!
}

type CategoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationID: String!

  """
  The Category that was created by this mutation.
  """
  categoryID: ID64!

  """
  The Category object accessible by a client.
  """
  category: Category!
}

###############################################################################
### Query input & output
###############################################################################

input CategoryListFilter {
  ID:        [ID64!]
  name:      [String!]
  IABCode:   [String!]
  parentID:  [ID64!]
  active:    [ActiveStatus!]
}

input CategoryListOrder {
  ID:        Ordering
  name:      Ordering
  IABCode:   Ordering
  parentID:  Ordering
  position:  Ordering
  active:    Ordering
  createdAt: Ordering
  updatedAt: Ordering
}

"""
Input for querying categories
"""
input CategoryInput {
  """
  Name of the category
  """
  name: String

  """
  Description of the category
  """
  description: String

  """
  IAB category code of OpenRTB
  """
  IABCode: String

  """
  Parent category ID
  """
  parentID: ID64

  """
  Position of the category
  """
  position: Int

  """
  Active status of the category
  """
  active: ActiveStatus
}

###############################################################################
# Query & Mutation
###############################################################################

extend type Query {
  category(ID: ID64!): CategoryPayload @acl(permissions: ["adv_category.view.*"])

  """
  List of categories
  """
  listCategories(
    filter: CategoryListFilter = null,
    order: CategoryListOrder = null,
    page: Page = null
  ): CategoryConnection @acl(permissions: ["adv_category.list.*"])
}

extend type Mutation {
  """
  Create new category
  """
  createCategory(input: CategoryInput!): CategoryPayload @acl(permissions: ["adv_category.create.*"])

  """
  Update category
  """
  updateCategory(ID: ID64!, input: CategoryInput!): CategoryPayload @acl(permissions: ["adv_category.update.*"])

  """
  Delete category
  """
  deleteCategory(
    """
    Category ID
    """
    ID: ID64!,

    """
    Message for deletion
    """
    msg: String = null
  ): CategoryPayload @acl(permissions: ["adv_category.delete.*"])
}
`, BuiltIn: false},
	{Name: "../../../../protocol/graphql/schemas/constants.graphql", Input: `enum RTBRequestFormatType {
  UNDEFINED
  JSON
  XML
}

enum AuctionType {
  UNDEFINED
  FIRST_PRICE
  SECOND_PRICE
}

enum AnyOnlyExclude {
  ANY
  ONLY
  EXCLUDE
}

enum AnyIPv4IPv6 {
  ANY
  IPv4
  IPv6
}

enum StatisticCondition {
  EQ          # Equal (==)
  NOT_EQ      # Not equal (!=)
  GT          # Greater than (>)
  GT_EQ       # Greater than or equal (>=)
  LT          # Less than (<)
  LT_EQ       # Less than or equal (<=)
  IN          # In list
  NOT_IN      # Not in list
  BETWEEN     # Between
  NOT_BETWEEN # Not between
  LIKE        # Like
  NOT_LIKE    # Not like
  IS_NULL     # Is null
  IS_NOT_NULL # Is not null
}

enum PrivateStatus {
  PUBLIC
  PRIVATE
}

enum PricingModel {
  UNDEFINED
  CPM
  CPC
  CPA
}
`, BuiltIn: false},
	{Name: "../../../../protocol/graphql/schemas/country.graphql", Input: `type TimeZone {
  name: String!
  lon: Float!
}

type Coordinates {
  lat: Float!
  lon: Float!
}

type Continent {
  """
  Continent ID
  """
  ID: ID64!

  """
  Continent code2
  """
  code2: String!

  """
  Continent name
  """
  name: String!

  """
  List of countries
  """
  countries: [Country!]
}

type Country {
  """
  Country ID
  """
  ID: ID64!

  """
  Country code2
  """
  code2: String!

  """
  Country code3
  """
  code3: String!

  """
  Country name
  """
  name: String!

  """
  Country native name
  """
  nativeName: String!

  """
  Continent code
  """
  continentCode: String!

  """
  Continent object
  """
  continent: Continent!

  """
  Name of the capital city
  """
  capital: String!

  """
  Languages spoken in the country
  """
  languages: [String!]

  """
  Phone codes for the country
  """
  phoneCodes: [String!]

  """
  Time zones for the country
  """
  timeZones: [TimeZone!]

  """
  Coordinates of the country
  """
  coordinates: Coordinates!

  """
  List of currencies
  """
  currency: [String!]
}

###############################################################################
# Query
###############################################################################

extend type Query {
  """
  List of continents
  """
  continents: [Continent!]

  """
  List of countries
  """
  countries: [Country!]
}
`, BuiltIn: false},
	{Name: "../../../../protocol/graphql/schemas/device.maker.graphql", Input: `
"""
Device maker schema
"""
type DeviceMaker {
  """
  Device maker ID
  """
  ID: ID64!

  """
  Codename of the device maker, equivalent to the device maker ID
  Example: "apple", "samsung", "xiaomi", etc.
  """
  codename: String!

  """
  Name of the device maker
  """
  name: String!

  """
  Description of the device type
  """
  description: String!

  """
  Expression to match the device maker
  """
  matchExp: String!

  """
  List of device models
  """
  models: [DeviceModel!]

  """
  Active status of the device maker
  """
  active: ActiveStatus!

  """
  Creation time of the device maker
  """
  createdAt: Time!

  """
  Last update time of the device maker
  """
  updatedAt: Time!

  """
  Deletion time of the device maker
  """
  deletedAt: Time
}

type DeviceMakerEdge {
  """
  A cursor for use in pagination
  """
  cursor: String!

  """
  The DeviceMaker at the end of the edge
  """
  node: DeviceMaker!
}

type DeviceMakerConnection {
  """
  Total count of DeviceMaker objects
  """
  totalCount: Int!

  """
  Edges of DeviceMaker objects
  """
  edges: [DeviceMakerEdge!]!

  """
  List of DeviceMaker objects
  """
  list: [DeviceMaker!]!

  """
  Information to aid in pagination
  """
  pageInfo: PageInfo!
}

type DeviceMakerPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationID: String!

  """
  The DeviceMaker that was created by this mutation.
  """
  makerID: ID64!

  """
  The DeviceMaker object accessible by a client.
  """
  maker: DeviceMaker!
}

###############################################################################
### Query input & output
###############################################################################

input DeviceMakerListFilter {
  ID:         [ID64!]
  codename:   [String!]
  name:       [String!]
  active:     [ActiveStatus!]
}

input DeviceMakerListOrder {
  ID:         Ordering
  codename:   Ordering
  name:       Ordering
  active:     Ordering
  createdAt:  Ordering
  updatedAt:  Ordering
}

"""
Input for querying device maker create
"""
input DeviceMakerCreateInput {
  """
  Codename of the device maker
  """
  codename: String! @length(min: 1, max: 64, trim: true)

  """
  Name of the device maker
  """
  name: String! @length(min: 1, max: 128, trim: true)

  """
  Description of the device maker
  """
  description: String @length(min: 1, max: 1024, trim: true, ornil: true)

  """
  Expression to match the device maker
  """
  matchExp: String @length(min: 1, max: 1024, trim: true, ornil: true)

  """
  Active status of the device maker
  """
  active: ActiveStatus!
}

"""
Input for querying device maker update
"""
input DeviceMakerUpdateInput {
  """
  Codename of the device maker
  """
  codename: String @length(min: 1, max: 64, trim: true, ornil: true)

  """
  Name of the device maker
  """
  name: String @length(min: 1, max: 128, trim: true, ornil: true)

  """
  Description of the device maker
  """
  description: String @length(min: 1, max: 1024, trim: true, ornil: true)

  """
  Expression to match the device maker
  """
  matchExp: String @length(min: 1, max: 1024, trim: true, ornil: true)

  """
  Active status of the device maker
  """
  active: ActiveStatus
}

###############################################################################
# Query & Mutation
###############################################################################

extend type Query {
  """
  Get device maker by ID
  """
  deviceMaker(ID: ID64! = 0, codename: String! = ""): DeviceMakerPayload @acl(permissions: ["device_maker.view.*"])

  """
  List of device makers
  """
  listDeviceMakers(
    filter: DeviceMakerListFilter = null,
    order: [DeviceMakerListOrder!] = null,
    page: Page = null
  ): DeviceMakerConnection @acl(permissions: ["device_maker.list.*"])
}

extend type Mutation {
  """
  Create new device maker
  """
  createDeviceMaker(input: DeviceMakerCreateInput!): DeviceMakerPayload @acl(permissions: ["device_maker.create.*"])

  """
  Update device maker
  """
  updateDeviceMaker(ID: ID64!, input: DeviceMakerUpdateInput!): DeviceMakerPayload @acl(permissions: ["device_maker.update.*"])

  """
  Delete device maker
  """
  deleteDeviceMaker(
    """
    Device maker ID
    """
    ID: ID64!,

    """
    Message for deletion
    """
    msg: String = null
  ): DeviceMakerPayload @acl(permissions: ["device_maker.delete.*"])
}
`, BuiltIn: false},
	{Name: "../../../../protocol/graphql/schemas/device.model.graphql", Input: `"""
Device model schema
"""
type DeviceModel {
  """
  Device model ID
  """
  ID: ID64!

  """
  Device model codename
  """
  codename: String!

  """
  Name of the device model
  """
  name: String!

  """
  Description of the device type
  """
  description: String!

  """
  Version of the device model
  """
  version: String!

  """
  Year of release of the device model
  """
  yearRelease: Int!

  """
  Device parent ID
  """
  parentID: ID64

  """
  Device parent object if exists
  """
  parent: DeviceModel

  """
  Expression to match the device model
  """
  matchExp: String!

  """
  Device type codename
  """
  typeCodename: String!

  """
  Device type object
  """
  type: DeviceType

  """
  Device maker codename
  """
  makerCodename: String!

  """
  Device maker object
  """
  maker: DeviceMaker

  """
  List of device model versions
  """
  versions(
    filter: DeviceModelListFilter = null,
    order: [DeviceModelListOrder!] = null
  ): [DeviceModel!]

  """
  Active status of the device model
  """
  active: ActiveStatus!

  """
  Creation time of the device model
  """
  createdAt: Time!

  """
  Last update time of the device model
  """
  updatedAt: Time!

  """
  Deletion time of the device model
  """
  deletedAt: Time
}

type DeviceModelEdge {
  """
  A cursor for use in pagination
  """
  cursor: String!

  """
  The DeviceModel at the end of the edge
  """
  node: DeviceModel!
}

type DeviceModelConnection {
  """
  Total count of DeviceModel objects
  """
  totalCount: Int!

  """
  Edges of DeviceModel objects
  """
  edges: [DeviceModelEdge!]!

  """
  List of DeviceModel objects
  """
  list: [DeviceModel!]!

  """
  Information to aid in pagination
  """
  pageInfo: PageInfo!
}

type DeviceModelPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationID: String!

  """
  The DeviceModel that was created by this mutation.
  """
  modelID: ID64!

  """
  The DeviceModel object accessible by a client.
  """
  model: DeviceModel!
}

###############################################################################
# Input

input DeviceModelListOrder {
  ID:             Ordering
  codename:       Ordering
  name:           Ordering
  typeCodename:   Ordering
  makerCodename:  Ordering
  active:         Ordering
  createdAt:      Ordering
  updatedAt:      Ordering
  yearRelease:    Ordering
}

"""
Input model list filter
"""
input DeviceModelListFilter {
  ID:             [ID64!]
  parentID:       [ID64!]
  codename:       [String!]
  name:           [String!]
  typeCodename:   [String!]
  makerCodename:  [String!]
  active:         [ActiveStatus!]
}

"""
Input for querying create device models
"""
input DeviceModelCreateInput {
  """
  Name of the device model
  """
  name: String! @length(min: 1, max: 128, trim: true)

  """
  Code name of the device model
  """
  codename: String! @length(min: 1, max: 64, trim: true)

  """
  Description of the device model
  """
  description: String @length(min: 1, max: 1024, trim: true, ornil: true)

  """
  Version of the device model
  """
  version: String! @regex(pattern: "^(\\d+(\\.\\d+){1,2})?$", trim: true)

  """
  Device parent ID
  """
  parentID: ID64

  """
  Expression to match the device model
  """
  matchExp: String @length(min: 1, max: 128, trim: true, ornil: true)

  """
  Device type codename
  """
  typeCodename: String! @length(min: 1, max: 64, trim: true)

  """
  Device maker codename
  """
  makerCodename: String! @length(min: 1, max: 64, trim: true)

  """
  Active status of the device model
  """
  active: ActiveStatus!
}

"""
Input for querying update device models
"""
input DeviceModelUpdateInput {
  """
  Name of the device model
  """
  name: String @length(min: 1, max: 128, trim: true, ornil: true)

  """
  Code name of the device model
  """
  codename: String @length(min: 1, max: 64, trim: true, ornil: true)

  """
  Description of the device model
  """
  description: String @length(min: 1, max: 1024, trim: true, ornil: true)

  """
  Version of the device model
  """
  version: String @regex(pattern: "^(\\d+(\\.\\d+){1,2})?$", trim: true, ornil: true)

  """
  Device parent ID
  """
  parentID: ID64

  """
  Expression to match the device model
  """
  matchExp: String @length(min: 1, max: 128, trim: true, ornil: true)

  """
  Device type codename
  """
  typeCodename: String @length(min: 1, max: 64, trim: true, ornil: true)

  """
  Device maker codename
  """
  makerCodename: String @length(min: 1, max: 64, trim: true, ornil: true)

  """
  Active status of the device model
  """
  active: ActiveStatus
}

###############################################################################
# Query & Mutation
###############################################################################

extend type Query {
  """
  Get device model by ID
  """
  deviceModel(ID: ID64! = 0, codename: String! = ""): DeviceModelPayload @acl(permissions: ["device_model.view.*"])

  """
  List of device models
  """
  listDeviceModels(
    filter: DeviceModelListFilter = null,
    order: [DeviceModelListOrder!] = null,
    page: Page = null
  ): DeviceModelConnection @acl(permissions: ["device_model.list.*"])
}

extend type Mutation {
  """
  Create new device model
  """
  createDeviceModel(input: DeviceModelCreateInput!): DeviceModelPayload @acl(permissions: ["device_model.create.*"])

  """
  Update device model
  """
  updateDeviceModel(
    ID: ID64!,
    input: DeviceModelUpdateInput!
  ): DeviceModelPayload @acl(permissions: ["device_model.update.*"])

  """
  Delete device model
  """
  deleteDeviceModel(
    """
    Device model ID
    """
    ID: ID64!,

    """
    Message for deletion
    """
    msg: String = null
  ): DeviceModelPayload @acl(permissions: ["device_model.delete.*"])
}`, BuiltIn: false},
	{Name: "../../../../protocol/graphql/schemas/device.type.graphql", Input: `"""
Device type schema
"""
type DeviceType {
  """
  Device type ID
  """
  ID: ID64!

  """
  Name of the device type
  """
  name: String!

  """
  Codename of the device type, equivalent to the device type ID
  Example: "smartphone", "tablet", "smartwatch", etc.
  """
  codename: String!

  """
  Description of the device type
  """
  description: String!

  """
  Active status of the device type
  """
  active: ActiveStatus!
}


###############################################################################
# Query & Mutation
###############################################################################

extend type Query {
  """
  List of device types
  """
  listDeviceTypes: [DeviceType!] @acl(permissions: ["device_type.list.*"])
}
`, BuiltIn: false},
	{Name: "../../../../protocol/graphql/schemas/directives.graphql", Input: `# Validation directives
directive @length(min: Int!, max: Int! = 0, trim: Boolean! = false, ornil: Boolean! = false) on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | SCALAR
directive @notempty(trim: Boolean! = false, ornil: Boolean! = false) on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | SCALAR
directive @regex(pattern: String!, trim: Boolean! = true, ornil: Boolean! = false) on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | SCALAR
`, BuiltIn: false},
	{Name: "../../../../protocol/graphql/schemas/os.graphql", Input: `"""
OS model schema
"""
type OS {
  """
  OS ID
  """
  ID: ID64!

  """
  Name of the OS
  """
  name: String!

  """
  Description of the OS
  """
  description: String!

  """
  Version of the OS
  """
  version: String!

  """
  Year of release of the OS
  """
  yearRelease: Int!

  """
  Year of end of support of the OS
  """
  yearEndSupport: Int!

  """
  Active status of the OS
  """
  active: ActiveStatus!

  # Match expressions
  matchNameExp: String!
  matchUserAgentExp: String!
  matchVersionMinExp: String!
  matchVersionMaxExp: String!

  """
  Parent ID of the OS group
  """
  parentID: ID64!

  """
  Parent object of the OS
  """
  parent: OS

  """
  List of child OS
  """
  versions: [OS!]

  """
  Creation time of the OS
  """
  createdAt: Time!

  """
  Last update time of the OS
  """
  updatedAt: Time!

  """
  Deletion time of the OS
  """
  deletedAt: Time
}

type OSEdge {
  """
  A cursor for use in pagination
  """
  cursor: String!

  """
  The OS at the end of the edge
  """
  node: OS!
}

type OSConnection {
  """
  Total count of OS objects
  """
  totalCount: Int!

  """
  Edges of OS objects
  """
  edges: [OSEdge!]

  """
  List of OS objects
  """
  list: [OS!]

  """
  Information to aid in pagination
  """
  pageInfo: PageInfo!
}

type OSPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationID: String!

  """
  The OS that was created by this mutation.
  """
  OSID: ID64!

  """
  The OS object accessible by a client.
  """
  OS: OS!
}

###############################################################################
### Query input & output
###############################################################################

input OSListFilter {
  ID:           [ID64!]
  parentID:     [ID64!]
  name:         [String!]
  active:       ActiveStatus
}

input OSListOrder {
  ID:           Ordering
  name:         Ordering
  active:       Ordering
  createdAt:    Ordering
  updatedAt:    Ordering
  yearRelease:  Ordering
}

"""
Input for querying OS
"""
input OSCreateInput {
  """
  Parent ID of the OS group
  """
  parentID: ID64

  """
  Name of the OS
  """
  name: String! @length(min: 1, max: 255, trim: true)

  """
  Version of the OS
  """
  version: String @regex(pattern: "^[0-9]+\\.[0-9]+(\\.[0-9]+)?$", trim: true, ornil: true)

  """
  Description of the OS
  """
  description: String @notempty(trim: true, ornil: true)

  """
  Active status of the OS
  """
  active: ActiveStatus

  """
  Year of release of the OS
  """
  yearRelease: Int

  """
  Year of end of support of the OS
  """
  yearEndSupport: Int

  # Match expressions
  matchNameExp:       String @notempty(trim: true, ornil: true)
  matchUserAgentExp:  String @notempty(trim: true, ornil: true)
  matchVersionMinExp: String @notempty(trim: true, ornil: true)
  matchVersionMaxExp: String @notempty(trim: true, ornil: true)
}

input OSUpdateInput {
  """
  Name of the OS
  """
  name: String @length(min: 1, max: 255, trim: true, ornil: true)

  """
  Version of the OS
  """
  version: String @regex(pattern: "^[0-9]+\\.[0-9]+(\\.[0-9]+)?$", trim: true, ornil: true)

  """
  Description of the OS
  """
  description: String @notempty(trim: true, ornil: true)

  """
  Active status of the OS
  """
  active: ActiveStatus

  """
  Year of release of the OS
  """
  yearRelease: Int

  """
  Year of end of support of the OS
  """
  yearEndSupport: Int

  # Match expressions
  matchNameExp:       String @notempty(trim: true, ornil: true)
  matchUserAgentExp:  String @notempty(trim: true, ornil: true)
  matchVersionMinExp: String @notempty(trim: true, ornil: true)
  matchVersionMaxExp: String @notempty(trim: true, ornil: true)
}

###############################################################################
# Query & Mutation
###############################################################################

extend type Query {
  OS(ID: ID64!): OSPayload @acl(permissions: ["type_os.view.*"])

  """
  List of OS
  """
  listOS(
    filter: OSListFilter = null,
    order: [OSListOrder!]! = null,
    page: Page = null
  ): OSConnection @acl(permissions: ["type_os.list.*"])
}

extend type Mutation {
  """
  Create new OS
  """
  createOS(input: OSCreateInput!): OSPayload @acl(permissions: ["type_os.create.*"])

  """
  Update OS
  """
  updateOS(ID: ID64!, input: OSUpdateInput!): OSPayload @acl(permissions: ["type_os.update.*"])

  """
  Delete OS
  """
  deleteOS(
    """
    OS ID
    """
    ID: ID64!,

    """
    Message for deletion
    """
    msg: String = null
  ): OSPayload @acl(permissions: ["type_os.delete.*"])
}
`, BuiltIn: false},
	{Name: "../../../../protocol/graphql/schemas/rtb_source.graphql", Input: `"""
RTBSource object represents a source of RTB advertising
"""
type RTBSource {
  ID: ID64!
  accountID: ID64!

  title: String!
  description: String!

  """
  Status of source approval
  """
  status: ApproveStatus!
  
  """
  Active status of source
  """
  active: ActiveStatus!

  """
  Flags of source
  """
  flags: NullableJSON!

  # Protocol configs
  protocol: String!
  minimalWeight: Float!
  
  """
  After approval URL can't be changed
  """
  URL: String!
  method: String!
  requestType: RTBRequestFormatType!
  headers: NullableJSON!
  RPS: Int!
  timeout: Int!

  # Money configs
  accuracy: Float!
  priceCorrectionReduce: Float!
  auctionType: AuctionType!

  # Price limits
  minBid: Float!
  maxBid: Float!

  # Targeting filters
  formats:         [String!]
  deviceTypes:     [Int64!]
  devices:         [Int64!]
  OS:              [Int64!]
  browsers:        [Int64!]
  carriers:        [Int64!]
  categories:      [Int64!]
  countries:       [String!]
  languages:       [String!]
  applications:    [Int64!]
  domains:         [String!]
  zones:           [Int64!]
  secure:          AnyOnlyExclude!
  adBlock:         AnyOnlyExclude!
  privateBrowsing: AnyOnlyExclude!
  IP:              AnyIPv4IPv6!

  config: NullableJSON!

  createdAt: Time!
  updatedAt: Time!
	deletedAt: Time
}

"""
RTBSourceEdge wrapper to access of RTBSource objects
"""
type RTBSourceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The RTBSource at the end of RTBSourceEdge.
  """
  node: RTBSource!
}

"""
RTBSourceConnection wrapper to access of RTBSource objects
"""
type RTBSourceConnection {
  """
  Total count of RTBSource objects
  """
  totalCount: Int!

  """
  Edges of RTBSource objects
  """
  edges: [RTBSourceEdge!]!

  """
  List of RTBSource objects
  """
  list: [RTBSource!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
RTBSourcePayload wrapper to access of RTBSource oprtation results
"""
type RTBSourcePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationID: String!

  """
  The RTBSource that was created by this mutation.
  """
  sourceID: ID64!

  """
  The RTBSource object accessible by a client.
  """
  source: RTBSource!
}

###############################################################################
# Query
###############################################################################

input RTBSourceListFilter {
  ID: [ID64!]
  accountID: ID64
}

input RTBSourceListOrder {
  ID:        Ordering
  accountID: Ordering
  title:     Ordering
  createdAt: Ordering
  updatedAt: Ordering
  deletedAt: Ordering
}

###############################################################################
# Mutations
###############################################################################

input RTBSourceInput {
  accountID: ID64

  title: String
  description: String

  """
  Flags of source
  """
  flags: NullableJSON

  # Protocol configs
  protocol: String
  minimalWeight: Float

  """
  After approval URL can't be changed
  """
  URL: String
  method: String
  requestType: RTBRequestFormatType
  headers: NullableJSON
  RPS: Int
  timeout: Int

  # Money configs
  accuracy: Float
  priceCorrectionReduce: Float
  auctionType: AuctionType

  # Price limits
  minBid: Float
  maxBid: Float

  # Targeting filters
  formats:         [String!]
  deviceTypes:     [Int64!]
  devices:         [Int64!]
  OS:              [Int64!]
  browsers:        [Int64!]
  carriers:        [Int64!]
  categories:      [Int64!]
  countries:       [String!]
  languages:       [String!]
  applications:    [Int64!]
  domains:         [String!]
  zones:           [Int64!]
  secure:          AnyOnlyExclude
  adBlock:         AnyOnlyExclude
  privateBrowsing: AnyOnlyExclude
  IP:              AnyIPv4IPv6

  config: NullableJSON
}

###############################################################################
# Query & Mutation
###############################################################################

extend type Query {
  """
  Get RTBSource object by ID
  """
  RTBSource(ID: ID64!): RTBSourcePayload! @acl(permissions: ["rtb_source.view.*"])

  """
  List of the tag objects which can be filtered and ordered by some fields
  """
  listRTBSources(
    filter: RTBSourceListFilter = null,
    order: RTBSourceListOrder = null,
    page: Page = null
  ): RTBSourceConnection @acl(permissions: ["rtb_source.list.*"])
}

extend type Mutation {
  """
  Create the new RTBSource
  """
  createRTBSource(input: RTBSourceInput!): RTBSourcePayload! @acl(permissions: ["rtb_source.create.*"])

  """
  Update RTBSource info
  """
  updateRTBSource(ID: ID64!, input: RTBSourceInput!): RTBSourcePayload! @acl(permissions: ["rtb_source.update.*"])

  """
  Delete RTBSource
  """
  deleteRTBSource(ID: ID64!, msg: String = null): RTBSourcePayload @acl(permissions: ["rtb_source.delete.*"])

  """
  Run RTBSource to receive data from it
  """
  runRTBSource(ID: ID64!): StatusResponse! @acl(permissions: ["rtb_source.update.*"])

  """
  Pause RTBSource to stop receiving data from it
  """
  pauseRTBSource(ID: ID64!): StatusResponse! @acl(permissions: ["rtb_source.update.*"])

  """
  Approve RTBSource to start receiving data from it
  """
  approveRTBSource(ID: ID64!, msg: String = null): StatusResponse! @acl(permissions: ["rtb_source.approve.*"])

  """
  Reject RTBSource to stop receiving data from it
  """
  rejectRTBSource(ID: ID64!, msg: String = null): StatusResponse! @acl(permissions: ["rtb_source.reject.*"])
}
`, BuiltIn: false},
	{Name: "../../../../protocol/graphql/schemas/schema.graphql", Input: `# https://github.com/prisma/graphql-import
# Pagination https://graphql.org/learn/pagination/#pagination-and-edges

# scalar Time
# scalar TimeDuration
# scalar DateTime
# scalar Map
# scalar JSON
# scalar NullableJSON
# scalar UUID
# scalar ID64
scalar Int64
scalar Uint64
scalar Any
`, BuiltIn: false},
	{Name: "../../../../protocol/graphql/schemas/statistic.graphql", Input: `# Statistic of advertisement items: rtb_source, etc.

enum StatisticOrderingKey {
  UNDEFINED
  DATEMARK
  TIMEMARK
  SOURCE_ID
  PLATFORM_TYPE
  DOMAIN
  APP_ID
  ZONE_ID
  FORMAT_ID
  CARRIER_ID
  COUNTRY
  LANGUAGE
  IP
  DEVICE_ID
  DEVICE_TYPE
  OS_ID
  BROWSER_ID
  PROFIT
  BID_PRICE
  REQUESTS
  IMPRESSIONS
  VIEWS
  DIRECTS
  CLICKS
  BIDS
  WINS
  SKIPS
  NOBIDS
  ERRORS
  CTR
  ECPM
  ECPC
  ECPA
}

enum StatisticKey {
  UNDEFINED
  DATEMARK
  TIMEMARK
  SOURCE_ID
  PLATFORM_TYPE
  DOMAIN
  APP_ID
  ZONE_ID
  FORMAT_ID
  CARRIER_ID
  COUNTRY
  LANGUAGE
  IP
  DEVICE_ID
  DEVICE_TYPE
  OS_ID
  BROWSER_ID
}

type StatisticItemKey {
  key:    StatisticKey!
  value:  Any!
  text:   String!
}

type StatisticAdItem {
  keys: [StatisticItemKey!]

  # Money counters
  profit:       Float!
  bidPrice:     Float!

  # Counters
  requests:     Uint64!
  impressions:  Uint64!
  views:        Uint64!
  directs:      Uint64!
  clicks:       Uint64!
  bids:         Uint64!
  wins:         Uint64!
  skips:        Uint64!
  nobids:       Uint64!
  errors:       Uint64!

  ## Calculated fields
  CTR:          Float!
  eCPM:         Float!
  eCPC:         Float!
}

"""
StatisticAdItemConnection is a paginated list of StatisticAdItem objects.
"""
type StatisticAdItemConnection {
  """
  Total count of StatisticAdItem objects.
  """
  totalCount: Int!

  """
  List of StatisticAdItem objects.
  """
  list: [StatisticAdItem!]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

###############################################################################
# Query
###############################################################################

input StatisticAdKeyCondition {
  key:    StatisticKey!
  op:     StatisticCondition!
  value: [Any!]!
}

input StatisticAdListFilter {
  conditions: [StatisticAdKeyCondition!]
  startDate:  DateTime
  endDate:    DateTime
}

input StatisticAdKeyOrder {
  key:    StatisticOrderingKey!
  order:  Ordering!
}

extend type Query {
  """
  Get a list of StatisticAdItem objects.
  """
  statisticAdList(
    filter: StatisticAdListFilter = null,
    group:  [StatisticKey!] = null,
    order:  [StatisticAdKeyOrder!] = null,
    page: Page = null
  ): StatisticAdItemConnection! @acl(permissions: ["statistic.list.*"])
}
`, BuiltIn: false},
	{Name: "../../../../protocol/graphql/schemas/zone.graphql", Input: `"""
Zone object represents a specific advertising zone within an account.
"""
type Zone {
  ID: ID64!
  codename: String!
  accountID: ID64!

  title: String!
  description: String!

  """
  Status of the zone
  """
  status: ApproveStatus!

  """
  Active status of the zone
  """
  active: ActiveStatus!

  defaultCode: NullableJSON!
  context:     NullableJSON!
  minECPM:     Float!
  # minECPMByGeo: JSON

  fixedPurchasePrice: Float!

  allowedFormats:    [String!]
  allowedTypes:      [Int64!]
  allowedSources:    [Int64!]
  disallowedSources: [Int64!]

  campaigns: [Int64!]

  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
}

"""
ZoneEdge wrapper to access Zone objects
"""
type ZoneEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The Zone at the end of ZoneEdge.
  """
  node: Zone!
}

"""
ZoneConnection wrapper to access Zone objects
"""
type ZoneConnection {
  """
  Total count of Zone objects
  """
  totalCount: Int!

  """
  Edges of Zone objects
  """
  edges: [ZoneEdge!]

  """
  List of Zone objects
  """
  list: [Zone!]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
ZonePayload wrapper to access Zone operation results
"""
type ZonePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationID: String!

  """
  The Zone that was created or updated by this mutation.
  """
  zoneID: ID64!

  """
  The Zone object accessible by a client.
  """
  zone: Zone!
}

###############################################################################
# Input Types
###############################################################################

"""
Filter input for listing Zones.
"""
input ZoneListFilter {
  ID: [ID64!]
  codename: [String!]
  accountID: [ID64!]

  status: ApproveStatus
  active: ActiveStatus

  minECPM: Float
  maxECPM: Float
}

"""
Order input for listing Zones.
"""
input ZoneListOrder {
  ID: Ordering
  codename: Ordering

  title: Ordering
  accountID: Ordering

  type: Ordering
  status: Ordering
  active: Ordering

  minECPM: Ordering

  createdAt: Ordering
  updatedAt: Ordering
}

"""
Input type for creating or updating a Zone.
"""
input ZoneInput {
  """
  Account ID associated with the Zone. Must have appropriate permissions.
  """
  accountID: ID64

  """
  Unique codename for the Zone.
  """
  codename: String

  """
  Title of the Zone.
  """
  title: String

  """
  Description of the Zone.
  """
  description: String

  defaultCode: JSON
  context: JSON
  minECPM: Float
  minECPMByGeo: JSON

  fixedPurchasePrice: Float

  allowedFormats:    [String!]
  allowedTypes:      [Int64!]
  allowedSources:    [Int64!]
  disallowedSources: [Int64!]

  campaigns: [Int64!]
}

###############################################################################
# Query & Mutation Definitions
###############################################################################

extend type Query {
  """
  Get Zone object by ID
  """
  zone(ID: ID64!): ZonePayload! @acl(permissions: ["adv_zone.view.*"])

  """
  List of the Zone objects which can be filtered and ordered by some fields
  """
  listZones(
    filter: ZoneListFilter = null,
    order: ZoneListOrder = null,
    page: Page = null
  ): ZoneConnection @acl(permissions: ["adv_zone.list.*"])
}

extend type Mutation {
  """
  Create a new Zone
  """
  createZone(input: ZoneInput!): ZonePayload! @acl(permissions: ["adv_zone.create.*"])

  """
  Update Zone information
  """
  updateZone(ID: ID64!, input: ZoneInput!): ZonePayload! @acl(permissions: ["adv_zone.update.*"])

  """
  Delete Zone
  """
  deleteZone(ID: ID64!, msg: String = null): ZonePayload @acl(permissions: ["adv_zone.delete.*"])

  """
  Activate the Zone
  """
  activateZone(ID: ID64!, msg: String = null): StatusResponse! @acl(permissions: ["adv_zone.update.*"])

  """
  Deactivate the Zone
  """
  deactivateZone(ID: ID64!, msg: String = null): StatusResponse! @acl(permissions: ["adv_zone.update.*"])

  """
  Approve the Zone to be active
  """
  approveZone(ID: ID64!, msg: String = null): StatusResponse! @acl(permissions: ["adv_zone.approve.*"])

  """
  Reject the Zone
  """
  rejectZone(ID: ID64!, msg: String = null): StatusResponse! @acl(permissions: ["adv_zone.reject.*"])
}`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) dir_acl_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.dir_acl_argsPermissions(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["permissions"] = arg0
	return args, nil
}
func (ec *executionContext) dir_acl_argsPermissions(
	ctx context.Context,
	rawArgs map[string]any,
) ([]string, error) {
	if _, ok := rawArgs["permissions"]; !ok {
		var zeroVal []string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("permissions"))
	if tmp, ok := rawArgs["permissions"]; ok {
		return ec.unmarshalNString2ᚕstringᚄ(ctx, tmp)
	}

	var zeroVal []string
	return zeroVal, nil
}

func (ec *executionContext) dir_hasPermissions_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.dir_hasPermissions_argsPermissions(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["permissions"] = arg0
	return args, nil
}
func (ec *executionContext) dir_hasPermissions_argsPermissions(
	ctx context.Context,
	rawArgs map[string]any,
) ([]string, error) {
	if _, ok := rawArgs["permissions"]; !ok {
		var zeroVal []string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("permissions"))
	if tmp, ok := rawArgs["permissions"]; ok {
		return ec.unmarshalNString2ᚕstringᚄ(ctx, tmp)
	}

	var zeroVal []string
	return zeroVal, nil
}

func (ec *executionContext) dir_length_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.dir_length_argsMin(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["min"] = arg0
	arg1, err := ec.dir_length_argsMax(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["max"] = arg1
	arg2, err := ec.dir_length_argsTrim(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["trim"] = arg2
	arg3, err := ec.dir_length_argsOrnil(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["ornil"] = arg3
	return args, nil
}
func (ec *executionContext) dir_length_argsMin(
	ctx context.Context,
	rawArgs map[string]any,
) (int, error) {
	if _, ok := rawArgs["min"]; !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
	if tmp, ok := rawArgs["min"]; ok {
		return ec.unmarshalNInt2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) dir_length_argsMax(
	ctx context.Context,
	rawArgs map[string]any,
) (int, error) {
	if _, ok := rawArgs["max"]; !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
	if tmp, ok := rawArgs["max"]; ok {
		return ec.unmarshalNInt2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) dir_length_argsTrim(
	ctx context.Context,
	rawArgs map[string]any,
) (bool, error) {
	if _, ok := rawArgs["trim"]; !ok {
		var zeroVal bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("trim"))
	if tmp, ok := rawArgs["trim"]; ok {
		return ec.unmarshalNBoolean2bool(ctx, tmp)
	}

	var zeroVal bool
	return zeroVal, nil
}

func (ec *executionContext) dir_length_argsOrnil(
	ctx context.Context,
	rawArgs map[string]any,
) (bool, error) {
	if _, ok := rawArgs["ornil"]; !ok {
		var zeroVal bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("ornil"))
	if tmp, ok := rawArgs["ornil"]; ok {
		return ec.unmarshalNBoolean2bool(ctx, tmp)
	}

	var zeroVal bool
	return zeroVal, nil
}

func (ec *executionContext) dir_notempty_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.dir_notempty_argsTrim(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["trim"] = arg0
	arg1, err := ec.dir_notempty_argsOrnil(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["ornil"] = arg1
	return args, nil
}
func (ec *executionContext) dir_notempty_argsTrim(
	ctx context.Context,
	rawArgs map[string]any,
) (bool, error) {
	if _, ok := rawArgs["trim"]; !ok {
		var zeroVal bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("trim"))
	if tmp, ok := rawArgs["trim"]; ok {
		return ec.unmarshalNBoolean2bool(ctx, tmp)
	}

	var zeroVal bool
	return zeroVal, nil
}

func (ec *executionContext) dir_notempty_argsOrnil(
	ctx context.Context,
	rawArgs map[string]any,
) (bool, error) {
	if _, ok := rawArgs["ornil"]; !ok {
		var zeroVal bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("ornil"))
	if tmp, ok := rawArgs["ornil"]; ok {
		return ec.unmarshalNBoolean2bool(ctx, tmp)
	}

	var zeroVal bool
	return zeroVal, nil
}

func (ec *executionContext) dir_regex_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.dir_regex_argsPattern(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["pattern"] = arg0
	arg1, err := ec.dir_regex_argsTrim(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["trim"] = arg1
	arg2, err := ec.dir_regex_argsOrnil(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["ornil"] = arg2
	return args, nil
}
func (ec *executionContext) dir_regex_argsPattern(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["pattern"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("pattern"))
	if tmp, ok := rawArgs["pattern"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) dir_regex_argsTrim(
	ctx context.Context,
	rawArgs map[string]any,
) (bool, error) {
	if _, ok := rawArgs["trim"]; !ok {
		var zeroVal bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("trim"))
	if tmp, ok := rawArgs["trim"]; ok {
		return ec.unmarshalNBoolean2bool(ctx, tmp)
	}

	var zeroVal bool
	return zeroVal, nil
}

func (ec *executionContext) dir_regex_argsOrnil(
	ctx context.Context,
	rawArgs map[string]any,
) (bool, error) {
	if _, ok := rawArgs["ornil"]; !ok {
		var zeroVal bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("ornil"))
	if tmp, ok := rawArgs["ornil"]; ok {
		return ec.unmarshalNBoolean2bool(ctx, tmp)
	}

	var zeroVal bool
	return zeroVal, nil
}

func (ec *executionContext) dir_skipNoPermissions_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.dir_skipNoPermissions_argsPermissions(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["permissions"] = arg0
	return args, nil
}
func (ec *executionContext) dir_skipNoPermissions_argsPermissions(
	ctx context.Context,
	rawArgs map[string]any,
) ([]string, error) {
	if _, ok := rawArgs["permissions"]; !ok {
		var zeroVal []string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("permissions"))
	if tmp, ok := rawArgs["permissions"]; ok {
		return ec.unmarshalNString2ᚕstringᚄ(ctx, tmp)
	}

	var zeroVal []string
	return zeroVal, nil
}

func (ec *executionContext) field_DeviceModel_versions_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_DeviceModel_versions_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	arg1, err := ec.field_DeviceModel_versions_argsOrder(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["order"] = arg1
	return args, nil
}
func (ec *executionContext) field_DeviceModel_versions_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*models.DeviceModelListFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *models.DeviceModelListFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalODeviceModelListFilter2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceModelListFilter(ctx, tmp)
	}

	var zeroVal *models.DeviceModelListFilter
	return zeroVal, nil
}

func (ec *executionContext) field_DeviceModel_versions_argsOrder(
	ctx context.Context,
	rawArgs map[string]any,
) ([]*models.DeviceModelListOrder, error) {
	if _, ok := rawArgs["order"]; !ok {
		var zeroVal []*models.DeviceModelListOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
	if tmp, ok := rawArgs["order"]; ok {
		return ec.unmarshalODeviceModelListOrder2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceModelListOrderᚄ(ctx, tmp)
	}

	var zeroVal []*models.DeviceModelListOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_activateZone_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_activateZone_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["ID"] = arg0
	arg1, err := ec.field_Mutation_activateZone_argsMsg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["msg"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_activateZone_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["ID"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
	if tmp, ok := rawArgs["ID"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_activateZone_argsMsg(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["msg"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("msg"))
	if tmp, ok := rawArgs["msg"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_approveAccountMember_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_approveAccountMember_argsMemberID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["memberID"] = arg0
	arg1, err := ec.field_Mutation_approveAccountMember_argsMsg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["msg"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_approveAccountMember_argsMemberID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["memberID"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("memberID"))
	if tmp, ok := rawArgs["memberID"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_approveAccountMember_argsMsg(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["msg"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("msg"))
	if tmp, ok := rawArgs["msg"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_approveAccount_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_approveAccount_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_approveAccount_argsMsg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["msg"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_approveAccount_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_approveAccount_argsMsg(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["msg"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("msg"))
	if tmp, ok := rawArgs["msg"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_approveApplication_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_approveApplication_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["ID"] = arg0
	arg1, err := ec.field_Mutation_approveApplication_argsMsg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["msg"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_approveApplication_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["ID"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
	if tmp, ok := rawArgs["ID"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_approveApplication_argsMsg(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["msg"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("msg"))
	if tmp, ok := rawArgs["msg"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_approveRTBSource_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_approveRTBSource_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["ID"] = arg0
	arg1, err := ec.field_Mutation_approveRTBSource_argsMsg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["msg"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_approveRTBSource_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["ID"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
	if tmp, ok := rawArgs["ID"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_approveRTBSource_argsMsg(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["msg"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("msg"))
	if tmp, ok := rawArgs["msg"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_approveUser_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_approveUser_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_approveUser_argsMsg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["msg"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_approveUser_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_approveUser_argsMsg(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["msg"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("msg"))
	if tmp, ok := rawArgs["msg"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_approveZone_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_approveZone_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["ID"] = arg0
	arg1, err := ec.field_Mutation_approveZone_argsMsg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["msg"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_approveZone_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["ID"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
	if tmp, ok := rawArgs["ID"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_approveZone_argsMsg(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["msg"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("msg"))
	if tmp, ok := rawArgs["msg"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createApplication_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createApplication_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createApplication_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.ApplicationCreateInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.ApplicationCreateInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNApplicationCreateInput2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐApplicationCreateInput(ctx, tmp)
	}

	var zeroVal models.ApplicationCreateInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createAuthClient_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createAuthClient_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createAuthClient_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models1.AuthClientInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models1.AuthClientInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNAuthClientInput2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAuthClientInput(ctx, tmp)
	}

	var zeroVal models1.AuthClientInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createBrowser_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createBrowser_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createBrowser_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.BrowserCreateInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.BrowserCreateInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNBrowserCreateInput2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐBrowserCreateInput(ctx, tmp)
	}

	var zeroVal models.BrowserCreateInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createCategory_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createCategory_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createCategory_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.CategoryInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.CategoryInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCategoryInput2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐCategoryInput(ctx, tmp)
	}

	var zeroVal models.CategoryInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createDeviceMaker_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createDeviceMaker_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createDeviceMaker_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.DeviceMakerCreateInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.DeviceMakerCreateInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNDeviceMakerCreateInput2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceMakerCreateInput(ctx, tmp)
	}

	var zeroVal models.DeviceMakerCreateInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createDeviceModel_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createDeviceModel_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createDeviceModel_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.DeviceModelCreateInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.DeviceModelCreateInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNDeviceModelCreateInput2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceModelCreateInput(ctx, tmp)
	}

	var zeroVal models.DeviceModelCreateInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createFormat_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createFormat_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createFormat_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.AdFormatInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.AdFormatInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNAdFormatInput2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐAdFormatInput(ctx, tmp)
	}

	var zeroVal models.AdFormatInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createOS_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createOS_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createOS_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.OSCreateInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.OSCreateInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNOSCreateInput2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐOSCreateInput(ctx, tmp)
	}

	var zeroVal models.OSCreateInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createRTBSource_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createRTBSource_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createRTBSource_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.RTBSourceInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.RTBSourceInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNRTBSourceInput2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐRTBSourceInput(ctx, tmp)
	}

	var zeroVal models.RTBSourceInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createRole_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createRole_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createRole_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models1.RBACRoleInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models1.RBACRoleInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNRBACRoleInput2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐRBACRoleInput(ctx, tmp)
	}

	var zeroVal models1.RBACRoleInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createUser_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createUser_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createUser_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models1.UserInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models1.UserInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNUserInput2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐUserInput(ctx, tmp)
	}

	var zeroVal models1.UserInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createZone_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createZone_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createZone_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.ZoneInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.ZoneInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNZoneInput2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐZoneInput(ctx, tmp)
	}

	var zeroVal models.ZoneInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deactivateZone_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_deactivateZone_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["ID"] = arg0
	arg1, err := ec.field_Mutation_deactivateZone_argsMsg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["msg"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_deactivateZone_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["ID"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
	if tmp, ok := rawArgs["ID"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deactivateZone_argsMsg(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["msg"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("msg"))
	if tmp, ok := rawArgs["msg"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteApplication_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_deleteApplication_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["ID"] = arg0
	arg1, err := ec.field_Mutation_deleteApplication_argsMsg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["msg"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteApplication_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["ID"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
	if tmp, ok := rawArgs["ID"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteApplication_argsMsg(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["msg"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("msg"))
	if tmp, ok := rawArgs["msg"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteAuthClient_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_deleteAuthClient_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_deleteAuthClient_argsMsg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["msg"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteAuthClient_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteAuthClient_argsMsg(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["msg"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("msg"))
	if tmp, ok := rawArgs["msg"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteBrowser_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_deleteBrowser_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["ID"] = arg0
	arg1, err := ec.field_Mutation_deleteBrowser_argsMsg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["msg"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteBrowser_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["ID"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
	if tmp, ok := rawArgs["ID"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteBrowser_argsMsg(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["msg"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("msg"))
	if tmp, ok := rawArgs["msg"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteCategory_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_deleteCategory_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["ID"] = arg0
	arg1, err := ec.field_Mutation_deleteCategory_argsMsg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["msg"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteCategory_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["ID"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
	if tmp, ok := rawArgs["ID"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteCategory_argsMsg(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["msg"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("msg"))
	if tmp, ok := rawArgs["msg"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteDeviceMaker_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_deleteDeviceMaker_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["ID"] = arg0
	arg1, err := ec.field_Mutation_deleteDeviceMaker_argsMsg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["msg"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteDeviceMaker_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["ID"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
	if tmp, ok := rawArgs["ID"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteDeviceMaker_argsMsg(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["msg"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("msg"))
	if tmp, ok := rawArgs["msg"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteDeviceModel_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_deleteDeviceModel_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["ID"] = arg0
	arg1, err := ec.field_Mutation_deleteDeviceModel_argsMsg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["msg"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteDeviceModel_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["ID"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
	if tmp, ok := rawArgs["ID"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteDeviceModel_argsMsg(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["msg"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("msg"))
	if tmp, ok := rawArgs["msg"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteFormat_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_deleteFormat_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["ID"] = arg0
	arg1, err := ec.field_Mutation_deleteFormat_argsCodename(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["codename"] = arg1
	arg2, err := ec.field_Mutation_deleteFormat_argsMsg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["msg"] = arg2
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteFormat_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["ID"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
	if tmp, ok := rawArgs["ID"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteFormat_argsCodename(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["codename"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("codename"))
	if tmp, ok := rawArgs["codename"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteFormat_argsMsg(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["msg"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("msg"))
	if tmp, ok := rawArgs["msg"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteOS_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_deleteOS_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["ID"] = arg0
	arg1, err := ec.field_Mutation_deleteOS_argsMsg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["msg"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteOS_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["ID"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
	if tmp, ok := rawArgs["ID"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteOS_argsMsg(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["msg"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("msg"))
	if tmp, ok := rawArgs["msg"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteRTBSource_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_deleteRTBSource_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["ID"] = arg0
	arg1, err := ec.field_Mutation_deleteRTBSource_argsMsg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["msg"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteRTBSource_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["ID"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
	if tmp, ok := rawArgs["ID"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteRTBSource_argsMsg(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["msg"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("msg"))
	if tmp, ok := rawArgs["msg"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteRole_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_deleteRole_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_deleteRole_argsMsg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["msg"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteRole_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteRole_argsMsg(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["msg"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("msg"))
	if tmp, ok := rawArgs["msg"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteZone_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_deleteZone_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["ID"] = arg0
	arg1, err := ec.field_Mutation_deleteZone_argsMsg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["msg"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteZone_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["ID"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
	if tmp, ok := rawArgs["ID"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteZone_argsMsg(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["msg"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("msg"))
	if tmp, ok := rawArgs["msg"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_disconnectSocialAccount_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_disconnectSocialAccount_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_disconnectSocialAccount_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_generateDirectAccessToken_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_generateDirectAccessToken_argsUserID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["userID"] = arg0
	arg1, err := ec.field_Mutation_generateDirectAccessToken_argsDescription(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["description"] = arg1
	arg2, err := ec.field_Mutation_generateDirectAccessToken_argsExpiresAt(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["expiresAt"] = arg2
	return args, nil
}
func (ec *executionContext) field_Mutation_generateDirectAccessToken_argsUserID(
	ctx context.Context,
	rawArgs map[string]any,
) (*uint64, error) {
	if _, ok := rawArgs["userID"]; !ok {
		var zeroVal *uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
	if tmp, ok := rawArgs["userID"]; ok {
		return ec.unmarshalOID642ᚖuint64(ctx, tmp)
	}

	var zeroVal *uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_generateDirectAccessToken_argsDescription(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["description"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
	if tmp, ok := rawArgs["description"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_generateDirectAccessToken_argsExpiresAt(
	ctx context.Context,
	rawArgs map[string]any,
) (*time.Time, error) {
	if _, ok := rawArgs["expiresAt"]; !ok {
		var zeroVal *time.Time
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("expiresAt"))
	if tmp, ok := rawArgs["expiresAt"]; ok {
		return ec.unmarshalOTime2ᚖtimeᚐTime(ctx, tmp)
	}

	var zeroVal *time.Time
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_inviteAccountMember_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_inviteAccountMember_argsAccountID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["accountID"] = arg0
	arg1, err := ec.field_Mutation_inviteAccountMember_argsMember(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["member"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_inviteAccountMember_argsAccountID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["accountID"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("accountID"))
	if tmp, ok := rawArgs["accountID"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_inviteAccountMember_argsMember(
	ctx context.Context,
	rawArgs map[string]any,
) (models1.InviteMemberInput, error) {
	if _, ok := rawArgs["member"]; !ok {
		var zeroVal models1.InviteMemberInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("member"))
	if tmp, ok := rawArgs["member"]; ok {
		return ec.unmarshalNInviteMemberInput2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐInviteMemberInput(ctx, tmp)
	}

	var zeroVal models1.InviteMemberInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_login_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_login_argsLogin(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["login"] = arg0
	arg1, err := ec.field_Mutation_login_argsPassword(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["password"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_login_argsLogin(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["login"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("login"))
	if tmp, ok := rawArgs["login"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_login_argsPassword(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["password"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
	if tmp, ok := rawArgs["password"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_pauseApplication_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_pauseApplication_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["ID"] = arg0
	arg1, err := ec.field_Mutation_pauseApplication_argsMsg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["msg"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_pauseApplication_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["ID"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
	if tmp, ok := rawArgs["ID"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_pauseApplication_argsMsg(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["msg"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("msg"))
	if tmp, ok := rawArgs["msg"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_pauseRTBSource_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_pauseRTBSource_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["ID"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_pauseRTBSource_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["ID"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
	if tmp, ok := rawArgs["ID"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_registerAccount_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_registerAccount_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_registerAccount_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models1.AccountCreateInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models1.AccountCreateInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNAccountCreateInput2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAccountCreateInput(ctx, tmp)
	}

	var zeroVal models1.AccountCreateInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_rejectAccountMember_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_rejectAccountMember_argsMemberID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["memberID"] = arg0
	arg1, err := ec.field_Mutation_rejectAccountMember_argsMsg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["msg"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_rejectAccountMember_argsMemberID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["memberID"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("memberID"))
	if tmp, ok := rawArgs["memberID"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_rejectAccountMember_argsMsg(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["msg"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("msg"))
	if tmp, ok := rawArgs["msg"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_rejectAccount_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_rejectAccount_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_rejectAccount_argsMsg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["msg"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_rejectAccount_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_rejectAccount_argsMsg(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["msg"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("msg"))
	if tmp, ok := rawArgs["msg"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_rejectApplication_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_rejectApplication_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["ID"] = arg0
	arg1, err := ec.field_Mutation_rejectApplication_argsMsg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["msg"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_rejectApplication_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["ID"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
	if tmp, ok := rawArgs["ID"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_rejectApplication_argsMsg(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["msg"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("msg"))
	if tmp, ok := rawArgs["msg"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_rejectRTBSource_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_rejectRTBSource_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["ID"] = arg0
	arg1, err := ec.field_Mutation_rejectRTBSource_argsMsg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["msg"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_rejectRTBSource_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["ID"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
	if tmp, ok := rawArgs["ID"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_rejectRTBSource_argsMsg(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["msg"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("msg"))
	if tmp, ok := rawArgs["msg"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_rejectUser_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_rejectUser_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_rejectUser_argsMsg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["msg"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_rejectUser_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_rejectUser_argsMsg(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["msg"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("msg"))
	if tmp, ok := rawArgs["msg"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_rejectZone_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_rejectZone_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["ID"] = arg0
	arg1, err := ec.field_Mutation_rejectZone_argsMsg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["msg"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_rejectZone_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["ID"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
	if tmp, ok := rawArgs["ID"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_rejectZone_argsMsg(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["msg"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("msg"))
	if tmp, ok := rawArgs["msg"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_removeAccountMember_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_removeAccountMember_argsMemberID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["memberID"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_removeAccountMember_argsMemberID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["memberID"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("memberID"))
	if tmp, ok := rawArgs["memberID"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_resetUserPassword_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_resetUserPassword_argsEmail(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["email"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_resetUserPassword_argsEmail(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["email"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
	if tmp, ok := rawArgs["email"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_revokeDirectAccessToken_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_revokeDirectAccessToken_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_revokeDirectAccessToken_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (models1.DirectAccessTokenListFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal models1.DirectAccessTokenListFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalNDirectAccessTokenListFilter2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐDirectAccessTokenListFilter(ctx, tmp)
	}

	var zeroVal models1.DirectAccessTokenListFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_runApplication_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_runApplication_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["ID"] = arg0
	arg1, err := ec.field_Mutation_runApplication_argsMsg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["msg"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_runApplication_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["ID"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
	if tmp, ok := rawArgs["ID"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_runApplication_argsMsg(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["msg"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("msg"))
	if tmp, ok := rawArgs["msg"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_runRTBSource_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_runRTBSource_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["ID"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_runRTBSource_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["ID"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
	if tmp, ok := rawArgs["ID"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_setOption_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_setOption_argsName(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["name"] = arg0
	arg1, err := ec.field_Mutation_setOption_argsValue(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["value"] = arg1
	arg2, err := ec.field_Mutation_setOption_argsType(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["type"] = arg2
	arg3, err := ec.field_Mutation_setOption_argsTargetID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["targetID"] = arg3
	return args, nil
}
func (ec *executionContext) field_Mutation_setOption_argsName(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["name"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
	if tmp, ok := rawArgs["name"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_setOption_argsValue(
	ctx context.Context,
	rawArgs map[string]any,
) (*types.NullableJSON, error) {
	if _, ok := rawArgs["value"]; !ok {
		var zeroVal *types.NullableJSON
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
	if tmp, ok := rawArgs["value"]; ok {
		return ec.unmarshalONullableJSON2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋtypesᚐNullableJSON(ctx, tmp)
	}

	var zeroVal *types.NullableJSON
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_setOption_argsType(
	ctx context.Context,
	rawArgs map[string]any,
) (models1.OptionType, error) {
	if _, ok := rawArgs["type"]; !ok {
		var zeroVal models1.OptionType
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
	if tmp, ok := rawArgs["type"]; ok {
		return ec.unmarshalNOptionType2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOptionType(ctx, tmp)
	}

	var zeroVal models1.OptionType
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_setOption_argsTargetID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["targetID"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("targetID"))
	if tmp, ok := rawArgs["targetID"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_switchAccount_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_switchAccount_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_switchAccount_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateAccountMember_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateAccountMember_argsMemberID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["memberID"] = arg0
	arg1, err := ec.field_Mutation_updateAccountMember_argsMember(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["member"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updateAccountMember_argsMemberID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["memberID"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("memberID"))
	if tmp, ok := rawArgs["memberID"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateAccountMember_argsMember(
	ctx context.Context,
	rawArgs map[string]any,
) (models1.MemberInput, error) {
	if _, ok := rawArgs["member"]; !ok {
		var zeroVal models1.MemberInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("member"))
	if tmp, ok := rawArgs["member"]; ok {
		return ec.unmarshalNMemberInput2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐMemberInput(ctx, tmp)
	}

	var zeroVal models1.MemberInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateAccount_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateAccount_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_updateAccount_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updateAccount_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateAccount_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models1.AccountInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models1.AccountInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNAccountInput2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAccountInput(ctx, tmp)
	}

	var zeroVal models1.AccountInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateApplication_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateApplication_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["ID"] = arg0
	arg1, err := ec.field_Mutation_updateApplication_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updateApplication_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["ID"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
	if tmp, ok := rawArgs["ID"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateApplication_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.ApplicationUpdateInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.ApplicationUpdateInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNApplicationUpdateInput2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐApplicationUpdateInput(ctx, tmp)
	}

	var zeroVal models.ApplicationUpdateInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateAuthClient_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateAuthClient_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_updateAuthClient_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updateAuthClient_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateAuthClient_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models1.AuthClientInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models1.AuthClientInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNAuthClientInput2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAuthClientInput(ctx, tmp)
	}

	var zeroVal models1.AuthClientInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateBrowser_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateBrowser_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["ID"] = arg0
	arg1, err := ec.field_Mutation_updateBrowser_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updateBrowser_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["ID"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
	if tmp, ok := rawArgs["ID"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateBrowser_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.BrowserUpdateInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.BrowserUpdateInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNBrowserUpdateInput2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐBrowserUpdateInput(ctx, tmp)
	}

	var zeroVal models.BrowserUpdateInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateCategory_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateCategory_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["ID"] = arg0
	arg1, err := ec.field_Mutation_updateCategory_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updateCategory_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["ID"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
	if tmp, ok := rawArgs["ID"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateCategory_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.CategoryInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.CategoryInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCategoryInput2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐCategoryInput(ctx, tmp)
	}

	var zeroVal models.CategoryInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateDeviceMaker_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateDeviceMaker_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["ID"] = arg0
	arg1, err := ec.field_Mutation_updateDeviceMaker_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updateDeviceMaker_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["ID"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
	if tmp, ok := rawArgs["ID"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateDeviceMaker_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.DeviceMakerUpdateInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.DeviceMakerUpdateInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNDeviceMakerUpdateInput2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceMakerUpdateInput(ctx, tmp)
	}

	var zeroVal models.DeviceMakerUpdateInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateDeviceModel_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateDeviceModel_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["ID"] = arg0
	arg1, err := ec.field_Mutation_updateDeviceModel_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updateDeviceModel_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["ID"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
	if tmp, ok := rawArgs["ID"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateDeviceModel_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.DeviceModelUpdateInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.DeviceModelUpdateInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNDeviceModelUpdateInput2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceModelUpdateInput(ctx, tmp)
	}

	var zeroVal models.DeviceModelUpdateInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateFormat_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateFormat_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["ID"] = arg0
	arg1, err := ec.field_Mutation_updateFormat_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updateFormat_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["ID"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
	if tmp, ok := rawArgs["ID"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateFormat_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.AdFormatInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.AdFormatInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNAdFormatInput2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐAdFormatInput(ctx, tmp)
	}

	var zeroVal models.AdFormatInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateOS_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateOS_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["ID"] = arg0
	arg1, err := ec.field_Mutation_updateOS_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updateOS_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["ID"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
	if tmp, ok := rawArgs["ID"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateOS_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.OSUpdateInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.OSUpdateInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNOSUpdateInput2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐOSUpdateInput(ctx, tmp)
	}

	var zeroVal models.OSUpdateInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateRTBSource_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateRTBSource_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["ID"] = arg0
	arg1, err := ec.field_Mutation_updateRTBSource_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updateRTBSource_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["ID"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
	if tmp, ok := rawArgs["ID"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateRTBSource_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.RTBSourceInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.RTBSourceInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNRTBSourceInput2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐRTBSourceInput(ctx, tmp)
	}

	var zeroVal models.RTBSourceInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateRole_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateRole_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_updateRole_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updateRole_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateRole_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models1.RBACRoleInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models1.RBACRoleInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNRBACRoleInput2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐRBACRoleInput(ctx, tmp)
	}

	var zeroVal models1.RBACRoleInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateUserPassword_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateUserPassword_argsToken(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["token"] = arg0
	arg1, err := ec.field_Mutation_updateUserPassword_argsEmail(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["email"] = arg1
	arg2, err := ec.field_Mutation_updateUserPassword_argsPassword(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["password"] = arg2
	return args, nil
}
func (ec *executionContext) field_Mutation_updateUserPassword_argsToken(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["token"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
	if tmp, ok := rawArgs["token"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateUserPassword_argsEmail(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["email"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
	if tmp, ok := rawArgs["email"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateUserPassword_argsPassword(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["password"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
	if tmp, ok := rawArgs["password"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateUser_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateUser_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_updateUser_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updateUser_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateUser_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models1.UserInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models1.UserInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNUserInput2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐUserInput(ctx, tmp)
	}

	var zeroVal models1.UserInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateZone_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateZone_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["ID"] = arg0
	arg1, err := ec.field_Mutation_updateZone_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updateZone_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["ID"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
	if tmp, ok := rawArgs["ID"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateZone_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.ZoneInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.ZoneInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNZoneInput2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐZoneInput(ctx, tmp)
	}

	var zeroVal models.ZoneInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_OS_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_OS_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["ID"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_OS_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["ID"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
	if tmp, ok := rawArgs["ID"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Query_RTBSource_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_RTBSource_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["ID"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_RTBSource_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["ID"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
	if tmp, ok := rawArgs["ID"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query___type_argsName(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["name"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query___type_argsName(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["name"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
	if tmp, ok := rawArgs["name"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_account_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_account_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_account_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Query_application_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_application_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["ID"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_application_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["ID"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
	if tmp, ok := rawArgs["ID"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Query_authClient_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_authClient_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_authClient_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_browser_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_browser_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["ID"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_browser_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["ID"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
	if tmp, ok := rawArgs["ID"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Query_category_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_category_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["ID"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_category_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["ID"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
	if tmp, ok := rawArgs["ID"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Query_checkPermission_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_checkPermission_argsName(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["name"] = arg0
	arg1, err := ec.field_Query_checkPermission_argsKey(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["key"] = arg1
	arg2, err := ec.field_Query_checkPermission_argsTargetID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["targetID"] = arg2
	arg3, err := ec.field_Query_checkPermission_argsIDKey(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["idKey"] = arg3
	return args, nil
}
func (ec *executionContext) field_Query_checkPermission_argsName(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["name"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
	if tmp, ok := rawArgs["name"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_checkPermission_argsKey(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["key"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
	if tmp, ok := rawArgs["key"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_checkPermission_argsTargetID(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["targetID"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("targetID"))
	if tmp, ok := rawArgs["targetID"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_checkPermission_argsIDKey(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["idKey"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("idKey"))
	if tmp, ok := rawArgs["idKey"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_currentSocialAccounts_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_currentSocialAccounts_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	arg1, err := ec.field_Query_currentSocialAccounts_argsOrder(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["order"] = arg1
	return args, nil
}
func (ec *executionContext) field_Query_currentSocialAccounts_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*models1.SocialAccountListFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *models1.SocialAccountListFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOSocialAccountListFilter2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐSocialAccountListFilter(ctx, tmp)
	}

	var zeroVal *models1.SocialAccountListFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Query_currentSocialAccounts_argsOrder(
	ctx context.Context,
	rawArgs map[string]any,
) (*models1.SocialAccountListOrder, error) {
	if _, ok := rawArgs["order"]; !ok {
		var zeroVal *models1.SocialAccountListOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
	if tmp, ok := rawArgs["order"]; ok {
		return ec.unmarshalOSocialAccountListOrder2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐSocialAccountListOrder(ctx, tmp)
	}

	var zeroVal *models1.SocialAccountListOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Query_deviceMaker_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_deviceMaker_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["ID"] = arg0
	arg1, err := ec.field_Query_deviceMaker_argsCodename(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["codename"] = arg1
	return args, nil
}
func (ec *executionContext) field_Query_deviceMaker_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["ID"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
	if tmp, ok := rawArgs["ID"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Query_deviceMaker_argsCodename(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["codename"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("codename"))
	if tmp, ok := rawArgs["codename"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_deviceModel_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_deviceModel_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["ID"] = arg0
	arg1, err := ec.field_Query_deviceModel_argsCodename(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["codename"] = arg1
	return args, nil
}
func (ec *executionContext) field_Query_deviceModel_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["ID"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
	if tmp, ok := rawArgs["ID"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Query_deviceModel_argsCodename(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["codename"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("codename"))
	if tmp, ok := rawArgs["codename"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_format_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_format_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["ID"] = arg0
	arg1, err := ec.field_Query_format_argsCodename(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["codename"] = arg1
	return args, nil
}
func (ec *executionContext) field_Query_format_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["ID"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
	if tmp, ok := rawArgs["ID"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Query_format_argsCodename(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["codename"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("codename"))
	if tmp, ok := rawArgs["codename"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_getDirectAccessToken_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_getDirectAccessToken_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_getDirectAccessToken_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listAccountRolesAndPermissions_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_listAccountRolesAndPermissions_argsAccountID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["accountID"] = arg0
	arg1, err := ec.field_Query_listAccountRolesAndPermissions_argsOrder(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["order"] = arg1
	return args, nil
}
func (ec *executionContext) field_Query_listAccountRolesAndPermissions_argsAccountID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["accountID"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("accountID"))
	if tmp, ok := rawArgs["accountID"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listAccountRolesAndPermissions_argsOrder(
	ctx context.Context,
	rawArgs map[string]any,
) (*models1.RBACRoleListOrder, error) {
	if _, ok := rawArgs["order"]; !ok {
		var zeroVal *models1.RBACRoleListOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
	if tmp, ok := rawArgs["order"]; ok {
		return ec.unmarshalORBACRoleListOrder2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐRBACRoleListOrder(ctx, tmp)
	}

	var zeroVal *models1.RBACRoleListOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listAccounts_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_listAccounts_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	arg1, err := ec.field_Query_listAccounts_argsOrder(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["order"] = arg1
	arg2, err := ec.field_Query_listAccounts_argsPage(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["page"] = arg2
	return args, nil
}
func (ec *executionContext) field_Query_listAccounts_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*models1.AccountListFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *models1.AccountListFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOAccountListFilter2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAccountListFilter(ctx, tmp)
	}

	var zeroVal *models1.AccountListFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listAccounts_argsOrder(
	ctx context.Context,
	rawArgs map[string]any,
) (*models1.AccountListOrder, error) {
	if _, ok := rawArgs["order"]; !ok {
		var zeroVal *models1.AccountListOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
	if tmp, ok := rawArgs["order"]; ok {
		return ec.unmarshalOAccountListOrder2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAccountListOrder(ctx, tmp)
	}

	var zeroVal *models1.AccountListOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listAccounts_argsPage(
	ctx context.Context,
	rawArgs map[string]any,
) (*models1.Page, error) {
	if _, ok := rawArgs["page"]; !ok {
		var zeroVal *models1.Page
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
	if tmp, ok := rawArgs["page"]; ok {
		return ec.unmarshalOPage2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐPage(ctx, tmp)
	}

	var zeroVal *models1.Page
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listApplications_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_listApplications_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	arg1, err := ec.field_Query_listApplications_argsOrder(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["order"] = arg1
	arg2, err := ec.field_Query_listApplications_argsPage(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["page"] = arg2
	return args, nil
}
func (ec *executionContext) field_Query_listApplications_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*models.ApplicationListFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *models.ApplicationListFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOApplicationListFilter2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐApplicationListFilter(ctx, tmp)
	}

	var zeroVal *models.ApplicationListFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listApplications_argsOrder(
	ctx context.Context,
	rawArgs map[string]any,
) (*models.ApplicationListOrder, error) {
	if _, ok := rawArgs["order"]; !ok {
		var zeroVal *models.ApplicationListOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
	if tmp, ok := rawArgs["order"]; ok {
		return ec.unmarshalOApplicationListOrder2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐApplicationListOrder(ctx, tmp)
	}

	var zeroVal *models.ApplicationListOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listApplications_argsPage(
	ctx context.Context,
	rawArgs map[string]any,
) (*models1.Page, error) {
	if _, ok := rawArgs["page"]; !ok {
		var zeroVal *models1.Page
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
	if tmp, ok := rawArgs["page"]; ok {
		return ec.unmarshalOPage2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐPage(ctx, tmp)
	}

	var zeroVal *models1.Page
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listAuthClients_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_listAuthClients_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	arg1, err := ec.field_Query_listAuthClients_argsOrder(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["order"] = arg1
	arg2, err := ec.field_Query_listAuthClients_argsPage(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["page"] = arg2
	return args, nil
}
func (ec *executionContext) field_Query_listAuthClients_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*models1.AuthClientListFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *models1.AuthClientListFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOAuthClientListFilter2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAuthClientListFilter(ctx, tmp)
	}

	var zeroVal *models1.AuthClientListFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listAuthClients_argsOrder(
	ctx context.Context,
	rawArgs map[string]any,
) (*models1.AuthClientListOrder, error) {
	if _, ok := rawArgs["order"]; !ok {
		var zeroVal *models1.AuthClientListOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
	if tmp, ok := rawArgs["order"]; ok {
		return ec.unmarshalOAuthClientListOrder2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAuthClientListOrder(ctx, tmp)
	}

	var zeroVal *models1.AuthClientListOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listAuthClients_argsPage(
	ctx context.Context,
	rawArgs map[string]any,
) (*models1.Page, error) {
	if _, ok := rawArgs["page"]; !ok {
		var zeroVal *models1.Page
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
	if tmp, ok := rawArgs["page"]; ok {
		return ec.unmarshalOPage2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐPage(ctx, tmp)
	}

	var zeroVal *models1.Page
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listBrowsers_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_listBrowsers_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	arg1, err := ec.field_Query_listBrowsers_argsOrder(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["order"] = arg1
	arg2, err := ec.field_Query_listBrowsers_argsPage(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["page"] = arg2
	return args, nil
}
func (ec *executionContext) field_Query_listBrowsers_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*models.BrowserListFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *models.BrowserListFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOBrowserListFilter2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐBrowserListFilter(ctx, tmp)
	}

	var zeroVal *models.BrowserListFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listBrowsers_argsOrder(
	ctx context.Context,
	rawArgs map[string]any,
) ([]*models.BrowserListOrder, error) {
	if _, ok := rawArgs["order"]; !ok {
		var zeroVal []*models.BrowserListOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
	if tmp, ok := rawArgs["order"]; ok {
		return ec.unmarshalOBrowserListOrder2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐBrowserListOrderᚄ(ctx, tmp)
	}

	var zeroVal []*models.BrowserListOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listBrowsers_argsPage(
	ctx context.Context,
	rawArgs map[string]any,
) (*models1.Page, error) {
	if _, ok := rawArgs["page"]; !ok {
		var zeroVal *models1.Page
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
	if tmp, ok := rawArgs["page"]; ok {
		return ec.unmarshalOPage2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐPage(ctx, tmp)
	}

	var zeroVal *models1.Page
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listCategories_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_listCategories_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	arg1, err := ec.field_Query_listCategories_argsOrder(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["order"] = arg1
	arg2, err := ec.field_Query_listCategories_argsPage(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["page"] = arg2
	return args, nil
}
func (ec *executionContext) field_Query_listCategories_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*models.CategoryListFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *models.CategoryListFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOCategoryListFilter2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐCategoryListFilter(ctx, tmp)
	}

	var zeroVal *models.CategoryListFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listCategories_argsOrder(
	ctx context.Context,
	rawArgs map[string]any,
) (*models.CategoryListOrder, error) {
	if _, ok := rawArgs["order"]; !ok {
		var zeroVal *models.CategoryListOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
	if tmp, ok := rawArgs["order"]; ok {
		return ec.unmarshalOCategoryListOrder2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐCategoryListOrder(ctx, tmp)
	}

	var zeroVal *models.CategoryListOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listCategories_argsPage(
	ctx context.Context,
	rawArgs map[string]any,
) (*models1.Page, error) {
	if _, ok := rawArgs["page"]; !ok {
		var zeroVal *models1.Page
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
	if tmp, ok := rawArgs["page"]; ok {
		return ec.unmarshalOPage2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐPage(ctx, tmp)
	}

	var zeroVal *models1.Page
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listDeviceMakers_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_listDeviceMakers_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	arg1, err := ec.field_Query_listDeviceMakers_argsOrder(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["order"] = arg1
	arg2, err := ec.field_Query_listDeviceMakers_argsPage(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["page"] = arg2
	return args, nil
}
func (ec *executionContext) field_Query_listDeviceMakers_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*models.DeviceMakerListFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *models.DeviceMakerListFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalODeviceMakerListFilter2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceMakerListFilter(ctx, tmp)
	}

	var zeroVal *models.DeviceMakerListFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listDeviceMakers_argsOrder(
	ctx context.Context,
	rawArgs map[string]any,
) ([]*models.DeviceMakerListOrder, error) {
	if _, ok := rawArgs["order"]; !ok {
		var zeroVal []*models.DeviceMakerListOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
	if tmp, ok := rawArgs["order"]; ok {
		return ec.unmarshalODeviceMakerListOrder2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceMakerListOrderᚄ(ctx, tmp)
	}

	var zeroVal []*models.DeviceMakerListOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listDeviceMakers_argsPage(
	ctx context.Context,
	rawArgs map[string]any,
) (*models1.Page, error) {
	if _, ok := rawArgs["page"]; !ok {
		var zeroVal *models1.Page
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
	if tmp, ok := rawArgs["page"]; ok {
		return ec.unmarshalOPage2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐPage(ctx, tmp)
	}

	var zeroVal *models1.Page
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listDeviceModels_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_listDeviceModels_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	arg1, err := ec.field_Query_listDeviceModels_argsOrder(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["order"] = arg1
	arg2, err := ec.field_Query_listDeviceModels_argsPage(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["page"] = arg2
	return args, nil
}
func (ec *executionContext) field_Query_listDeviceModels_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*models.DeviceModelListFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *models.DeviceModelListFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalODeviceModelListFilter2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceModelListFilter(ctx, tmp)
	}

	var zeroVal *models.DeviceModelListFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listDeviceModels_argsOrder(
	ctx context.Context,
	rawArgs map[string]any,
) ([]*models.DeviceModelListOrder, error) {
	if _, ok := rawArgs["order"]; !ok {
		var zeroVal []*models.DeviceModelListOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
	if tmp, ok := rawArgs["order"]; ok {
		return ec.unmarshalODeviceModelListOrder2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceModelListOrderᚄ(ctx, tmp)
	}

	var zeroVal []*models.DeviceModelListOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listDeviceModels_argsPage(
	ctx context.Context,
	rawArgs map[string]any,
) (*models1.Page, error) {
	if _, ok := rawArgs["page"]; !ok {
		var zeroVal *models1.Page
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
	if tmp, ok := rawArgs["page"]; ok {
		return ec.unmarshalOPage2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐPage(ctx, tmp)
	}

	var zeroVal *models1.Page
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listDirectAccessTokens_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_listDirectAccessTokens_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	arg1, err := ec.field_Query_listDirectAccessTokens_argsOrder(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["order"] = arg1
	arg2, err := ec.field_Query_listDirectAccessTokens_argsPage(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["page"] = arg2
	return args, nil
}
func (ec *executionContext) field_Query_listDirectAccessTokens_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*models1.DirectAccessTokenListFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *models1.DirectAccessTokenListFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalODirectAccessTokenListFilter2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐDirectAccessTokenListFilter(ctx, tmp)
	}

	var zeroVal *models1.DirectAccessTokenListFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listDirectAccessTokens_argsOrder(
	ctx context.Context,
	rawArgs map[string]any,
) (*models1.DirectAccessTokenListOrder, error) {
	if _, ok := rawArgs["order"]; !ok {
		var zeroVal *models1.DirectAccessTokenListOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
	if tmp, ok := rawArgs["order"]; ok {
		return ec.unmarshalODirectAccessTokenListOrder2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐDirectAccessTokenListOrder(ctx, tmp)
	}

	var zeroVal *models1.DirectAccessTokenListOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listDirectAccessTokens_argsPage(
	ctx context.Context,
	rawArgs map[string]any,
) (*models1.Page, error) {
	if _, ok := rawArgs["page"]; !ok {
		var zeroVal *models1.Page
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
	if tmp, ok := rawArgs["page"]; ok {
		return ec.unmarshalOPage2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐPage(ctx, tmp)
	}

	var zeroVal *models1.Page
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listFormats_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_listFormats_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	arg1, err := ec.field_Query_listFormats_argsOrder(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["order"] = arg1
	arg2, err := ec.field_Query_listFormats_argsPage(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["page"] = arg2
	return args, nil
}
func (ec *executionContext) field_Query_listFormats_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*models.AdFormatListFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *models.AdFormatListFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOAdFormatListFilter2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐAdFormatListFilter(ctx, tmp)
	}

	var zeroVal *models.AdFormatListFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listFormats_argsOrder(
	ctx context.Context,
	rawArgs map[string]any,
) (*models.AdFormatListOrder, error) {
	if _, ok := rawArgs["order"]; !ok {
		var zeroVal *models.AdFormatListOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
	if tmp, ok := rawArgs["order"]; ok {
		return ec.unmarshalOAdFormatListOrder2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐAdFormatListOrder(ctx, tmp)
	}

	var zeroVal *models.AdFormatListOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listFormats_argsPage(
	ctx context.Context,
	rawArgs map[string]any,
) (*models1.Page, error) {
	if _, ok := rawArgs["page"]; !ok {
		var zeroVal *models1.Page
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
	if tmp, ok := rawArgs["page"]; ok {
		return ec.unmarshalOPage2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐPage(ctx, tmp)
	}

	var zeroVal *models1.Page
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listHistory_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_listHistory_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	arg1, err := ec.field_Query_listHistory_argsOrder(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["order"] = arg1
	arg2, err := ec.field_Query_listHistory_argsPage(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["page"] = arg2
	return args, nil
}
func (ec *executionContext) field_Query_listHistory_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*models1.HistoryActionListFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *models1.HistoryActionListFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOHistoryActionListFilter2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐHistoryActionListFilter(ctx, tmp)
	}

	var zeroVal *models1.HistoryActionListFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listHistory_argsOrder(
	ctx context.Context,
	rawArgs map[string]any,
) (*models1.HistoryActionListOrder, error) {
	if _, ok := rawArgs["order"]; !ok {
		var zeroVal *models1.HistoryActionListOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
	if tmp, ok := rawArgs["order"]; ok {
		return ec.unmarshalOHistoryActionListOrder2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐHistoryActionListOrder(ctx, tmp)
	}

	var zeroVal *models1.HistoryActionListOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listHistory_argsPage(
	ctx context.Context,
	rawArgs map[string]any,
) (*models1.Page, error) {
	if _, ok := rawArgs["page"]; !ok {
		var zeroVal *models1.Page
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
	if tmp, ok := rawArgs["page"]; ok {
		return ec.unmarshalOPage2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐPage(ctx, tmp)
	}

	var zeroVal *models1.Page
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listMembers_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_listMembers_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	arg1, err := ec.field_Query_listMembers_argsOrder(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["order"] = arg1
	arg2, err := ec.field_Query_listMembers_argsPage(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["page"] = arg2
	return args, nil
}
func (ec *executionContext) field_Query_listMembers_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*models1.MemberListFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *models1.MemberListFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOMemberListFilter2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐMemberListFilter(ctx, tmp)
	}

	var zeroVal *models1.MemberListFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listMembers_argsOrder(
	ctx context.Context,
	rawArgs map[string]any,
) (*models1.MemberListOrder, error) {
	if _, ok := rawArgs["order"]; !ok {
		var zeroVal *models1.MemberListOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
	if tmp, ok := rawArgs["order"]; ok {
		return ec.unmarshalOMemberListOrder2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐMemberListOrder(ctx, tmp)
	}

	var zeroVal *models1.MemberListOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listMembers_argsPage(
	ctx context.Context,
	rawArgs map[string]any,
) (*models1.Page, error) {
	if _, ok := rawArgs["page"]; !ok {
		var zeroVal *models1.Page
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
	if tmp, ok := rawArgs["page"]; ok {
		return ec.unmarshalOPage2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐPage(ctx, tmp)
	}

	var zeroVal *models1.Page
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listMyPermissions_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_listMyPermissions_argsPatterns(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["patterns"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_listMyPermissions_argsPatterns(
	ctx context.Context,
	rawArgs map[string]any,
) ([]string, error) {
	if _, ok := rawArgs["patterns"]; !ok {
		var zeroVal []string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("patterns"))
	if tmp, ok := rawArgs["patterns"]; ok {
		return ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
	}

	var zeroVal []string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listOS_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_listOS_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	arg1, err := ec.field_Query_listOS_argsOrder(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["order"] = arg1
	arg2, err := ec.field_Query_listOS_argsPage(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["page"] = arg2
	return args, nil
}
func (ec *executionContext) field_Query_listOS_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*models.OSListFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *models.OSListFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOOSListFilter2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐOSListFilter(ctx, tmp)
	}

	var zeroVal *models.OSListFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listOS_argsOrder(
	ctx context.Context,
	rawArgs map[string]any,
) ([]*models.OSListOrder, error) {
	if _, ok := rawArgs["order"]; !ok {
		var zeroVal []*models.OSListOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
	if tmp, ok := rawArgs["order"]; ok {
		return ec.unmarshalNOSListOrder2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐOSListOrderᚄ(ctx, tmp)
	}

	var zeroVal []*models.OSListOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listOS_argsPage(
	ctx context.Context,
	rawArgs map[string]any,
) (*models1.Page, error) {
	if _, ok := rawArgs["page"]; !ok {
		var zeroVal *models1.Page
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
	if tmp, ok := rawArgs["page"]; ok {
		return ec.unmarshalOPage2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐPage(ctx, tmp)
	}

	var zeroVal *models1.Page
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listOptions_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_listOptions_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	arg1, err := ec.field_Query_listOptions_argsOrder(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["order"] = arg1
	arg2, err := ec.field_Query_listOptions_argsPage(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["page"] = arg2
	return args, nil
}
func (ec *executionContext) field_Query_listOptions_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*models1.OptionListFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *models1.OptionListFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOOptionListFilter2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOptionListFilter(ctx, tmp)
	}

	var zeroVal *models1.OptionListFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listOptions_argsOrder(
	ctx context.Context,
	rawArgs map[string]any,
) (*models1.OptionListOrder, error) {
	if _, ok := rawArgs["order"]; !ok {
		var zeroVal *models1.OptionListOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
	if tmp, ok := rawArgs["order"]; ok {
		return ec.unmarshalOOptionListOrder2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOptionListOrder(ctx, tmp)
	}

	var zeroVal *models1.OptionListOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listOptions_argsPage(
	ctx context.Context,
	rawArgs map[string]any,
) (*models1.Page, error) {
	if _, ok := rawArgs["page"]; !ok {
		var zeroVal *models1.Page
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
	if tmp, ok := rawArgs["page"]; ok {
		return ec.unmarshalOPage2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐPage(ctx, tmp)
	}

	var zeroVal *models1.Page
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listPermissions_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_listPermissions_argsPatterns(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["patterns"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_listPermissions_argsPatterns(
	ctx context.Context,
	rawArgs map[string]any,
) ([]string, error) {
	if _, ok := rawArgs["patterns"]; !ok {
		var zeroVal []string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("patterns"))
	if tmp, ok := rawArgs["patterns"]; ok {
		return ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
	}

	var zeroVal []string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listRTBSources_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_listRTBSources_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	arg1, err := ec.field_Query_listRTBSources_argsOrder(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["order"] = arg1
	arg2, err := ec.field_Query_listRTBSources_argsPage(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["page"] = arg2
	return args, nil
}
func (ec *executionContext) field_Query_listRTBSources_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*models.RTBSourceListFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *models.RTBSourceListFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalORTBSourceListFilter2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐRTBSourceListFilter(ctx, tmp)
	}

	var zeroVal *models.RTBSourceListFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listRTBSources_argsOrder(
	ctx context.Context,
	rawArgs map[string]any,
) (*models.RTBSourceListOrder, error) {
	if _, ok := rawArgs["order"]; !ok {
		var zeroVal *models.RTBSourceListOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
	if tmp, ok := rawArgs["order"]; ok {
		return ec.unmarshalORTBSourceListOrder2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐRTBSourceListOrder(ctx, tmp)
	}

	var zeroVal *models.RTBSourceListOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listRTBSources_argsPage(
	ctx context.Context,
	rawArgs map[string]any,
) (*models1.Page, error) {
	if _, ok := rawArgs["page"]; !ok {
		var zeroVal *models1.Page
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
	if tmp, ok := rawArgs["page"]; ok {
		return ec.unmarshalOPage2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐPage(ctx, tmp)
	}

	var zeroVal *models1.Page
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listRoles_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_listRoles_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	arg1, err := ec.field_Query_listRoles_argsOrder(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["order"] = arg1
	arg2, err := ec.field_Query_listRoles_argsPage(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["page"] = arg2
	return args, nil
}
func (ec *executionContext) field_Query_listRoles_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*models1.RBACRoleListFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *models1.RBACRoleListFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalORBACRoleListFilter2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐRBACRoleListFilter(ctx, tmp)
	}

	var zeroVal *models1.RBACRoleListFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listRoles_argsOrder(
	ctx context.Context,
	rawArgs map[string]any,
) (*models1.RBACRoleListOrder, error) {
	if _, ok := rawArgs["order"]; !ok {
		var zeroVal *models1.RBACRoleListOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
	if tmp, ok := rawArgs["order"]; ok {
		return ec.unmarshalORBACRoleListOrder2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐRBACRoleListOrder(ctx, tmp)
	}

	var zeroVal *models1.RBACRoleListOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listRoles_argsPage(
	ctx context.Context,
	rawArgs map[string]any,
) (*models1.Page, error) {
	if _, ok := rawArgs["page"]; !ok {
		var zeroVal *models1.Page
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
	if tmp, ok := rawArgs["page"]; ok {
		return ec.unmarshalOPage2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐPage(ctx, tmp)
	}

	var zeroVal *models1.Page
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listSocialAccounts_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_listSocialAccounts_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	arg1, err := ec.field_Query_listSocialAccounts_argsOrder(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["order"] = arg1
	arg2, err := ec.field_Query_listSocialAccounts_argsPage(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["page"] = arg2
	return args, nil
}
func (ec *executionContext) field_Query_listSocialAccounts_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*models1.SocialAccountListFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *models1.SocialAccountListFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOSocialAccountListFilter2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐSocialAccountListFilter(ctx, tmp)
	}

	var zeroVal *models1.SocialAccountListFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listSocialAccounts_argsOrder(
	ctx context.Context,
	rawArgs map[string]any,
) (*models1.SocialAccountListOrder, error) {
	if _, ok := rawArgs["order"]; !ok {
		var zeroVal *models1.SocialAccountListOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
	if tmp, ok := rawArgs["order"]; ok {
		return ec.unmarshalOSocialAccountListOrder2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐSocialAccountListOrder(ctx, tmp)
	}

	var zeroVal *models1.SocialAccountListOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listSocialAccounts_argsPage(
	ctx context.Context,
	rawArgs map[string]any,
) (*models1.Page, error) {
	if _, ok := rawArgs["page"]; !ok {
		var zeroVal *models1.Page
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
	if tmp, ok := rawArgs["page"]; ok {
		return ec.unmarshalOPage2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐPage(ctx, tmp)
	}

	var zeroVal *models1.Page
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listUsers_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_listUsers_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	arg1, err := ec.field_Query_listUsers_argsOrder(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["order"] = arg1
	arg2, err := ec.field_Query_listUsers_argsPage(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["page"] = arg2
	return args, nil
}
func (ec *executionContext) field_Query_listUsers_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*models1.UserListFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *models1.UserListFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOUserListFilter2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐUserListFilter(ctx, tmp)
	}

	var zeroVal *models1.UserListFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listUsers_argsOrder(
	ctx context.Context,
	rawArgs map[string]any,
) (*models1.UserListOrder, error) {
	if _, ok := rawArgs["order"]; !ok {
		var zeroVal *models1.UserListOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
	if tmp, ok := rawArgs["order"]; ok {
		return ec.unmarshalOUserListOrder2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐUserListOrder(ctx, tmp)
	}

	var zeroVal *models1.UserListOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listUsers_argsPage(
	ctx context.Context,
	rawArgs map[string]any,
) (*models1.Page, error) {
	if _, ok := rawArgs["page"]; !ok {
		var zeroVal *models1.Page
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
	if tmp, ok := rawArgs["page"]; ok {
		return ec.unmarshalOPage2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐPage(ctx, tmp)
	}

	var zeroVal *models1.Page
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listZones_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_listZones_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	arg1, err := ec.field_Query_listZones_argsOrder(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["order"] = arg1
	arg2, err := ec.field_Query_listZones_argsPage(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["page"] = arg2
	return args, nil
}
func (ec *executionContext) field_Query_listZones_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*models.ZoneListFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *models.ZoneListFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOZoneListFilter2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐZoneListFilter(ctx, tmp)
	}

	var zeroVal *models.ZoneListFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listZones_argsOrder(
	ctx context.Context,
	rawArgs map[string]any,
) (*models.ZoneListOrder, error) {
	if _, ok := rawArgs["order"]; !ok {
		var zeroVal *models.ZoneListOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
	if tmp, ok := rawArgs["order"]; ok {
		return ec.unmarshalOZoneListOrder2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐZoneListOrder(ctx, tmp)
	}

	var zeroVal *models.ZoneListOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Query_listZones_argsPage(
	ctx context.Context,
	rawArgs map[string]any,
) (*models1.Page, error) {
	if _, ok := rawArgs["page"]; !ok {
		var zeroVal *models1.Page
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
	if tmp, ok := rawArgs["page"]; ok {
		return ec.unmarshalOPage2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐPage(ctx, tmp)
	}

	var zeroVal *models1.Page
	return zeroVal, nil
}

func (ec *executionContext) field_Query_option_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_option_argsName(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["name"] = arg0
	arg1, err := ec.field_Query_option_argsType(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["type"] = arg1
	arg2, err := ec.field_Query_option_argsTargetID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["targetID"] = arg2
	return args, nil
}
func (ec *executionContext) field_Query_option_argsName(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["name"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
	if tmp, ok := rawArgs["name"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_option_argsType(
	ctx context.Context,
	rawArgs map[string]any,
) (models1.OptionType, error) {
	if _, ok := rawArgs["type"]; !ok {
		var zeroVal models1.OptionType
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
	if tmp, ok := rawArgs["type"]; ok {
		return ec.unmarshalNOptionType2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOptionType(ctx, tmp)
	}

	var zeroVal models1.OptionType
	return zeroVal, nil
}

func (ec *executionContext) field_Query_option_argsTargetID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["targetID"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("targetID"))
	if tmp, ok := rawArgs["targetID"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Query_role_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_role_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_role_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Query_socialAccount_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_socialAccount_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_socialAccount_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Query_statisticAdList_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_statisticAdList_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	arg1, err := ec.field_Query_statisticAdList_argsGroup(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["group"] = arg1
	arg2, err := ec.field_Query_statisticAdList_argsOrder(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["order"] = arg2
	arg3, err := ec.field_Query_statisticAdList_argsPage(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["page"] = arg3
	return args, nil
}
func (ec *executionContext) field_Query_statisticAdList_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*models.StatisticAdListFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *models.StatisticAdListFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOStatisticAdListFilter2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐStatisticAdListFilter(ctx, tmp)
	}

	var zeroVal *models.StatisticAdListFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Query_statisticAdList_argsGroup(
	ctx context.Context,
	rawArgs map[string]any,
) ([]models.StatisticKey, error) {
	if _, ok := rawArgs["group"]; !ok {
		var zeroVal []models.StatisticKey
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("group"))
	if tmp, ok := rawArgs["group"]; ok {
		return ec.unmarshalOStatisticKey2ᚕgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐStatisticKeyᚄ(ctx, tmp)
	}

	var zeroVal []models.StatisticKey
	return zeroVal, nil
}

func (ec *executionContext) field_Query_statisticAdList_argsOrder(
	ctx context.Context,
	rawArgs map[string]any,
) ([]*models.StatisticAdKeyOrder, error) {
	if _, ok := rawArgs["order"]; !ok {
		var zeroVal []*models.StatisticAdKeyOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
	if tmp, ok := rawArgs["order"]; ok {
		return ec.unmarshalOStatisticAdKeyOrder2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐStatisticAdKeyOrderᚄ(ctx, tmp)
	}

	var zeroVal []*models.StatisticAdKeyOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Query_statisticAdList_argsPage(
	ctx context.Context,
	rawArgs map[string]any,
) (*models1.Page, error) {
	if _, ok := rawArgs["page"]; !ok {
		var zeroVal *models1.Page
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
	if tmp, ok := rawArgs["page"]; ok {
		return ec.unmarshalOPage2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐPage(ctx, tmp)
	}

	var zeroVal *models1.Page
	return zeroVal, nil
}

func (ec *executionContext) field_Query_user_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_user_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Query_user_argsUsername(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["username"] = arg1
	return args, nil
}
func (ec *executionContext) field_Query_user_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field_Query_user_argsUsername(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["username"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
	if tmp, ok := rawArgs["username"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_zone_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_zone_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["ID"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_zone_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uint64, error) {
	if _, ok := rawArgs["ID"]; !ok {
		var zeroVal uint64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
	if tmp, ok := rawArgs["ID"]; ok {
		return ec.unmarshalNID642uint64(ctx, tmp)
	}

	var zeroVal uint64
	return zeroVal, nil
}

func (ec *executionContext) field___Directive_args_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field___Directive_args_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Directive_args_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	if _, ok := rawArgs["includeDeprecated"]; !ok {
		var zeroVal *bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field___Field_args_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field___Field_args_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Field_args_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	if _, ok := rawArgs["includeDeprecated"]; !ok {
		var zeroVal *bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field___Type_enumValues_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Type_enumValues_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]any,
) (bool, error) {
	if _, ok := rawArgs["includeDeprecated"]; !ok {
		var zeroVal bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2bool(ctx, tmp)
	}

	var zeroVal bool
	return zeroVal, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field___Type_fields_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Type_fields_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]any,
) (bool, error) {
	if _, ok := rawArgs["includeDeprecated"]; !ok {
		var zeroVal bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2bool(ctx, tmp)
	}

	var zeroVal bool
	return zeroVal, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

func (ec *executionContext) _fieldMiddleware(ctx context.Context, obj any, next graphql.Resolver) any {
	fc := graphql.GetFieldContext(ctx)
	for _, d := range fc.Field.Directives {
		switch d.Name {
		case "acl":
			rawArgs := d.ArgumentMap(ec.Variables)
			args, err := ec.dir_acl_args(ctx, rawArgs)
			if err != nil {
				ec.Error(ctx, err)
				return nil
			}
			n := next
			next = func(ctx context.Context) (any, error) {
				if ec.directives.Acl == nil {
					return nil, errors.New("directive acl is not implemented")
				}
				return ec.directives.Acl(ctx, obj, n, args["permissions"].([]string))
			}
		case "auth":
			n := next
			next = func(ctx context.Context) (any, error) {
				if ec.directives.Auth == nil {
					return nil, errors.New("directive auth is not implemented")
				}
				return ec.directives.Auth(ctx, obj, n)
			}
		case "hasPermissions":
			rawArgs := d.ArgumentMap(ec.Variables)
			args, err := ec.dir_hasPermissions_args(ctx, rawArgs)
			if err != nil {
				ec.Error(ctx, err)
				return nil
			}
			n := next
			next = func(ctx context.Context) (any, error) {
				if ec.directives.HasPermissions == nil {
					return nil, errors.New("directive hasPermissions is not implemented")
				}
				return ec.directives.HasPermissions(ctx, obj, n, args["permissions"].([]string))
			}
		case "skipNoPermissions":
			rawArgs := d.ArgumentMap(ec.Variables)
			args, err := ec.dir_skipNoPermissions_args(ctx, rawArgs)
			if err != nil {
				ec.Error(ctx, err)
				return nil
			}
			n := next
			next = func(ctx context.Context) (any, error) {
				if ec.directives.SkipNoPermissions == nil {
					return nil, errors.New("directive skipNoPermissions is not implemented")
				}
				return ec.directives.SkipNoPermissions(ctx, obj, n, args["permissions"].([]string))
			}
		}
	}
	res, err := ec.ResolverMiddleware(ctx, next)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	return res
}

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Account_ID(ctx context.Context, field graphql.CollectedField, obj *models1.Account) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Account_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNID642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Account_ID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Account_status(ctx context.Context, field graphql.CollectedField, obj *models1.Account) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Account_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models1.ApproveStatus)
	fc.Result = res
	return ec.marshalNApproveStatus2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐApproveStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Account_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ApproveStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Account_statusMessage(ctx context.Context, field graphql.CollectedField, obj *models1.Account) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Account_statusMessage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatusMessage, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Account_statusMessage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Account_title(ctx context.Context, field graphql.CollectedField, obj *models1.Account) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Account_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Account_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Account_description(ctx context.Context, field graphql.CollectedField, obj *models1.Account) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Account_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Account_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Account_logoURI(ctx context.Context, field graphql.CollectedField, obj *models1.Account) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Account_logoURI(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LogoURI, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Account_logoURI(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Account_policyURI(ctx context.Context, field graphql.CollectedField, obj *models1.Account) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Account_policyURI(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PolicyURI, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Account_policyURI(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Account_termsOfServiceURI(ctx context.Context, field graphql.CollectedField, obj *models1.Account) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Account_termsOfServiceURI(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TermsOfServiceURI, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Account_termsOfServiceURI(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Account_clientURI(ctx context.Context, field graphql.CollectedField, obj *models1.Account) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Account_clientURI(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientURI, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Account_clientURI(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Account_contacts(ctx context.Context, field graphql.CollectedField, obj *models1.Account) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Account_contacts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Contacts, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Account_contacts(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Account_createdAt(ctx context.Context, field graphql.CollectedField, obj *models1.Account) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Account_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Account_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Account_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models1.Account) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Account_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Account_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models1.Account, models1.AccountEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountConnection_edges(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models1.Account, models1.AccountEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models1.AccountEdge)
	fc.Result = res
	return ec.marshalOAccountEdge2ᚕᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAccountEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_AccountEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_AccountEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccountEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountConnection_list(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models1.Account, models1.AccountEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountConnection_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models1.Account)
	fc.Result = res
	return ec.marshalOAccount2ᚕᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAccountᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountConnection_list(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_Account_ID(ctx, field)
			case "status":
				return ec.fieldContext_Account_status(ctx, field)
			case "statusMessage":
				return ec.fieldContext_Account_statusMessage(ctx, field)
			case "title":
				return ec.fieldContext_Account_title(ctx, field)
			case "description":
				return ec.fieldContext_Account_description(ctx, field)
			case "logoURI":
				return ec.fieldContext_Account_logoURI(ctx, field)
			case "policyURI":
				return ec.fieldContext_Account_policyURI(ctx, field)
			case "termsOfServiceURI":
				return ec.fieldContext_Account_termsOfServiceURI(ctx, field)
			case "clientURI":
				return ec.fieldContext_Account_clientURI(ctx, field)
			case "contacts":
				return ec.fieldContext_Account_contacts(ctx, field)
			case "createdAt":
				return ec.fieldContext_Account_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Account_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Account", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models1.Account, models1.AccountEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "total":
				return ec.fieldContext_PageInfo_total(ctx, field)
			case "page":
				return ec.fieldContext_PageInfo_page(ctx, field)
			case "count":
				return ec.fieldContext_PageInfo_count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountCreatePayload_clientMutationID(ctx context.Context, field graphql.CollectedField, obj *models1.AccountCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountCreatePayload_clientMutationID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientMutationID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountCreatePayload_clientMutationID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountCreatePayload_account(ctx context.Context, field graphql.CollectedField, obj *models1.AccountCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountCreatePayload_account(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Account, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.Account)
	fc.Result = res
	return ec.marshalNAccount2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountCreatePayload_account(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_Account_ID(ctx, field)
			case "status":
				return ec.fieldContext_Account_status(ctx, field)
			case "statusMessage":
				return ec.fieldContext_Account_statusMessage(ctx, field)
			case "title":
				return ec.fieldContext_Account_title(ctx, field)
			case "description":
				return ec.fieldContext_Account_description(ctx, field)
			case "logoURI":
				return ec.fieldContext_Account_logoURI(ctx, field)
			case "policyURI":
				return ec.fieldContext_Account_policyURI(ctx, field)
			case "termsOfServiceURI":
				return ec.fieldContext_Account_termsOfServiceURI(ctx, field)
			case "clientURI":
				return ec.fieldContext_Account_clientURI(ctx, field)
			case "contacts":
				return ec.fieldContext_Account_contacts(ctx, field)
			case "createdAt":
				return ec.fieldContext_Account_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Account_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Account", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountCreatePayload_owner(ctx context.Context, field graphql.CollectedField, obj *models1.AccountCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountCreatePayload_owner(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountCreatePayload_owner(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_User_ID(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "status":
				return ec.fieldContext_User_status(ctx, field)
			case "statusMessage":
				return ec.fieldContext_User_statusMessage(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *models1.AccountEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountEdge_node(ctx context.Context, field graphql.CollectedField, obj *models1.AccountEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models1.Account)
	fc.Result = res
	return ec.marshalOAccount2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_Account_ID(ctx, field)
			case "status":
				return ec.fieldContext_Account_status(ctx, field)
			case "statusMessage":
				return ec.fieldContext_Account_statusMessage(ctx, field)
			case "title":
				return ec.fieldContext_Account_title(ctx, field)
			case "description":
				return ec.fieldContext_Account_description(ctx, field)
			case "logoURI":
				return ec.fieldContext_Account_logoURI(ctx, field)
			case "policyURI":
				return ec.fieldContext_Account_policyURI(ctx, field)
			case "termsOfServiceURI":
				return ec.fieldContext_Account_termsOfServiceURI(ctx, field)
			case "clientURI":
				return ec.fieldContext_Account_clientURI(ctx, field)
			case "contacts":
				return ec.fieldContext_Account_contacts(ctx, field)
			case "createdAt":
				return ec.fieldContext_Account_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Account_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Account", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountPayload_clientMutationID(ctx context.Context, field graphql.CollectedField, obj *models1.AccountPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountPayload_clientMutationID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientMutationID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountPayload_clientMutationID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountPayload_accountID(ctx context.Context, field graphql.CollectedField, obj *models1.AccountPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountPayload_accountID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNID642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountPayload_accountID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountPayload_account(ctx context.Context, field graphql.CollectedField, obj *models1.AccountPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountPayload_account(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Account, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models1.Account)
	fc.Result = res
	return ec.marshalOAccount2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountPayload_account(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_Account_ID(ctx, field)
			case "status":
				return ec.fieldContext_Account_status(ctx, field)
			case "statusMessage":
				return ec.fieldContext_Account_statusMessage(ctx, field)
			case "title":
				return ec.fieldContext_Account_title(ctx, field)
			case "description":
				return ec.fieldContext_Account_description(ctx, field)
			case "logoURI":
				return ec.fieldContext_Account_logoURI(ctx, field)
			case "policyURI":
				return ec.fieldContext_Account_policyURI(ctx, field)
			case "termsOfServiceURI":
				return ec.fieldContext_Account_termsOfServiceURI(ctx, field)
			case "clientURI":
				return ec.fieldContext_Account_clientURI(ctx, field)
			case "contacts":
				return ec.fieldContext_Account_contacts(ctx, field)
			case "createdAt":
				return ec.fieldContext_Account_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Account_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Account", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdFormat_ID(ctx context.Context, field graphql.CollectedField, obj *models.AdFormat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdFormat_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNID642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdFormat_ID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdFormat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdFormat_codename(ctx context.Context, field graphql.CollectedField, obj *models.AdFormat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdFormat_codename(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Codename, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdFormat_codename(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdFormat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdFormat_type(ctx context.Context, field graphql.CollectedField, obj *models.AdFormat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdFormat_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdFormat_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdFormat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdFormat_title(ctx context.Context, field graphql.CollectedField, obj *models.AdFormat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdFormat_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdFormat_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdFormat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdFormat_description(ctx context.Context, field graphql.CollectedField, obj *models.AdFormat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdFormat_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdFormat_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdFormat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdFormat_active(ctx context.Context, field graphql.CollectedField, obj *models.AdFormat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdFormat_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models1.ActiveStatus)
	fc.Result = res
	return ec.marshalNActiveStatus2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐActiveStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdFormat_active(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdFormat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ActiveStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdFormat_width(ctx context.Context, field graphql.CollectedField, obj *models.AdFormat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdFormat_width(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Width, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdFormat_width(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdFormat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdFormat_height(ctx context.Context, field graphql.CollectedField, obj *models.AdFormat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdFormat_height(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Height, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdFormat_height(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdFormat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdFormat_minWidth(ctx context.Context, field graphql.CollectedField, obj *models.AdFormat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdFormat_minWidth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinWidth, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdFormat_minWidth(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdFormat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdFormat_minHeight(ctx context.Context, field graphql.CollectedField, obj *models.AdFormat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdFormat_minHeight(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinHeight, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdFormat_minHeight(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdFormat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdFormat_config(ctx context.Context, field graphql.CollectedField, obj *models.AdFormat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdFormat_config(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Config, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.NullableJSON)
	fc.Result = res
	return ec.marshalNNullableJSON2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋtypesᚐNullableJSON(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdFormat_config(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdFormat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullableJSON does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdFormat_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.AdFormat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdFormat_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdFormat_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdFormat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdFormat_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models.AdFormat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdFormat_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdFormat_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdFormat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdFormat_deletedAt(ctx context.Context, field graphql.CollectedField, obj *models.AdFormat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdFormat_deletedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdFormat_deletedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdFormat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdFormatConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models.AdFormat, models.AdFormatEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdFormatConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdFormatConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdFormatConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdFormatConnection_edges(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models.AdFormat, models.AdFormatEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdFormatConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.AdFormatEdge)
	fc.Result = res
	return ec.marshalNAdFormatEdge2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐAdFormatEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdFormatConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdFormatConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_AdFormatEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_AdFormatEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AdFormatEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdFormatConnection_list(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models.AdFormat, models.AdFormatEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdFormatConnection_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.AdFormat)
	fc.Result = res
	return ec.marshalNAdFormat2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐAdFormatᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdFormatConnection_list(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdFormatConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_AdFormat_ID(ctx, field)
			case "codename":
				return ec.fieldContext_AdFormat_codename(ctx, field)
			case "type":
				return ec.fieldContext_AdFormat_type(ctx, field)
			case "title":
				return ec.fieldContext_AdFormat_title(ctx, field)
			case "description":
				return ec.fieldContext_AdFormat_description(ctx, field)
			case "active":
				return ec.fieldContext_AdFormat_active(ctx, field)
			case "width":
				return ec.fieldContext_AdFormat_width(ctx, field)
			case "height":
				return ec.fieldContext_AdFormat_height(ctx, field)
			case "minWidth":
				return ec.fieldContext_AdFormat_minWidth(ctx, field)
			case "minHeight":
				return ec.fieldContext_AdFormat_minHeight(ctx, field)
			case "config":
				return ec.fieldContext_AdFormat_config(ctx, field)
			case "createdAt":
				return ec.fieldContext_AdFormat_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_AdFormat_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_AdFormat_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AdFormat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdFormatConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models.AdFormat, models.AdFormatEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdFormatConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdFormatConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdFormatConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "total":
				return ec.fieldContext_PageInfo_total(ctx, field)
			case "page":
				return ec.fieldContext_PageInfo_page(ctx, field)
			case "count":
				return ec.fieldContext_PageInfo_count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdFormatEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *models.AdFormatEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdFormatEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdFormatEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdFormatEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdFormatEdge_node(ctx context.Context, field graphql.CollectedField, obj *models.AdFormatEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdFormatEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.AdFormat)
	fc.Result = res
	return ec.marshalNAdFormat2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐAdFormat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdFormatEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdFormatEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_AdFormat_ID(ctx, field)
			case "codename":
				return ec.fieldContext_AdFormat_codename(ctx, field)
			case "type":
				return ec.fieldContext_AdFormat_type(ctx, field)
			case "title":
				return ec.fieldContext_AdFormat_title(ctx, field)
			case "description":
				return ec.fieldContext_AdFormat_description(ctx, field)
			case "active":
				return ec.fieldContext_AdFormat_active(ctx, field)
			case "width":
				return ec.fieldContext_AdFormat_width(ctx, field)
			case "height":
				return ec.fieldContext_AdFormat_height(ctx, field)
			case "minWidth":
				return ec.fieldContext_AdFormat_minWidth(ctx, field)
			case "minHeight":
				return ec.fieldContext_AdFormat_minHeight(ctx, field)
			case "config":
				return ec.fieldContext_AdFormat_config(ctx, field)
			case "createdAt":
				return ec.fieldContext_AdFormat_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_AdFormat_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_AdFormat_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AdFormat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdFormatPayload_clientMutationID(ctx context.Context, field graphql.CollectedField, obj *models.AdFormatPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdFormatPayload_clientMutationID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientMutationID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdFormatPayload_clientMutationID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdFormatPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdFormatPayload_formatID(ctx context.Context, field graphql.CollectedField, obj *models.AdFormatPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdFormatPayload_formatID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FormatID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNID642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdFormatPayload_formatID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdFormatPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdFormatPayload_format(ctx context.Context, field graphql.CollectedField, obj *models.AdFormatPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdFormatPayload_format(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Format, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.AdFormat)
	fc.Result = res
	return ec.marshalNAdFormat2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐAdFormat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdFormatPayload_format(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdFormatPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_AdFormat_ID(ctx, field)
			case "codename":
				return ec.fieldContext_AdFormat_codename(ctx, field)
			case "type":
				return ec.fieldContext_AdFormat_type(ctx, field)
			case "title":
				return ec.fieldContext_AdFormat_title(ctx, field)
			case "description":
				return ec.fieldContext_AdFormat_description(ctx, field)
			case "active":
				return ec.fieldContext_AdFormat_active(ctx, field)
			case "width":
				return ec.fieldContext_AdFormat_width(ctx, field)
			case "height":
				return ec.fieldContext_AdFormat_height(ctx, field)
			case "minWidth":
				return ec.fieldContext_AdFormat_minWidth(ctx, field)
			case "minHeight":
				return ec.fieldContext_AdFormat_minHeight(ctx, field)
			case "config":
				return ec.fieldContext_AdFormat_config(ctx, field)
			case "createdAt":
				return ec.fieldContext_AdFormat_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_AdFormat_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_AdFormat_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AdFormat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Application_ID(ctx context.Context, field graphql.CollectedField, obj *models.Application) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Application_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNID642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Application_ID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Application",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Application_accountID(ctx context.Context, field graphql.CollectedField, obj *models.Application) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Application_accountID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNID642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Application_accountID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Application",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Application_creatorID(ctx context.Context, field graphql.CollectedField, obj *models.Application) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Application_creatorID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatorID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNID642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Application_creatorID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Application",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Application_title(ctx context.Context, field graphql.CollectedField, obj *models.Application) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Application_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Application_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Application",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Application_description(ctx context.Context, field graphql.CollectedField, obj *models.Application) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Application_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Application_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Application",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Application_URI(ctx context.Context, field graphql.CollectedField, obj *models.Application) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Application_URI(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URI, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Application_URI(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Application",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Application_type(ctx context.Context, field graphql.CollectedField, obj *models.Application) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Application_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.ApplicationType)
	fc.Result = res
	return ec.marshalNApplicationType2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐApplicationType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Application_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Application",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ApplicationType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Application_platform(ctx context.Context, field graphql.CollectedField, obj *models.Application) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Application_platform(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Platform, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.PlatformType)
	fc.Result = res
	return ec.marshalNPlatformType2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐPlatformType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Application_platform(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Application",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PlatformType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Application_premium(ctx context.Context, field graphql.CollectedField, obj *models.Application) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Application_premium(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Premium, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Application_premium(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Application",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Application_status(ctx context.Context, field graphql.CollectedField, obj *models.Application) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Application_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models1.ApproveStatus)
	fc.Result = res
	return ec.marshalNApproveStatus2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐApproveStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Application_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Application",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ApproveStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Application_active(ctx context.Context, field graphql.CollectedField, obj *models.Application) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Application_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models1.ActiveStatus)
	fc.Result = res
	return ec.marshalNActiveStatus2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐActiveStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Application_active(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Application",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ActiveStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Application_private(ctx context.Context, field graphql.CollectedField, obj *models.Application) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Application_private(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Private, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.PrivateStatus)
	fc.Result = res
	return ec.marshalNPrivateStatus2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐPrivateStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Application_private(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Application",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PrivateStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Application_categories(ctx context.Context, field graphql.CollectedField, obj *models.Application) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Application_categories(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Categories, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]int)
	fc.Result = res
	return ec.marshalOInt2ᚕintᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Application_categories(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Application",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Application_revenueShare(ctx context.Context, field graphql.CollectedField, obj *models.Application) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Application_revenueShare(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RevenueShare, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Application_revenueShare(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Application",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Application_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.Application) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Application_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Application_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Application",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Application_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models.Application) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Application_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Application_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Application",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Application_deletedAt(ctx context.Context, field graphql.CollectedField, obj *models.Application) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Application_deletedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Application_deletedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Application",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApplicationConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models.Application, models.ApplicationEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApplicationConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApplicationConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApplicationConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApplicationConnection_edges(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models.Application, models.ApplicationEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApplicationConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.ApplicationEdge)
	fc.Result = res
	return ec.marshalNApplicationEdge2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐApplicationEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApplicationConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApplicationConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_ApplicationEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_ApplicationEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApplicationEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApplicationConnection_list(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models.Application, models.ApplicationEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApplicationConnection_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.Application)
	fc.Result = res
	return ec.marshalNApplication2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐApplicationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApplicationConnection_list(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApplicationConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_Application_ID(ctx, field)
			case "accountID":
				return ec.fieldContext_Application_accountID(ctx, field)
			case "creatorID":
				return ec.fieldContext_Application_creatorID(ctx, field)
			case "title":
				return ec.fieldContext_Application_title(ctx, field)
			case "description":
				return ec.fieldContext_Application_description(ctx, field)
			case "URI":
				return ec.fieldContext_Application_URI(ctx, field)
			case "type":
				return ec.fieldContext_Application_type(ctx, field)
			case "platform":
				return ec.fieldContext_Application_platform(ctx, field)
			case "premium":
				return ec.fieldContext_Application_premium(ctx, field)
			case "status":
				return ec.fieldContext_Application_status(ctx, field)
			case "active":
				return ec.fieldContext_Application_active(ctx, field)
			case "private":
				return ec.fieldContext_Application_private(ctx, field)
			case "categories":
				return ec.fieldContext_Application_categories(ctx, field)
			case "revenueShare":
				return ec.fieldContext_Application_revenueShare(ctx, field)
			case "createdAt":
				return ec.fieldContext_Application_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Application_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Application_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Application", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApplicationConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models.Application, models.ApplicationEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApplicationConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApplicationConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApplicationConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "total":
				return ec.fieldContext_PageInfo_total(ctx, field)
			case "page":
				return ec.fieldContext_PageInfo_page(ctx, field)
			case "count":
				return ec.fieldContext_PageInfo_count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApplicationEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *models.ApplicationEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApplicationEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApplicationEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApplicationEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApplicationEdge_node(ctx context.Context, field graphql.CollectedField, obj *models.ApplicationEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApplicationEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Application)
	fc.Result = res
	return ec.marshalNApplication2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐApplication(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApplicationEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApplicationEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_Application_ID(ctx, field)
			case "accountID":
				return ec.fieldContext_Application_accountID(ctx, field)
			case "creatorID":
				return ec.fieldContext_Application_creatorID(ctx, field)
			case "title":
				return ec.fieldContext_Application_title(ctx, field)
			case "description":
				return ec.fieldContext_Application_description(ctx, field)
			case "URI":
				return ec.fieldContext_Application_URI(ctx, field)
			case "type":
				return ec.fieldContext_Application_type(ctx, field)
			case "platform":
				return ec.fieldContext_Application_platform(ctx, field)
			case "premium":
				return ec.fieldContext_Application_premium(ctx, field)
			case "status":
				return ec.fieldContext_Application_status(ctx, field)
			case "active":
				return ec.fieldContext_Application_active(ctx, field)
			case "private":
				return ec.fieldContext_Application_private(ctx, field)
			case "categories":
				return ec.fieldContext_Application_categories(ctx, field)
			case "revenueShare":
				return ec.fieldContext_Application_revenueShare(ctx, field)
			case "createdAt":
				return ec.fieldContext_Application_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Application_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Application_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Application", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApplicationPayload_clientMutationID(ctx context.Context, field graphql.CollectedField, obj *models.ApplicationPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApplicationPayload_clientMutationID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientMutationID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApplicationPayload_clientMutationID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApplicationPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApplicationPayload_applicationID(ctx context.Context, field graphql.CollectedField, obj *models.ApplicationPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApplicationPayload_applicationID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApplicationID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNID642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApplicationPayload_applicationID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApplicationPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApplicationPayload_application(ctx context.Context, field graphql.CollectedField, obj *models.ApplicationPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApplicationPayload_application(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Application, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Application)
	fc.Result = res
	return ec.marshalNApplication2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐApplication(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApplicationPayload_application(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApplicationPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_Application_ID(ctx, field)
			case "accountID":
				return ec.fieldContext_Application_accountID(ctx, field)
			case "creatorID":
				return ec.fieldContext_Application_creatorID(ctx, field)
			case "title":
				return ec.fieldContext_Application_title(ctx, field)
			case "description":
				return ec.fieldContext_Application_description(ctx, field)
			case "URI":
				return ec.fieldContext_Application_URI(ctx, field)
			case "type":
				return ec.fieldContext_Application_type(ctx, field)
			case "platform":
				return ec.fieldContext_Application_platform(ctx, field)
			case "premium":
				return ec.fieldContext_Application_premium(ctx, field)
			case "status":
				return ec.fieldContext_Application_status(ctx, field)
			case "active":
				return ec.fieldContext_Application_active(ctx, field)
			case "private":
				return ec.fieldContext_Application_private(ctx, field)
			case "categories":
				return ec.fieldContext_Application_categories(ctx, field)
			case "revenueShare":
				return ec.fieldContext_Application_revenueShare(ctx, field)
			case "createdAt":
				return ec.fieldContext_Application_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Application_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Application_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Application", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthClient_ID(ctx context.Context, field graphql.CollectedField, obj *models1.AuthClient) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthClient_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthClient_ID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthClient",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthClient_accountID(ctx context.Context, field graphql.CollectedField, obj *models1.AuthClient) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthClient_accountID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNID642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthClient_accountID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthClient",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthClient_userID(ctx context.Context, field graphql.CollectedField, obj *models1.AuthClient) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthClient_userID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNID642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthClient_userID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthClient",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthClient_title(ctx context.Context, field graphql.CollectedField, obj *models1.AuthClient) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthClient_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthClient_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthClient",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthClient_secret(ctx context.Context, field graphql.CollectedField, obj *models1.AuthClient) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthClient_secret(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Secret, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthClient_secret(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthClient",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthClient_redirectURIs(ctx context.Context, field graphql.CollectedField, obj *models1.AuthClient) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthClient_redirectURIs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RedirectURIs, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthClient_redirectURIs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthClient",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthClient_grantTypes(ctx context.Context, field graphql.CollectedField, obj *models1.AuthClient) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthClient_grantTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GrantTypes, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthClient_grantTypes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthClient",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthClient_responseTypes(ctx context.Context, field graphql.CollectedField, obj *models1.AuthClient) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthClient_responseTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResponseTypes, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthClient_responseTypes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthClient",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthClient_scope(ctx context.Context, field graphql.CollectedField, obj *models1.AuthClient) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthClient_scope(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Scope, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthClient_scope(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthClient",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthClient_audience(ctx context.Context, field graphql.CollectedField, obj *models1.AuthClient) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthClient_audience(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Audience, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthClient_audience(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthClient",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthClient_subjectType(ctx context.Context, field graphql.CollectedField, obj *models1.AuthClient) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthClient_subjectType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubjectType, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthClient_subjectType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthClient",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthClient_allowedCORSOrigins(ctx context.Context, field graphql.CollectedField, obj *models1.AuthClient) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthClient_allowedCORSOrigins(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllowedCORSOrigins, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthClient_allowedCORSOrigins(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthClient",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthClient_public(ctx context.Context, field graphql.CollectedField, obj *models1.AuthClient) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthClient_public(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Public, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthClient_public(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthClient",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthClient_expiresAt(ctx context.Context, field graphql.CollectedField, obj *models1.AuthClient) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthClient_expiresAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpiresAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthClient_expiresAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthClient",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthClient_createdAt(ctx context.Context, field graphql.CollectedField, obj *models1.AuthClient) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthClient_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthClient_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthClient",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthClient_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models1.AuthClient) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthClient_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthClient_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthClient",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthClient_deletedAt(ctx context.Context, field graphql.CollectedField, obj *models1.AuthClient) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthClient_deletedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthClient_deletedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthClient",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthClientConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models1.AuthClient, models1.AuthClientEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthClientConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthClientConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthClientConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthClientConnection_edges(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models1.AuthClient, models1.AuthClientEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthClientConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models1.AuthClientEdge)
	fc.Result = res
	return ec.marshalOAuthClientEdge2ᚕᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAuthClientEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthClientConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthClientConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_AuthClientEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_AuthClientEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AuthClientEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthClientConnection_list(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models1.AuthClient, models1.AuthClientEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthClientConnection_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models1.AuthClient)
	fc.Result = res
	return ec.marshalOAuthClient2ᚕᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAuthClientᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthClientConnection_list(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthClientConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_AuthClient_ID(ctx, field)
			case "accountID":
				return ec.fieldContext_AuthClient_accountID(ctx, field)
			case "userID":
				return ec.fieldContext_AuthClient_userID(ctx, field)
			case "title":
				return ec.fieldContext_AuthClient_title(ctx, field)
			case "secret":
				return ec.fieldContext_AuthClient_secret(ctx, field)
			case "redirectURIs":
				return ec.fieldContext_AuthClient_redirectURIs(ctx, field)
			case "grantTypes":
				return ec.fieldContext_AuthClient_grantTypes(ctx, field)
			case "responseTypes":
				return ec.fieldContext_AuthClient_responseTypes(ctx, field)
			case "scope":
				return ec.fieldContext_AuthClient_scope(ctx, field)
			case "audience":
				return ec.fieldContext_AuthClient_audience(ctx, field)
			case "subjectType":
				return ec.fieldContext_AuthClient_subjectType(ctx, field)
			case "allowedCORSOrigins":
				return ec.fieldContext_AuthClient_allowedCORSOrigins(ctx, field)
			case "public":
				return ec.fieldContext_AuthClient_public(ctx, field)
			case "expiresAt":
				return ec.fieldContext_AuthClient_expiresAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_AuthClient_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_AuthClient_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_AuthClient_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AuthClient", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthClientConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models1.AuthClient, models1.AuthClientEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthClientConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthClientConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthClientConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "total":
				return ec.fieldContext_PageInfo_total(ctx, field)
			case "page":
				return ec.fieldContext_PageInfo_page(ctx, field)
			case "count":
				return ec.fieldContext_PageInfo_count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthClientEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *models1.AuthClientEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthClientEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthClientEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthClientEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthClientEdge_node(ctx context.Context, field graphql.CollectedField, obj *models1.AuthClientEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthClientEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models1.AuthClient)
	fc.Result = res
	return ec.marshalOAuthClient2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAuthClient(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthClientEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthClientEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_AuthClient_ID(ctx, field)
			case "accountID":
				return ec.fieldContext_AuthClient_accountID(ctx, field)
			case "userID":
				return ec.fieldContext_AuthClient_userID(ctx, field)
			case "title":
				return ec.fieldContext_AuthClient_title(ctx, field)
			case "secret":
				return ec.fieldContext_AuthClient_secret(ctx, field)
			case "redirectURIs":
				return ec.fieldContext_AuthClient_redirectURIs(ctx, field)
			case "grantTypes":
				return ec.fieldContext_AuthClient_grantTypes(ctx, field)
			case "responseTypes":
				return ec.fieldContext_AuthClient_responseTypes(ctx, field)
			case "scope":
				return ec.fieldContext_AuthClient_scope(ctx, field)
			case "audience":
				return ec.fieldContext_AuthClient_audience(ctx, field)
			case "subjectType":
				return ec.fieldContext_AuthClient_subjectType(ctx, field)
			case "allowedCORSOrigins":
				return ec.fieldContext_AuthClient_allowedCORSOrigins(ctx, field)
			case "public":
				return ec.fieldContext_AuthClient_public(ctx, field)
			case "expiresAt":
				return ec.fieldContext_AuthClient_expiresAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_AuthClient_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_AuthClient_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_AuthClient_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AuthClient", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthClientPayload_clientMutationID(ctx context.Context, field graphql.CollectedField, obj *models1.AuthClientPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthClientPayload_clientMutationID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientMutationID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthClientPayload_clientMutationID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthClientPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthClientPayload_authClientID(ctx context.Context, field graphql.CollectedField, obj *models1.AuthClientPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthClientPayload_authClientID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthClientID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthClientPayload_authClientID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthClientPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthClientPayload_authClient(ctx context.Context, field graphql.CollectedField, obj *models1.AuthClientPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthClientPayload_authClient(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthClient, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models1.AuthClient)
	fc.Result = res
	return ec.marshalOAuthClient2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAuthClient(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthClientPayload_authClient(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthClientPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_AuthClient_ID(ctx, field)
			case "accountID":
				return ec.fieldContext_AuthClient_accountID(ctx, field)
			case "userID":
				return ec.fieldContext_AuthClient_userID(ctx, field)
			case "title":
				return ec.fieldContext_AuthClient_title(ctx, field)
			case "secret":
				return ec.fieldContext_AuthClient_secret(ctx, field)
			case "redirectURIs":
				return ec.fieldContext_AuthClient_redirectURIs(ctx, field)
			case "grantTypes":
				return ec.fieldContext_AuthClient_grantTypes(ctx, field)
			case "responseTypes":
				return ec.fieldContext_AuthClient_responseTypes(ctx, field)
			case "scope":
				return ec.fieldContext_AuthClient_scope(ctx, field)
			case "audience":
				return ec.fieldContext_AuthClient_audience(ctx, field)
			case "subjectType":
				return ec.fieldContext_AuthClient_subjectType(ctx, field)
			case "allowedCORSOrigins":
				return ec.fieldContext_AuthClient_allowedCORSOrigins(ctx, field)
			case "public":
				return ec.fieldContext_AuthClient_public(ctx, field)
			case "expiresAt":
				return ec.fieldContext_AuthClient_expiresAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_AuthClient_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_AuthClient_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_AuthClient_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AuthClient", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Browser_ID(ctx context.Context, field graphql.CollectedField, obj *models.Browser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Browser_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNID642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Browser_ID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Browser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Browser_name(ctx context.Context, field graphql.CollectedField, obj *models.Browser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Browser_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Browser_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Browser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Browser_description(ctx context.Context, field graphql.CollectedField, obj *models.Browser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Browser_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Browser_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Browser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Browser_version(ctx context.Context, field graphql.CollectedField, obj *models.Browser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Browser_version(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Browser_version(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Browser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Browser_yearRelease(ctx context.Context, field graphql.CollectedField, obj *models.Browser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Browser_yearRelease(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YearRelease, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Browser_yearRelease(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Browser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Browser_yearEndSupport(ctx context.Context, field graphql.CollectedField, obj *models.Browser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Browser_yearEndSupport(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YearEndSupport, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Browser_yearEndSupport(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Browser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Browser_active(ctx context.Context, field graphql.CollectedField, obj *models.Browser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Browser_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models1.ActiveStatus)
	fc.Result = res
	return ec.marshalNActiveStatus2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐActiveStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Browser_active(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Browser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ActiveStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Browser_matchNameExp(ctx context.Context, field graphql.CollectedField, obj *models.Browser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Browser_matchNameExp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MatchNameExp, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Browser_matchNameExp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Browser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Browser_matchUserAgentExp(ctx context.Context, field graphql.CollectedField, obj *models.Browser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Browser_matchUserAgentExp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MatchUserAgentExp, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Browser_matchUserAgentExp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Browser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Browser_matchVersionMinExp(ctx context.Context, field graphql.CollectedField, obj *models.Browser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Browser_matchVersionMinExp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MatchVersionMinExp, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Browser_matchVersionMinExp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Browser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Browser_matchVersionMaxExp(ctx context.Context, field graphql.CollectedField, obj *models.Browser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Browser_matchVersionMaxExp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MatchVersionMaxExp, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Browser_matchVersionMaxExp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Browser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Browser_parentID(ctx context.Context, field graphql.CollectedField, obj *models.Browser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Browser_parentID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNID642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Browser_parentID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Browser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Browser_parent(ctx context.Context, field graphql.CollectedField, obj *models.Browser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Browser_parent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Parent, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Browser)
	fc.Result = res
	return ec.marshalOBrowser2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐBrowser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Browser_parent(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Browser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_Browser_ID(ctx, field)
			case "name":
				return ec.fieldContext_Browser_name(ctx, field)
			case "description":
				return ec.fieldContext_Browser_description(ctx, field)
			case "version":
				return ec.fieldContext_Browser_version(ctx, field)
			case "yearRelease":
				return ec.fieldContext_Browser_yearRelease(ctx, field)
			case "yearEndSupport":
				return ec.fieldContext_Browser_yearEndSupport(ctx, field)
			case "active":
				return ec.fieldContext_Browser_active(ctx, field)
			case "matchNameExp":
				return ec.fieldContext_Browser_matchNameExp(ctx, field)
			case "matchUserAgentExp":
				return ec.fieldContext_Browser_matchUserAgentExp(ctx, field)
			case "matchVersionMinExp":
				return ec.fieldContext_Browser_matchVersionMinExp(ctx, field)
			case "matchVersionMaxExp":
				return ec.fieldContext_Browser_matchVersionMaxExp(ctx, field)
			case "parentID":
				return ec.fieldContext_Browser_parentID(ctx, field)
			case "parent":
				return ec.fieldContext_Browser_parent(ctx, field)
			case "versions":
				return ec.fieldContext_Browser_versions(ctx, field)
			case "createdAt":
				return ec.fieldContext_Browser_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Browser_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Browser_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Browser", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Browser_versions(ctx context.Context, field graphql.CollectedField, obj *models.Browser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Browser_versions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Versions, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Browser)
	fc.Result = res
	return ec.marshalOBrowser2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐBrowserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Browser_versions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Browser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_Browser_ID(ctx, field)
			case "name":
				return ec.fieldContext_Browser_name(ctx, field)
			case "description":
				return ec.fieldContext_Browser_description(ctx, field)
			case "version":
				return ec.fieldContext_Browser_version(ctx, field)
			case "yearRelease":
				return ec.fieldContext_Browser_yearRelease(ctx, field)
			case "yearEndSupport":
				return ec.fieldContext_Browser_yearEndSupport(ctx, field)
			case "active":
				return ec.fieldContext_Browser_active(ctx, field)
			case "matchNameExp":
				return ec.fieldContext_Browser_matchNameExp(ctx, field)
			case "matchUserAgentExp":
				return ec.fieldContext_Browser_matchUserAgentExp(ctx, field)
			case "matchVersionMinExp":
				return ec.fieldContext_Browser_matchVersionMinExp(ctx, field)
			case "matchVersionMaxExp":
				return ec.fieldContext_Browser_matchVersionMaxExp(ctx, field)
			case "parentID":
				return ec.fieldContext_Browser_parentID(ctx, field)
			case "parent":
				return ec.fieldContext_Browser_parent(ctx, field)
			case "versions":
				return ec.fieldContext_Browser_versions(ctx, field)
			case "createdAt":
				return ec.fieldContext_Browser_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Browser_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Browser_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Browser", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Browser_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.Browser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Browser_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Browser_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Browser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Browser_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models.Browser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Browser_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Browser_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Browser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Browser_deletedAt(ctx context.Context, field graphql.CollectedField, obj *models.Browser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Browser_deletedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Browser_deletedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Browser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BrowserConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models.Browser, models.BrowserEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BrowserConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BrowserConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BrowserConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BrowserConnection_edges(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models.Browser, models.BrowserEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BrowserConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.BrowserEdge)
	fc.Result = res
	return ec.marshalNBrowserEdge2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐBrowserEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BrowserConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BrowserConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_BrowserEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_BrowserEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BrowserEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BrowserConnection_list(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models.Browser, models.BrowserEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BrowserConnection_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.Browser)
	fc.Result = res
	return ec.marshalNBrowser2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐBrowserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BrowserConnection_list(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BrowserConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_Browser_ID(ctx, field)
			case "name":
				return ec.fieldContext_Browser_name(ctx, field)
			case "description":
				return ec.fieldContext_Browser_description(ctx, field)
			case "version":
				return ec.fieldContext_Browser_version(ctx, field)
			case "yearRelease":
				return ec.fieldContext_Browser_yearRelease(ctx, field)
			case "yearEndSupport":
				return ec.fieldContext_Browser_yearEndSupport(ctx, field)
			case "active":
				return ec.fieldContext_Browser_active(ctx, field)
			case "matchNameExp":
				return ec.fieldContext_Browser_matchNameExp(ctx, field)
			case "matchUserAgentExp":
				return ec.fieldContext_Browser_matchUserAgentExp(ctx, field)
			case "matchVersionMinExp":
				return ec.fieldContext_Browser_matchVersionMinExp(ctx, field)
			case "matchVersionMaxExp":
				return ec.fieldContext_Browser_matchVersionMaxExp(ctx, field)
			case "parentID":
				return ec.fieldContext_Browser_parentID(ctx, field)
			case "parent":
				return ec.fieldContext_Browser_parent(ctx, field)
			case "versions":
				return ec.fieldContext_Browser_versions(ctx, field)
			case "createdAt":
				return ec.fieldContext_Browser_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Browser_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Browser_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Browser", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BrowserConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models.Browser, models.BrowserEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BrowserConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BrowserConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BrowserConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "total":
				return ec.fieldContext_PageInfo_total(ctx, field)
			case "page":
				return ec.fieldContext_PageInfo_page(ctx, field)
			case "count":
				return ec.fieldContext_PageInfo_count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BrowserEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *models.BrowserEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BrowserEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BrowserEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BrowserEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BrowserEdge_node(ctx context.Context, field graphql.CollectedField, obj *models.BrowserEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BrowserEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Browser)
	fc.Result = res
	return ec.marshalNBrowser2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐBrowser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BrowserEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BrowserEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_Browser_ID(ctx, field)
			case "name":
				return ec.fieldContext_Browser_name(ctx, field)
			case "description":
				return ec.fieldContext_Browser_description(ctx, field)
			case "version":
				return ec.fieldContext_Browser_version(ctx, field)
			case "yearRelease":
				return ec.fieldContext_Browser_yearRelease(ctx, field)
			case "yearEndSupport":
				return ec.fieldContext_Browser_yearEndSupport(ctx, field)
			case "active":
				return ec.fieldContext_Browser_active(ctx, field)
			case "matchNameExp":
				return ec.fieldContext_Browser_matchNameExp(ctx, field)
			case "matchUserAgentExp":
				return ec.fieldContext_Browser_matchUserAgentExp(ctx, field)
			case "matchVersionMinExp":
				return ec.fieldContext_Browser_matchVersionMinExp(ctx, field)
			case "matchVersionMaxExp":
				return ec.fieldContext_Browser_matchVersionMaxExp(ctx, field)
			case "parentID":
				return ec.fieldContext_Browser_parentID(ctx, field)
			case "parent":
				return ec.fieldContext_Browser_parent(ctx, field)
			case "versions":
				return ec.fieldContext_Browser_versions(ctx, field)
			case "createdAt":
				return ec.fieldContext_Browser_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Browser_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Browser_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Browser", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BrowserPayload_clientMutationID(ctx context.Context, field graphql.CollectedField, obj *models.BrowserPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BrowserPayload_clientMutationID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientMutationID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BrowserPayload_clientMutationID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BrowserPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BrowserPayload_browserID(ctx context.Context, field graphql.CollectedField, obj *models.BrowserPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BrowserPayload_browserID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrowserID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNID642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BrowserPayload_browserID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BrowserPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BrowserPayload_browser(ctx context.Context, field graphql.CollectedField, obj *models.BrowserPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BrowserPayload_browser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Browser, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Browser)
	fc.Result = res
	return ec.marshalNBrowser2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐBrowser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BrowserPayload_browser(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BrowserPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_Browser_ID(ctx, field)
			case "name":
				return ec.fieldContext_Browser_name(ctx, field)
			case "description":
				return ec.fieldContext_Browser_description(ctx, field)
			case "version":
				return ec.fieldContext_Browser_version(ctx, field)
			case "yearRelease":
				return ec.fieldContext_Browser_yearRelease(ctx, field)
			case "yearEndSupport":
				return ec.fieldContext_Browser_yearEndSupport(ctx, field)
			case "active":
				return ec.fieldContext_Browser_active(ctx, field)
			case "matchNameExp":
				return ec.fieldContext_Browser_matchNameExp(ctx, field)
			case "matchUserAgentExp":
				return ec.fieldContext_Browser_matchUserAgentExp(ctx, field)
			case "matchVersionMinExp":
				return ec.fieldContext_Browser_matchVersionMinExp(ctx, field)
			case "matchVersionMaxExp":
				return ec.fieldContext_Browser_matchVersionMaxExp(ctx, field)
			case "parentID":
				return ec.fieldContext_Browser_parentID(ctx, field)
			case "parent":
				return ec.fieldContext_Browser_parent(ctx, field)
			case "versions":
				return ec.fieldContext_Browser_versions(ctx, field)
			case "createdAt":
				return ec.fieldContext_Browser_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Browser_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Browser_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Browser", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Category_ID(ctx context.Context, field graphql.CollectedField, obj *models.Category) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Category_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNID642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Category_ID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Category",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Category_name(ctx context.Context, field graphql.CollectedField, obj *models.Category) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Category_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Category_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Category",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Category_description(ctx context.Context, field graphql.CollectedField, obj *models.Category) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Category_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Category_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Category",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Category_IABCode(ctx context.Context, field graphql.CollectedField, obj *models.Category) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Category_IABCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IABCode, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Category_IABCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Category",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Category_parentID(ctx context.Context, field graphql.CollectedField, obj *models.Category) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Category_parentID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint64)
	fc.Result = res
	return ec.marshalOID642ᚖuint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Category_parentID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Category",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Category_parent(ctx context.Context, field graphql.CollectedField, obj *models.Category) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Category_parent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Parent, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Category)
	fc.Result = res
	return ec.marshalOCategory2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐCategory(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Category_parent(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Category",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_Category_ID(ctx, field)
			case "name":
				return ec.fieldContext_Category_name(ctx, field)
			case "description":
				return ec.fieldContext_Category_description(ctx, field)
			case "IABCode":
				return ec.fieldContext_Category_IABCode(ctx, field)
			case "parentID":
				return ec.fieldContext_Category_parentID(ctx, field)
			case "parent":
				return ec.fieldContext_Category_parent(ctx, field)
			case "childrens":
				return ec.fieldContext_Category_childrens(ctx, field)
			case "position":
				return ec.fieldContext_Category_position(ctx, field)
			case "active":
				return ec.fieldContext_Category_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_Category_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Category_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Category_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Category", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Category_childrens(ctx context.Context, field graphql.CollectedField, obj *models.Category) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Category_childrens(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Category().Childrens(rctx, obj)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.Category)
	fc.Result = res
	return ec.marshalNCategory2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐCategoryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Category_childrens(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Category",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_Category_ID(ctx, field)
			case "name":
				return ec.fieldContext_Category_name(ctx, field)
			case "description":
				return ec.fieldContext_Category_description(ctx, field)
			case "IABCode":
				return ec.fieldContext_Category_IABCode(ctx, field)
			case "parentID":
				return ec.fieldContext_Category_parentID(ctx, field)
			case "parent":
				return ec.fieldContext_Category_parent(ctx, field)
			case "childrens":
				return ec.fieldContext_Category_childrens(ctx, field)
			case "position":
				return ec.fieldContext_Category_position(ctx, field)
			case "active":
				return ec.fieldContext_Category_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_Category_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Category_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Category_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Category", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Category_position(ctx context.Context, field graphql.CollectedField, obj *models.Category) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Category_position(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Position, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Category_position(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Category",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Category_active(ctx context.Context, field graphql.CollectedField, obj *models.Category) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Category_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models1.ActiveStatus)
	fc.Result = res
	return ec.marshalNActiveStatus2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐActiveStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Category_active(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Category",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ActiveStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Category_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.Category) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Category_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Category_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Category",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Category_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models.Category) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Category_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Category_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Category",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Category_deletedAt(ctx context.Context, field graphql.CollectedField, obj *models.Category) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Category_deletedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Category_deletedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Category",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CategoryConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models.Category, models.CategoryEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CategoryConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CategoryConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CategoryConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CategoryConnection_edges(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models.Category, models.CategoryEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CategoryConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.CategoryEdge)
	fc.Result = res
	return ec.marshalNCategoryEdge2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐCategoryEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CategoryConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CategoryConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_CategoryEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_CategoryEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CategoryEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CategoryConnection_list(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models.Category, models.CategoryEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CategoryConnection_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.Category)
	fc.Result = res
	return ec.marshalNCategory2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐCategoryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CategoryConnection_list(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CategoryConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_Category_ID(ctx, field)
			case "name":
				return ec.fieldContext_Category_name(ctx, field)
			case "description":
				return ec.fieldContext_Category_description(ctx, field)
			case "IABCode":
				return ec.fieldContext_Category_IABCode(ctx, field)
			case "parentID":
				return ec.fieldContext_Category_parentID(ctx, field)
			case "parent":
				return ec.fieldContext_Category_parent(ctx, field)
			case "childrens":
				return ec.fieldContext_Category_childrens(ctx, field)
			case "position":
				return ec.fieldContext_Category_position(ctx, field)
			case "active":
				return ec.fieldContext_Category_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_Category_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Category_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Category_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Category", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CategoryConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models.Category, models.CategoryEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CategoryConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CategoryConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CategoryConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "total":
				return ec.fieldContext_PageInfo_total(ctx, field)
			case "page":
				return ec.fieldContext_PageInfo_page(ctx, field)
			case "count":
				return ec.fieldContext_PageInfo_count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CategoryEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *models.CategoryEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CategoryEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CategoryEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CategoryEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CategoryEdge_node(ctx context.Context, field graphql.CollectedField, obj *models.CategoryEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CategoryEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Category)
	fc.Result = res
	return ec.marshalNCategory2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐCategory(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CategoryEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CategoryEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_Category_ID(ctx, field)
			case "name":
				return ec.fieldContext_Category_name(ctx, field)
			case "description":
				return ec.fieldContext_Category_description(ctx, field)
			case "IABCode":
				return ec.fieldContext_Category_IABCode(ctx, field)
			case "parentID":
				return ec.fieldContext_Category_parentID(ctx, field)
			case "parent":
				return ec.fieldContext_Category_parent(ctx, field)
			case "childrens":
				return ec.fieldContext_Category_childrens(ctx, field)
			case "position":
				return ec.fieldContext_Category_position(ctx, field)
			case "active":
				return ec.fieldContext_Category_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_Category_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Category_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Category_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Category", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CategoryPayload_clientMutationID(ctx context.Context, field graphql.CollectedField, obj *models.CategoryPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CategoryPayload_clientMutationID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientMutationID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CategoryPayload_clientMutationID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CategoryPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CategoryPayload_categoryID(ctx context.Context, field graphql.CollectedField, obj *models.CategoryPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CategoryPayload_categoryID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CategoryID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNID642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CategoryPayload_categoryID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CategoryPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CategoryPayload_category(ctx context.Context, field graphql.CollectedField, obj *models.CategoryPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CategoryPayload_category(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Category)
	fc.Result = res
	return ec.marshalNCategory2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐCategory(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CategoryPayload_category(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CategoryPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_Category_ID(ctx, field)
			case "name":
				return ec.fieldContext_Category_name(ctx, field)
			case "description":
				return ec.fieldContext_Category_description(ctx, field)
			case "IABCode":
				return ec.fieldContext_Category_IABCode(ctx, field)
			case "parentID":
				return ec.fieldContext_Category_parentID(ctx, field)
			case "parent":
				return ec.fieldContext_Category_parent(ctx, field)
			case "childrens":
				return ec.fieldContext_Category_childrens(ctx, field)
			case "position":
				return ec.fieldContext_Category_position(ctx, field)
			case "active":
				return ec.fieldContext_Category_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_Category_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Category_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Category_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Category", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Continent_ID(ctx context.Context, field graphql.CollectedField, obj *models.Continent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Continent_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNID642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Continent_ID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Continent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Continent_code2(ctx context.Context, field graphql.CollectedField, obj *models.Continent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Continent_code2(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code2, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Continent_code2(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Continent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Continent_name(ctx context.Context, field graphql.CollectedField, obj *models.Continent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Continent_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Continent_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Continent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Continent_countries(ctx context.Context, field graphql.CollectedField, obj *models.Continent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Continent_countries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Countries, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Country)
	fc.Result = res
	return ec.marshalOCountry2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐCountryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Continent_countries(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Continent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_Country_ID(ctx, field)
			case "code2":
				return ec.fieldContext_Country_code2(ctx, field)
			case "code3":
				return ec.fieldContext_Country_code3(ctx, field)
			case "name":
				return ec.fieldContext_Country_name(ctx, field)
			case "nativeName":
				return ec.fieldContext_Country_nativeName(ctx, field)
			case "continentCode":
				return ec.fieldContext_Country_continentCode(ctx, field)
			case "continent":
				return ec.fieldContext_Country_continent(ctx, field)
			case "capital":
				return ec.fieldContext_Country_capital(ctx, field)
			case "languages":
				return ec.fieldContext_Country_languages(ctx, field)
			case "phoneCodes":
				return ec.fieldContext_Country_phoneCodes(ctx, field)
			case "timeZones":
				return ec.fieldContext_Country_timeZones(ctx, field)
			case "coordinates":
				return ec.fieldContext_Country_coordinates(ctx, field)
			case "currency":
				return ec.fieldContext_Country_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Country", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Coordinates_lat(ctx context.Context, field graphql.CollectedField, obj *models.Coordinates) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Coordinates_lat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lat, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Coordinates_lat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Coordinates",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Coordinates_lon(ctx context.Context, field graphql.CollectedField, obj *models.Coordinates) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Coordinates_lon(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lon, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Coordinates_lon(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Coordinates",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Country_ID(ctx context.Context, field graphql.CollectedField, obj *models.Country) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Country_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNID642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Country_ID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Country_code2(ctx context.Context, field graphql.CollectedField, obj *models.Country) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Country_code2(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code2, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Country_code2(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Country_code3(ctx context.Context, field graphql.CollectedField, obj *models.Country) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Country_code3(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code3, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Country_code3(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Country_name(ctx context.Context, field graphql.CollectedField, obj *models.Country) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Country_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Country_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Country_nativeName(ctx context.Context, field graphql.CollectedField, obj *models.Country) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Country_nativeName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NativeName, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Country_nativeName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Country_continentCode(ctx context.Context, field graphql.CollectedField, obj *models.Country) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Country_continentCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContinentCode, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Country_continentCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Country_continent(ctx context.Context, field graphql.CollectedField, obj *models.Country) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Country_continent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Continent, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Continent)
	fc.Result = res
	return ec.marshalNContinent2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐContinent(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Country_continent(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_Continent_ID(ctx, field)
			case "code2":
				return ec.fieldContext_Continent_code2(ctx, field)
			case "name":
				return ec.fieldContext_Continent_name(ctx, field)
			case "countries":
				return ec.fieldContext_Continent_countries(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Continent", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Country_capital(ctx context.Context, field graphql.CollectedField, obj *models.Country) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Country_capital(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Capital, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Country_capital(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Country_languages(ctx context.Context, field graphql.CollectedField, obj *models.Country) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Country_languages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Languages, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Country_languages(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Country_phoneCodes(ctx context.Context, field graphql.CollectedField, obj *models.Country) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Country_phoneCodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhoneCodes, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Country_phoneCodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Country_timeZones(ctx context.Context, field graphql.CollectedField, obj *models.Country) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Country_timeZones(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimeZones, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.TimeZone)
	fc.Result = res
	return ec.marshalOTimeZone2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐTimeZoneᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Country_timeZones(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_TimeZone_name(ctx, field)
			case "lon":
				return ec.fieldContext_TimeZone_lon(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimeZone", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Country_coordinates(ctx context.Context, field graphql.CollectedField, obj *models.Country) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Country_coordinates(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Coordinates, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Coordinates)
	fc.Result = res
	return ec.marshalNCoordinates2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐCoordinates(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Country_coordinates(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "lat":
				return ec.fieldContext_Coordinates_lat(ctx, field)
			case "lon":
				return ec.fieldContext_Coordinates_lon(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Coordinates", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Country_currency(ctx context.Context, field graphql.CollectedField, obj *models.Country) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Country_currency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Currency, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Country_currency(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceMaker_ID(ctx context.Context, field graphql.CollectedField, obj *models.DeviceMaker) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceMaker_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNID642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceMaker_ID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceMaker",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceMaker_codename(ctx context.Context, field graphql.CollectedField, obj *models.DeviceMaker) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceMaker_codename(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Codename, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceMaker_codename(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceMaker",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceMaker_name(ctx context.Context, field graphql.CollectedField, obj *models.DeviceMaker) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceMaker_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceMaker_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceMaker",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceMaker_description(ctx context.Context, field graphql.CollectedField, obj *models.DeviceMaker) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceMaker_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceMaker_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceMaker",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceMaker_matchExp(ctx context.Context, field graphql.CollectedField, obj *models.DeviceMaker) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceMaker_matchExp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MatchExp, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceMaker_matchExp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceMaker",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceMaker_models(ctx context.Context, field graphql.CollectedField, obj *models.DeviceMaker) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceMaker_models(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Models, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.DeviceModel)
	fc.Result = res
	return ec.marshalODeviceModel2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceModelᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceMaker_models(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceMaker",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_DeviceModel_ID(ctx, field)
			case "codename":
				return ec.fieldContext_DeviceModel_codename(ctx, field)
			case "name":
				return ec.fieldContext_DeviceModel_name(ctx, field)
			case "description":
				return ec.fieldContext_DeviceModel_description(ctx, field)
			case "version":
				return ec.fieldContext_DeviceModel_version(ctx, field)
			case "yearRelease":
				return ec.fieldContext_DeviceModel_yearRelease(ctx, field)
			case "parentID":
				return ec.fieldContext_DeviceModel_parentID(ctx, field)
			case "parent":
				return ec.fieldContext_DeviceModel_parent(ctx, field)
			case "matchExp":
				return ec.fieldContext_DeviceModel_matchExp(ctx, field)
			case "typeCodename":
				return ec.fieldContext_DeviceModel_typeCodename(ctx, field)
			case "type":
				return ec.fieldContext_DeviceModel_type(ctx, field)
			case "makerCodename":
				return ec.fieldContext_DeviceModel_makerCodename(ctx, field)
			case "maker":
				return ec.fieldContext_DeviceModel_maker(ctx, field)
			case "versions":
				return ec.fieldContext_DeviceModel_versions(ctx, field)
			case "active":
				return ec.fieldContext_DeviceModel_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_DeviceModel_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_DeviceModel_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_DeviceModel_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceModel", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceMaker_active(ctx context.Context, field graphql.CollectedField, obj *models.DeviceMaker) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceMaker_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models1.ActiveStatus)
	fc.Result = res
	return ec.marshalNActiveStatus2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐActiveStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceMaker_active(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceMaker",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ActiveStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceMaker_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.DeviceMaker) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceMaker_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceMaker_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceMaker",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceMaker_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models.DeviceMaker) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceMaker_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceMaker_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceMaker",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceMaker_deletedAt(ctx context.Context, field graphql.CollectedField, obj *models.DeviceMaker) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceMaker_deletedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceMaker_deletedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceMaker",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceMakerConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models.DeviceMaker, models.DeviceMakerEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceMakerConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceMakerConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceMakerConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceMakerConnection_edges(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models.DeviceMaker, models.DeviceMakerEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceMakerConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.DeviceMakerEdge)
	fc.Result = res
	return ec.marshalNDeviceMakerEdge2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceMakerEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceMakerConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceMakerConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_DeviceMakerEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_DeviceMakerEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceMakerEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceMakerConnection_list(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models.DeviceMaker, models.DeviceMakerEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceMakerConnection_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.DeviceMaker)
	fc.Result = res
	return ec.marshalNDeviceMaker2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceMakerᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceMakerConnection_list(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceMakerConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_DeviceMaker_ID(ctx, field)
			case "codename":
				return ec.fieldContext_DeviceMaker_codename(ctx, field)
			case "name":
				return ec.fieldContext_DeviceMaker_name(ctx, field)
			case "description":
				return ec.fieldContext_DeviceMaker_description(ctx, field)
			case "matchExp":
				return ec.fieldContext_DeviceMaker_matchExp(ctx, field)
			case "models":
				return ec.fieldContext_DeviceMaker_models(ctx, field)
			case "active":
				return ec.fieldContext_DeviceMaker_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_DeviceMaker_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_DeviceMaker_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_DeviceMaker_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceMaker", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceMakerConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models.DeviceMaker, models.DeviceMakerEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceMakerConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceMakerConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceMakerConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "total":
				return ec.fieldContext_PageInfo_total(ctx, field)
			case "page":
				return ec.fieldContext_PageInfo_page(ctx, field)
			case "count":
				return ec.fieldContext_PageInfo_count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceMakerEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *models.DeviceMakerEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceMakerEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceMakerEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceMakerEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceMakerEdge_node(ctx context.Context, field graphql.CollectedField, obj *models.DeviceMakerEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceMakerEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.DeviceMaker)
	fc.Result = res
	return ec.marshalNDeviceMaker2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceMaker(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceMakerEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceMakerEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_DeviceMaker_ID(ctx, field)
			case "codename":
				return ec.fieldContext_DeviceMaker_codename(ctx, field)
			case "name":
				return ec.fieldContext_DeviceMaker_name(ctx, field)
			case "description":
				return ec.fieldContext_DeviceMaker_description(ctx, field)
			case "matchExp":
				return ec.fieldContext_DeviceMaker_matchExp(ctx, field)
			case "models":
				return ec.fieldContext_DeviceMaker_models(ctx, field)
			case "active":
				return ec.fieldContext_DeviceMaker_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_DeviceMaker_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_DeviceMaker_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_DeviceMaker_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceMaker", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceMakerPayload_clientMutationID(ctx context.Context, field graphql.CollectedField, obj *models.DeviceMakerPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceMakerPayload_clientMutationID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientMutationID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceMakerPayload_clientMutationID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceMakerPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceMakerPayload_makerID(ctx context.Context, field graphql.CollectedField, obj *models.DeviceMakerPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceMakerPayload_makerID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MakerID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNID642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceMakerPayload_makerID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceMakerPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceMakerPayload_maker(ctx context.Context, field graphql.CollectedField, obj *models.DeviceMakerPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceMakerPayload_maker(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Maker, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.DeviceMaker)
	fc.Result = res
	return ec.marshalNDeviceMaker2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceMaker(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceMakerPayload_maker(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceMakerPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_DeviceMaker_ID(ctx, field)
			case "codename":
				return ec.fieldContext_DeviceMaker_codename(ctx, field)
			case "name":
				return ec.fieldContext_DeviceMaker_name(ctx, field)
			case "description":
				return ec.fieldContext_DeviceMaker_description(ctx, field)
			case "matchExp":
				return ec.fieldContext_DeviceMaker_matchExp(ctx, field)
			case "models":
				return ec.fieldContext_DeviceMaker_models(ctx, field)
			case "active":
				return ec.fieldContext_DeviceMaker_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_DeviceMaker_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_DeviceMaker_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_DeviceMaker_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceMaker", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceModel_ID(ctx context.Context, field graphql.CollectedField, obj *models.DeviceModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceModel_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNID642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceModel_ID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceModel_codename(ctx context.Context, field graphql.CollectedField, obj *models.DeviceModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceModel_codename(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Codename, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceModel_codename(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceModel_name(ctx context.Context, field graphql.CollectedField, obj *models.DeviceModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceModel_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceModel_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceModel_description(ctx context.Context, field graphql.CollectedField, obj *models.DeviceModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceModel_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceModel_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceModel_version(ctx context.Context, field graphql.CollectedField, obj *models.DeviceModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceModel_version(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceModel_version(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceModel_yearRelease(ctx context.Context, field graphql.CollectedField, obj *models.DeviceModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceModel_yearRelease(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YearRelease, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceModel_yearRelease(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceModel_parentID(ctx context.Context, field graphql.CollectedField, obj *models.DeviceModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceModel_parentID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint64)
	fc.Result = res
	return ec.marshalOID642ᚖuint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceModel_parentID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceModel_parent(ctx context.Context, field graphql.CollectedField, obj *models.DeviceModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceModel_parent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Parent, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.DeviceModel)
	fc.Result = res
	return ec.marshalODeviceModel2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceModel(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceModel_parent(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_DeviceModel_ID(ctx, field)
			case "codename":
				return ec.fieldContext_DeviceModel_codename(ctx, field)
			case "name":
				return ec.fieldContext_DeviceModel_name(ctx, field)
			case "description":
				return ec.fieldContext_DeviceModel_description(ctx, field)
			case "version":
				return ec.fieldContext_DeviceModel_version(ctx, field)
			case "yearRelease":
				return ec.fieldContext_DeviceModel_yearRelease(ctx, field)
			case "parentID":
				return ec.fieldContext_DeviceModel_parentID(ctx, field)
			case "parent":
				return ec.fieldContext_DeviceModel_parent(ctx, field)
			case "matchExp":
				return ec.fieldContext_DeviceModel_matchExp(ctx, field)
			case "typeCodename":
				return ec.fieldContext_DeviceModel_typeCodename(ctx, field)
			case "type":
				return ec.fieldContext_DeviceModel_type(ctx, field)
			case "makerCodename":
				return ec.fieldContext_DeviceModel_makerCodename(ctx, field)
			case "maker":
				return ec.fieldContext_DeviceModel_maker(ctx, field)
			case "versions":
				return ec.fieldContext_DeviceModel_versions(ctx, field)
			case "active":
				return ec.fieldContext_DeviceModel_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_DeviceModel_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_DeviceModel_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_DeviceModel_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceModel", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceModel_matchExp(ctx context.Context, field graphql.CollectedField, obj *models.DeviceModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceModel_matchExp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MatchExp, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceModel_matchExp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceModel_typeCodename(ctx context.Context, field graphql.CollectedField, obj *models.DeviceModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceModel_typeCodename(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeCodename, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceModel_typeCodename(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceModel_type(ctx context.Context, field graphql.CollectedField, obj *models.DeviceModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceModel_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.DeviceType)
	fc.Result = res
	return ec.marshalODeviceType2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceModel_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_DeviceType_ID(ctx, field)
			case "name":
				return ec.fieldContext_DeviceType_name(ctx, field)
			case "codename":
				return ec.fieldContext_DeviceType_codename(ctx, field)
			case "description":
				return ec.fieldContext_DeviceType_description(ctx, field)
			case "active":
				return ec.fieldContext_DeviceType_active(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceModel_makerCodename(ctx context.Context, field graphql.CollectedField, obj *models.DeviceModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceModel_makerCodename(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MakerCodename, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceModel_makerCodename(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceModel_maker(ctx context.Context, field graphql.CollectedField, obj *models.DeviceModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceModel_maker(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Maker, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.DeviceMaker)
	fc.Result = res
	return ec.marshalODeviceMaker2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceMaker(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceModel_maker(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_DeviceMaker_ID(ctx, field)
			case "codename":
				return ec.fieldContext_DeviceMaker_codename(ctx, field)
			case "name":
				return ec.fieldContext_DeviceMaker_name(ctx, field)
			case "description":
				return ec.fieldContext_DeviceMaker_description(ctx, field)
			case "matchExp":
				return ec.fieldContext_DeviceMaker_matchExp(ctx, field)
			case "models":
				return ec.fieldContext_DeviceMaker_models(ctx, field)
			case "active":
				return ec.fieldContext_DeviceMaker_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_DeviceMaker_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_DeviceMaker_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_DeviceMaker_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceMaker", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceModel_versions(ctx context.Context, field graphql.CollectedField, obj *models.DeviceModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceModel_versions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.DeviceModel().Versions(rctx, obj, fc.Args["filter"].(*models.DeviceModelListFilter), fc.Args["order"].([]*models.DeviceModelListOrder))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.DeviceModel)
	fc.Result = res
	return ec.marshalODeviceModel2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceModelᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceModel_versions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceModel",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_DeviceModel_ID(ctx, field)
			case "codename":
				return ec.fieldContext_DeviceModel_codename(ctx, field)
			case "name":
				return ec.fieldContext_DeviceModel_name(ctx, field)
			case "description":
				return ec.fieldContext_DeviceModel_description(ctx, field)
			case "version":
				return ec.fieldContext_DeviceModel_version(ctx, field)
			case "yearRelease":
				return ec.fieldContext_DeviceModel_yearRelease(ctx, field)
			case "parentID":
				return ec.fieldContext_DeviceModel_parentID(ctx, field)
			case "parent":
				return ec.fieldContext_DeviceModel_parent(ctx, field)
			case "matchExp":
				return ec.fieldContext_DeviceModel_matchExp(ctx, field)
			case "typeCodename":
				return ec.fieldContext_DeviceModel_typeCodename(ctx, field)
			case "type":
				return ec.fieldContext_DeviceModel_type(ctx, field)
			case "makerCodename":
				return ec.fieldContext_DeviceModel_makerCodename(ctx, field)
			case "maker":
				return ec.fieldContext_DeviceModel_maker(ctx, field)
			case "versions":
				return ec.fieldContext_DeviceModel_versions(ctx, field)
			case "active":
				return ec.fieldContext_DeviceModel_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_DeviceModel_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_DeviceModel_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_DeviceModel_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceModel", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_DeviceModel_versions_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _DeviceModel_active(ctx context.Context, field graphql.CollectedField, obj *models.DeviceModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceModel_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models1.ActiveStatus)
	fc.Result = res
	return ec.marshalNActiveStatus2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐActiveStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceModel_active(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ActiveStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceModel_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.DeviceModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceModel_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceModel_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceModel_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models.DeviceModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceModel_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceModel_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceModel_deletedAt(ctx context.Context, field graphql.CollectedField, obj *models.DeviceModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceModel_deletedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceModel_deletedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceModelConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models.DeviceModel, models.DeviceModelEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceModelConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceModelConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceModelConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceModelConnection_edges(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models.DeviceModel, models.DeviceModelEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceModelConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.DeviceModelEdge)
	fc.Result = res
	return ec.marshalNDeviceModelEdge2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceModelEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceModelConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceModelConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_DeviceModelEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_DeviceModelEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceModelEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceModelConnection_list(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models.DeviceModel, models.DeviceModelEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceModelConnection_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.DeviceModel)
	fc.Result = res
	return ec.marshalNDeviceModel2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceModelᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceModelConnection_list(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceModelConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_DeviceModel_ID(ctx, field)
			case "codename":
				return ec.fieldContext_DeviceModel_codename(ctx, field)
			case "name":
				return ec.fieldContext_DeviceModel_name(ctx, field)
			case "description":
				return ec.fieldContext_DeviceModel_description(ctx, field)
			case "version":
				return ec.fieldContext_DeviceModel_version(ctx, field)
			case "yearRelease":
				return ec.fieldContext_DeviceModel_yearRelease(ctx, field)
			case "parentID":
				return ec.fieldContext_DeviceModel_parentID(ctx, field)
			case "parent":
				return ec.fieldContext_DeviceModel_parent(ctx, field)
			case "matchExp":
				return ec.fieldContext_DeviceModel_matchExp(ctx, field)
			case "typeCodename":
				return ec.fieldContext_DeviceModel_typeCodename(ctx, field)
			case "type":
				return ec.fieldContext_DeviceModel_type(ctx, field)
			case "makerCodename":
				return ec.fieldContext_DeviceModel_makerCodename(ctx, field)
			case "maker":
				return ec.fieldContext_DeviceModel_maker(ctx, field)
			case "versions":
				return ec.fieldContext_DeviceModel_versions(ctx, field)
			case "active":
				return ec.fieldContext_DeviceModel_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_DeviceModel_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_DeviceModel_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_DeviceModel_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceModel", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceModelConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models.DeviceModel, models.DeviceModelEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceModelConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceModelConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceModelConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "total":
				return ec.fieldContext_PageInfo_total(ctx, field)
			case "page":
				return ec.fieldContext_PageInfo_page(ctx, field)
			case "count":
				return ec.fieldContext_PageInfo_count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceModelEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *models.DeviceModelEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceModelEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceModelEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceModelEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceModelEdge_node(ctx context.Context, field graphql.CollectedField, obj *models.DeviceModelEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceModelEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.DeviceModel)
	fc.Result = res
	return ec.marshalNDeviceModel2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceModel(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceModelEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceModelEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_DeviceModel_ID(ctx, field)
			case "codename":
				return ec.fieldContext_DeviceModel_codename(ctx, field)
			case "name":
				return ec.fieldContext_DeviceModel_name(ctx, field)
			case "description":
				return ec.fieldContext_DeviceModel_description(ctx, field)
			case "version":
				return ec.fieldContext_DeviceModel_version(ctx, field)
			case "yearRelease":
				return ec.fieldContext_DeviceModel_yearRelease(ctx, field)
			case "parentID":
				return ec.fieldContext_DeviceModel_parentID(ctx, field)
			case "parent":
				return ec.fieldContext_DeviceModel_parent(ctx, field)
			case "matchExp":
				return ec.fieldContext_DeviceModel_matchExp(ctx, field)
			case "typeCodename":
				return ec.fieldContext_DeviceModel_typeCodename(ctx, field)
			case "type":
				return ec.fieldContext_DeviceModel_type(ctx, field)
			case "makerCodename":
				return ec.fieldContext_DeviceModel_makerCodename(ctx, field)
			case "maker":
				return ec.fieldContext_DeviceModel_maker(ctx, field)
			case "versions":
				return ec.fieldContext_DeviceModel_versions(ctx, field)
			case "active":
				return ec.fieldContext_DeviceModel_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_DeviceModel_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_DeviceModel_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_DeviceModel_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceModel", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceModelPayload_clientMutationID(ctx context.Context, field graphql.CollectedField, obj *models.DeviceModelPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceModelPayload_clientMutationID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientMutationID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceModelPayload_clientMutationID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceModelPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceModelPayload_modelID(ctx context.Context, field graphql.CollectedField, obj *models.DeviceModelPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceModelPayload_modelID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModelID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNID642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceModelPayload_modelID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceModelPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceModelPayload_model(ctx context.Context, field graphql.CollectedField, obj *models.DeviceModelPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceModelPayload_model(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Model, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.DeviceModel)
	fc.Result = res
	return ec.marshalNDeviceModel2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceModel(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceModelPayload_model(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceModelPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_DeviceModel_ID(ctx, field)
			case "codename":
				return ec.fieldContext_DeviceModel_codename(ctx, field)
			case "name":
				return ec.fieldContext_DeviceModel_name(ctx, field)
			case "description":
				return ec.fieldContext_DeviceModel_description(ctx, field)
			case "version":
				return ec.fieldContext_DeviceModel_version(ctx, field)
			case "yearRelease":
				return ec.fieldContext_DeviceModel_yearRelease(ctx, field)
			case "parentID":
				return ec.fieldContext_DeviceModel_parentID(ctx, field)
			case "parent":
				return ec.fieldContext_DeviceModel_parent(ctx, field)
			case "matchExp":
				return ec.fieldContext_DeviceModel_matchExp(ctx, field)
			case "typeCodename":
				return ec.fieldContext_DeviceModel_typeCodename(ctx, field)
			case "type":
				return ec.fieldContext_DeviceModel_type(ctx, field)
			case "makerCodename":
				return ec.fieldContext_DeviceModel_makerCodename(ctx, field)
			case "maker":
				return ec.fieldContext_DeviceModel_maker(ctx, field)
			case "versions":
				return ec.fieldContext_DeviceModel_versions(ctx, field)
			case "active":
				return ec.fieldContext_DeviceModel_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_DeviceModel_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_DeviceModel_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_DeviceModel_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceModel", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceType_ID(ctx context.Context, field graphql.CollectedField, obj *models.DeviceType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceType_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNID642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceType_ID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceType_name(ctx context.Context, field graphql.CollectedField, obj *models.DeviceType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceType_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceType_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceType_codename(ctx context.Context, field graphql.CollectedField, obj *models.DeviceType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceType_codename(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Codename, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceType_codename(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceType_description(ctx context.Context, field graphql.CollectedField, obj *models.DeviceType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceType_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceType_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceType_active(ctx context.Context, field graphql.CollectedField, obj *models.DeviceType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceType_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models1.ActiveStatus)
	fc.Result = res
	return ec.marshalNActiveStatus2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐActiveStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceType_active(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ActiveStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DirectAccessToken_ID(ctx context.Context, field graphql.CollectedField, obj *models1.DirectAccessToken) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DirectAccessToken_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNID642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DirectAccessToken_ID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DirectAccessToken",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DirectAccessToken_token(ctx context.Context, field graphql.CollectedField, obj *models1.DirectAccessToken) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DirectAccessToken_token(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DirectAccessToken_token(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DirectAccessToken",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DirectAccessToken_description(ctx context.Context, field graphql.CollectedField, obj *models1.DirectAccessToken) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DirectAccessToken_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DirectAccessToken_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DirectAccessToken",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DirectAccessToken_userID(ctx context.Context, field graphql.CollectedField, obj *models1.DirectAccessToken) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DirectAccessToken_userID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint64)
	fc.Result = res
	return ec.marshalOID642ᚖuint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DirectAccessToken_userID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DirectAccessToken",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DirectAccessToken_accountID(ctx context.Context, field graphql.CollectedField, obj *models1.DirectAccessToken) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DirectAccessToken_accountID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNID642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DirectAccessToken_accountID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DirectAccessToken",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DirectAccessToken_createdAt(ctx context.Context, field graphql.CollectedField, obj *models1.DirectAccessToken) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DirectAccessToken_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DirectAccessToken_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DirectAccessToken",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DirectAccessToken_expiresAt(ctx context.Context, field graphql.CollectedField, obj *models1.DirectAccessToken) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DirectAccessToken_expiresAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpiresAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DirectAccessToken_expiresAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DirectAccessToken",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DirectAccessTokenConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models1.DirectAccessToken, models1.DirectAccessTokenEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DirectAccessTokenConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DirectAccessTokenConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DirectAccessTokenConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DirectAccessTokenConnection_edges(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models1.DirectAccessToken, models1.DirectAccessTokenEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DirectAccessTokenConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models1.DirectAccessTokenEdge)
	fc.Result = res
	return ec.marshalODirectAccessTokenEdge2ᚕᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐDirectAccessTokenEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DirectAccessTokenConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DirectAccessTokenConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_DirectAccessTokenEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_DirectAccessTokenEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DirectAccessTokenEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DirectAccessTokenConnection_list(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models1.DirectAccessToken, models1.DirectAccessTokenEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DirectAccessTokenConnection_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models1.DirectAccessToken)
	fc.Result = res
	return ec.marshalODirectAccessToken2ᚕᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐDirectAccessTokenᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DirectAccessTokenConnection_list(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DirectAccessTokenConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_DirectAccessToken_ID(ctx, field)
			case "token":
				return ec.fieldContext_DirectAccessToken_token(ctx, field)
			case "description":
				return ec.fieldContext_DirectAccessToken_description(ctx, field)
			case "userID":
				return ec.fieldContext_DirectAccessToken_userID(ctx, field)
			case "accountID":
				return ec.fieldContext_DirectAccessToken_accountID(ctx, field)
			case "createdAt":
				return ec.fieldContext_DirectAccessToken_createdAt(ctx, field)
			case "expiresAt":
				return ec.fieldContext_DirectAccessToken_expiresAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DirectAccessToken", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DirectAccessTokenConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models1.DirectAccessToken, models1.DirectAccessTokenEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DirectAccessTokenConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DirectAccessTokenConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DirectAccessTokenConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "total":
				return ec.fieldContext_PageInfo_total(ctx, field)
			case "page":
				return ec.fieldContext_PageInfo_page(ctx, field)
			case "count":
				return ec.fieldContext_PageInfo_count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DirectAccessTokenEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *models1.DirectAccessTokenEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DirectAccessTokenEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DirectAccessTokenEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DirectAccessTokenEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DirectAccessTokenEdge_node(ctx context.Context, field graphql.CollectedField, obj *models1.DirectAccessTokenEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DirectAccessTokenEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models1.DirectAccessToken)
	fc.Result = res
	return ec.marshalODirectAccessToken2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐDirectAccessToken(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DirectAccessTokenEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DirectAccessTokenEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_DirectAccessToken_ID(ctx, field)
			case "token":
				return ec.fieldContext_DirectAccessToken_token(ctx, field)
			case "description":
				return ec.fieldContext_DirectAccessToken_description(ctx, field)
			case "userID":
				return ec.fieldContext_DirectAccessToken_userID(ctx, field)
			case "accountID":
				return ec.fieldContext_DirectAccessToken_accountID(ctx, field)
			case "createdAt":
				return ec.fieldContext_DirectAccessToken_createdAt(ctx, field)
			case "expiresAt":
				return ec.fieldContext_DirectAccessToken_expiresAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DirectAccessToken", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DirectAccessTokenPayload_clientMutationID(ctx context.Context, field graphql.CollectedField, obj *models1.DirectAccessTokenPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DirectAccessTokenPayload_clientMutationID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientMutationID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DirectAccessTokenPayload_clientMutationID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DirectAccessTokenPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DirectAccessTokenPayload_token(ctx context.Context, field graphql.CollectedField, obj *models1.DirectAccessTokenPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DirectAccessTokenPayload_token(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models1.DirectAccessToken)
	fc.Result = res
	return ec.marshalODirectAccessToken2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐDirectAccessToken(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DirectAccessTokenPayload_token(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DirectAccessTokenPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_DirectAccessToken_ID(ctx, field)
			case "token":
				return ec.fieldContext_DirectAccessToken_token(ctx, field)
			case "description":
				return ec.fieldContext_DirectAccessToken_description(ctx, field)
			case "userID":
				return ec.fieldContext_DirectAccessToken_userID(ctx, field)
			case "accountID":
				return ec.fieldContext_DirectAccessToken_accountID(ctx, field)
			case "createdAt":
				return ec.fieldContext_DirectAccessToken_createdAt(ctx, field)
			case "expiresAt":
				return ec.fieldContext_DirectAccessToken_expiresAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DirectAccessToken", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HistoryAction_ID(ctx context.Context, field graphql.CollectedField, obj *models1.HistoryAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HistoryAction_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HistoryAction_ID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HistoryAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HistoryAction_RequestID(ctx context.Context, field graphql.CollectedField, obj *models1.HistoryAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HistoryAction_RequestID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RequestID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HistoryAction_RequestID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HistoryAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HistoryAction_name(ctx context.Context, field graphql.CollectedField, obj *models1.HistoryAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HistoryAction_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HistoryAction_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HistoryAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HistoryAction_message(ctx context.Context, field graphql.CollectedField, obj *models1.HistoryAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HistoryAction_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HistoryAction_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HistoryAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HistoryAction_userID(ctx context.Context, field graphql.CollectedField, obj *models1.HistoryAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HistoryAction_userID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNID642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HistoryAction_userID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HistoryAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HistoryAction_accountID(ctx context.Context, field graphql.CollectedField, obj *models1.HistoryAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HistoryAction_accountID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNID642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HistoryAction_accountID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HistoryAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HistoryAction_objectType(ctx context.Context, field graphql.CollectedField, obj *models1.HistoryAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HistoryAction_objectType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ObjectType, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HistoryAction_objectType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HistoryAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HistoryAction_objectID(ctx context.Context, field graphql.CollectedField, obj *models1.HistoryAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HistoryAction_objectID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ObjectID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNID642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HistoryAction_objectID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HistoryAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HistoryAction_objectIDs(ctx context.Context, field graphql.CollectedField, obj *models1.HistoryAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HistoryAction_objectIDs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ObjectIDs, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HistoryAction_objectIDs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HistoryAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HistoryAction_data(ctx context.Context, field graphql.CollectedField, obj *models1.HistoryAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HistoryAction_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.NullableJSON)
	fc.Result = res
	return ec.marshalNNullableJSON2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋtypesᚐNullableJSON(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HistoryAction_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HistoryAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullableJSON does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HistoryAction_actionAt(ctx context.Context, field graphql.CollectedField, obj *models1.HistoryAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HistoryAction_actionAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HistoryAction_actionAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HistoryAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HistoryActionConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models1.HistoryAction, models1.HistoryActionEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HistoryActionConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HistoryActionConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HistoryActionConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HistoryActionConnection_edges(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models1.HistoryAction, models1.HistoryActionEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HistoryActionConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models1.HistoryActionEdge)
	fc.Result = res
	return ec.marshalOHistoryActionEdge2ᚕᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐHistoryActionEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HistoryActionConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HistoryActionConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_HistoryActionEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_HistoryActionEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HistoryActionEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HistoryActionConnection_list(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models1.HistoryAction, models1.HistoryActionEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HistoryActionConnection_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models1.HistoryAction)
	fc.Result = res
	return ec.marshalOHistoryAction2ᚕᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐHistoryActionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HistoryActionConnection_list(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HistoryActionConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_HistoryAction_ID(ctx, field)
			case "RequestID":
				return ec.fieldContext_HistoryAction_RequestID(ctx, field)
			case "name":
				return ec.fieldContext_HistoryAction_name(ctx, field)
			case "message":
				return ec.fieldContext_HistoryAction_message(ctx, field)
			case "userID":
				return ec.fieldContext_HistoryAction_userID(ctx, field)
			case "accountID":
				return ec.fieldContext_HistoryAction_accountID(ctx, field)
			case "objectType":
				return ec.fieldContext_HistoryAction_objectType(ctx, field)
			case "objectID":
				return ec.fieldContext_HistoryAction_objectID(ctx, field)
			case "objectIDs":
				return ec.fieldContext_HistoryAction_objectIDs(ctx, field)
			case "data":
				return ec.fieldContext_HistoryAction_data(ctx, field)
			case "actionAt":
				return ec.fieldContext_HistoryAction_actionAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HistoryAction", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HistoryActionConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models1.HistoryAction, models1.HistoryActionEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HistoryActionConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HistoryActionConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HistoryActionConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "total":
				return ec.fieldContext_PageInfo_total(ctx, field)
			case "page":
				return ec.fieldContext_PageInfo_page(ctx, field)
			case "count":
				return ec.fieldContext_PageInfo_count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HistoryActionEdge_node(ctx context.Context, field graphql.CollectedField, obj *models1.HistoryActionEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HistoryActionEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.HistoryAction)
	fc.Result = res
	return ec.marshalNHistoryAction2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐHistoryAction(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HistoryActionEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HistoryActionEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_HistoryAction_ID(ctx, field)
			case "RequestID":
				return ec.fieldContext_HistoryAction_RequestID(ctx, field)
			case "name":
				return ec.fieldContext_HistoryAction_name(ctx, field)
			case "message":
				return ec.fieldContext_HistoryAction_message(ctx, field)
			case "userID":
				return ec.fieldContext_HistoryAction_userID(ctx, field)
			case "accountID":
				return ec.fieldContext_HistoryAction_accountID(ctx, field)
			case "objectType":
				return ec.fieldContext_HistoryAction_objectType(ctx, field)
			case "objectID":
				return ec.fieldContext_HistoryAction_objectID(ctx, field)
			case "objectIDs":
				return ec.fieldContext_HistoryAction_objectIDs(ctx, field)
			case "data":
				return ec.fieldContext_HistoryAction_data(ctx, field)
			case "actionAt":
				return ec.fieldContext_HistoryAction_actionAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HistoryAction", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HistoryActionEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *models1.HistoryActionEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HistoryActionEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HistoryActionEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HistoryActionEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HistoryActionPayload_clientMutationId(ctx context.Context, field graphql.CollectedField, obj *models1.HistoryActionPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HistoryActionPayload_clientMutationId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientMutationID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HistoryActionPayload_clientMutationId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HistoryActionPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HistoryActionPayload_actionID(ctx context.Context, field graphql.CollectedField, obj *models1.HistoryActionPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HistoryActionPayload_actionID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HistoryActionPayload_actionID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HistoryActionPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HistoryActionPayload_action(ctx context.Context, field graphql.CollectedField, obj *models1.HistoryActionPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HistoryActionPayload_action(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Action, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.HistoryAction)
	fc.Result = res
	return ec.marshalNHistoryAction2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐHistoryAction(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HistoryActionPayload_action(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HistoryActionPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_HistoryAction_ID(ctx, field)
			case "RequestID":
				return ec.fieldContext_HistoryAction_RequestID(ctx, field)
			case "name":
				return ec.fieldContext_HistoryAction_name(ctx, field)
			case "message":
				return ec.fieldContext_HistoryAction_message(ctx, field)
			case "userID":
				return ec.fieldContext_HistoryAction_userID(ctx, field)
			case "accountID":
				return ec.fieldContext_HistoryAction_accountID(ctx, field)
			case "objectType":
				return ec.fieldContext_HistoryAction_objectType(ctx, field)
			case "objectID":
				return ec.fieldContext_HistoryAction_objectID(ctx, field)
			case "objectIDs":
				return ec.fieldContext_HistoryAction_objectIDs(ctx, field)
			case "data":
				return ec.fieldContext_HistoryAction_data(ctx, field)
			case "actionAt":
				return ec.fieldContext_HistoryAction_actionAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HistoryAction", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Member_ID(ctx context.Context, field graphql.CollectedField, obj *models1.Member) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Member_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNID642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Member_ID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Member",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Member_status(ctx context.Context, field graphql.CollectedField, obj *models1.Member) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Member_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models1.ApproveStatus)
	fc.Result = res
	return ec.marshalNApproveStatus2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐApproveStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Member_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Member",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ApproveStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Member_user(ctx context.Context, field graphql.CollectedField, obj *models1.Member) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Member_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Member_user(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Member",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_User_ID(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "status":
				return ec.fieldContext_User_status(ctx, field)
			case "statusMessage":
				return ec.fieldContext_User_statusMessage(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Member_account(ctx context.Context, field graphql.CollectedField, obj *models1.Member) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Member_account(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Account, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.Account)
	fc.Result = res
	return ec.marshalNAccount2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Member_account(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Member",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_Account_ID(ctx, field)
			case "status":
				return ec.fieldContext_Account_status(ctx, field)
			case "statusMessage":
				return ec.fieldContext_Account_statusMessage(ctx, field)
			case "title":
				return ec.fieldContext_Account_title(ctx, field)
			case "description":
				return ec.fieldContext_Account_description(ctx, field)
			case "logoURI":
				return ec.fieldContext_Account_logoURI(ctx, field)
			case "policyURI":
				return ec.fieldContext_Account_policyURI(ctx, field)
			case "termsOfServiceURI":
				return ec.fieldContext_Account_termsOfServiceURI(ctx, field)
			case "clientURI":
				return ec.fieldContext_Account_clientURI(ctx, field)
			case "contacts":
				return ec.fieldContext_Account_contacts(ctx, field)
			case "createdAt":
				return ec.fieldContext_Account_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Account_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Account", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Member_isAdmin(ctx context.Context, field graphql.CollectedField, obj *models1.Member) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Member_isAdmin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAdmin, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Member_isAdmin(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Member",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Member_roles(ctx context.Context, field graphql.CollectedField, obj *models1.Member) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Member_roles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Roles, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models1.RBACRole)
	fc.Result = res
	return ec.marshalORBACRole2ᚕᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐRBACRoleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Member_roles(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Member",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_RBACRole_ID(ctx, field)
			case "name":
				return ec.fieldContext_RBACRole_name(ctx, field)
			case "title":
				return ec.fieldContext_RBACRole_title(ctx, field)
			case "description":
				return ec.fieldContext_RBACRole_description(ctx, field)
			case "context":
				return ec.fieldContext_RBACRole_context(ctx, field)
			case "childRoles":
				return ec.fieldContext_RBACRole_childRoles(ctx, field)
			case "permissions":
				return ec.fieldContext_RBACRole_permissions(ctx, field)
			case "permissionPatterns":
				return ec.fieldContext_RBACRole_permissionPatterns(ctx, field)
			case "createdAt":
				return ec.fieldContext_RBACRole_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_RBACRole_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_RBACRole_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RBACRole", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Member_createdAt(ctx context.Context, field graphql.CollectedField, obj *models1.Member) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Member_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Member_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Member",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Member_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models1.Member) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Member_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Member_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Member",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Member_deletedAt(ctx context.Context, field graphql.CollectedField, obj *models1.Member) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Member_deletedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Member_deletedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Member",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MemberConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models1.Member, models1.MemberEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MemberConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MemberConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MemberConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MemberConnection_edges(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models1.Member, models1.MemberEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MemberConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models1.MemberEdge)
	fc.Result = res
	return ec.marshalOMemberEdge2ᚕᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐMemberEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MemberConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MemberConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_MemberEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_MemberEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MemberEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MemberConnection_list(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models1.Member, models1.MemberEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MemberConnection_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models1.Member)
	fc.Result = res
	return ec.marshalOMember2ᚕᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐMemberᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MemberConnection_list(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MemberConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_Member_ID(ctx, field)
			case "status":
				return ec.fieldContext_Member_status(ctx, field)
			case "user":
				return ec.fieldContext_Member_user(ctx, field)
			case "account":
				return ec.fieldContext_Member_account(ctx, field)
			case "isAdmin":
				return ec.fieldContext_Member_isAdmin(ctx, field)
			case "roles":
				return ec.fieldContext_Member_roles(ctx, field)
			case "createdAt":
				return ec.fieldContext_Member_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Member_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Member_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Member", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MemberConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models1.Member, models1.MemberEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MemberConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MemberConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MemberConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "total":
				return ec.fieldContext_PageInfo_total(ctx, field)
			case "page":
				return ec.fieldContext_PageInfo_page(ctx, field)
			case "count":
				return ec.fieldContext_PageInfo_count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MemberEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *models1.MemberEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MemberEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MemberEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MemberEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MemberEdge_node(ctx context.Context, field graphql.CollectedField, obj *models1.MemberEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MemberEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models1.Member)
	fc.Result = res
	return ec.marshalOMember2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MemberEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MemberEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_Member_ID(ctx, field)
			case "status":
				return ec.fieldContext_Member_status(ctx, field)
			case "user":
				return ec.fieldContext_Member_user(ctx, field)
			case "account":
				return ec.fieldContext_Member_account(ctx, field)
			case "isAdmin":
				return ec.fieldContext_Member_isAdmin(ctx, field)
			case "roles":
				return ec.fieldContext_Member_roles(ctx, field)
			case "createdAt":
				return ec.fieldContext_Member_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Member_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Member_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Member", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MemberPayload_clientMutationID(ctx context.Context, field graphql.CollectedField, obj *models1.MemberPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MemberPayload_clientMutationID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientMutationID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MemberPayload_clientMutationID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MemberPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MemberPayload_memberID(ctx context.Context, field graphql.CollectedField, obj *models1.MemberPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MemberPayload_memberID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MemberID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNID642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MemberPayload_memberID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MemberPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MemberPayload_member(ctx context.Context, field graphql.CollectedField, obj *models1.MemberPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MemberPayload_member(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Member, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models1.Member)
	fc.Result = res
	return ec.marshalOMember2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MemberPayload_member(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MemberPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_Member_ID(ctx, field)
			case "status":
				return ec.fieldContext_Member_status(ctx, field)
			case "user":
				return ec.fieldContext_Member_user(ctx, field)
			case "account":
				return ec.fieldContext_Member_account(ctx, field)
			case "isAdmin":
				return ec.fieldContext_Member_isAdmin(ctx, field)
			case "roles":
				return ec.fieldContext_Member_roles(ctx, field)
			case "createdAt":
				return ec.fieldContext_Member_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Member_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Member_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Member", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_poke(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_poke(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Poke(rctx)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_poke(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_login(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_login(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Login(rctx, fc.Args["login"].(string), fc.Args["password"].(string))
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.SessionToken)
	fc.Result = res
	return ec.marshalNSessionToken2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐSessionToken(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_login(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "token":
				return ec.fieldContext_SessionToken_token(ctx, field)
			case "expiresAt":
				return ec.fieldContext_SessionToken_expiresAt(ctx, field)
			case "isAdmin":
				return ec.fieldContext_SessionToken_isAdmin(ctx, field)
			case "roles":
				return ec.fieldContext_SessionToken_roles(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SessionToken", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_login_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_logout(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_logout(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Logout(rctx)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_logout(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_switchAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_switchAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SwitchAccount(rctx, fc.Args["id"].(uint64))
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.SessionToken)
	fc.Result = res
	return ec.marshalNSessionToken2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐSessionToken(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_switchAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "token":
				return ec.fieldContext_SessionToken_token(ctx, field)
			case "expiresAt":
				return ec.fieldContext_SessionToken_expiresAt(ctx, field)
			case "isAdmin":
				return ec.fieldContext_SessionToken_isAdmin(ctx, field)
			case "roles":
				return ec.fieldContext_SessionToken_roles(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SessionToken", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_switchAccount_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_registerAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_registerAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RegisterAccount(rctx, fc.Args["input"].(models1.AccountCreateInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"account.register"})
			if err != nil {
				var zeroVal *models1.AccountCreatePayload
				return zeroVal, err
			}
			if ec.directives.HasPermissions == nil {
				var zeroVal *models1.AccountCreatePayload
				return zeroVal, errors.New("directive hasPermissions is not implemented")
			}
			return ec.directives.HasPermissions(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models1.AccountCreatePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/models.AccountCreatePayload`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.AccountCreatePayload)
	fc.Result = res
	return ec.marshalNAccountCreatePayload2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAccountCreatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_registerAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_AccountCreatePayload_clientMutationID(ctx, field)
			case "account":
				return ec.fieldContext_AccountCreatePayload_account(ctx, field)
			case "owner":
				return ec.fieldContext_AccountCreatePayload_owner(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccountCreatePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_registerAccount_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateAccount(rctx, fc.Args["id"].(uint64), fc.Args["input"].(models1.AccountInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"account.update.*"})
			if err != nil {
				var zeroVal *models1.AccountPayload
				return zeroVal, err
			}
			if ec.directives.HasPermissions == nil {
				var zeroVal *models1.AccountPayload
				return zeroVal, errors.New("directive hasPermissions is not implemented")
			}
			return ec.directives.HasPermissions(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models1.AccountPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/models.AccountPayload`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.AccountPayload)
	fc.Result = res
	return ec.marshalNAccountPayload2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAccountPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_AccountPayload_clientMutationID(ctx, field)
			case "accountID":
				return ec.fieldContext_AccountPayload_accountID(ctx, field)
			case "account":
				return ec.fieldContext_AccountPayload_account(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccountPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateAccount_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_approveAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_approveAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ApproveAccount(rctx, fc.Args["id"].(uint64), fc.Args["msg"].(string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"account.approve.*"})
			if err != nil {
				var zeroVal *models1.AccountPayload
				return zeroVal, err
			}
			if ec.directives.HasPermissions == nil {
				var zeroVal *models1.AccountPayload
				return zeroVal, errors.New("directive hasPermissions is not implemented")
			}
			return ec.directives.HasPermissions(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models1.AccountPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/models.AccountPayload`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.AccountPayload)
	fc.Result = res
	return ec.marshalNAccountPayload2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAccountPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_approveAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_AccountPayload_clientMutationID(ctx, field)
			case "accountID":
				return ec.fieldContext_AccountPayload_accountID(ctx, field)
			case "account":
				return ec.fieldContext_AccountPayload_account(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccountPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_approveAccount_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_rejectAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_rejectAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RejectAccount(rctx, fc.Args["id"].(uint64), fc.Args["msg"].(string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"account.reject.*"})
			if err != nil {
				var zeroVal *models1.AccountPayload
				return zeroVal, err
			}
			if ec.directives.HasPermissions == nil {
				var zeroVal *models1.AccountPayload
				return zeroVal, errors.New("directive hasPermissions is not implemented")
			}
			return ec.directives.HasPermissions(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models1.AccountPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/models.AccountPayload`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.AccountPayload)
	fc.Result = res
	return ec.marshalNAccountPayload2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAccountPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_rejectAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_AccountPayload_clientMutationID(ctx, field)
			case "accountID":
				return ec.fieldContext_AccountPayload_accountID(ctx, field)
			case "account":
				return ec.fieldContext_AccountPayload_account(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccountPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_rejectAccount_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_inviteAccountMember(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_inviteAccountMember(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().InviteAccountMember(rctx, fc.Args["accountID"].(uint64), fc.Args["member"].(models1.InviteMemberInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"account.member.invite.*"})
			if err != nil {
				var zeroVal *models1.MemberPayload
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models1.MemberPayload
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models1.MemberPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/models.MemberPayload`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.MemberPayload)
	fc.Result = res
	return ec.marshalNMemberPayload2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐMemberPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_inviteAccountMember(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_MemberPayload_clientMutationID(ctx, field)
			case "memberID":
				return ec.fieldContext_MemberPayload_memberID(ctx, field)
			case "member":
				return ec.fieldContext_MemberPayload_member(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MemberPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_inviteAccountMember_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateAccountMember(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateAccountMember(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateAccountMember(rctx, fc.Args["memberID"].(uint64), fc.Args["member"].(models1.MemberInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"account.member.update.*"})
			if err != nil {
				var zeroVal *models1.MemberPayload
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models1.MemberPayload
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models1.MemberPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/models.MemberPayload`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.MemberPayload)
	fc.Result = res
	return ec.marshalNMemberPayload2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐMemberPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateAccountMember(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_MemberPayload_clientMutationID(ctx, field)
			case "memberID":
				return ec.fieldContext_MemberPayload_memberID(ctx, field)
			case "member":
				return ec.fieldContext_MemberPayload_member(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MemberPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateAccountMember_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_removeAccountMember(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_removeAccountMember(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RemoveAccountMember(rctx, fc.Args["memberID"].(uint64))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"account.member.delete.*"})
			if err != nil {
				var zeroVal *models1.MemberPayload
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models1.MemberPayload
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models1.MemberPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/models.MemberPayload`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.MemberPayload)
	fc.Result = res
	return ec.marshalNMemberPayload2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐMemberPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_removeAccountMember(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_MemberPayload_clientMutationID(ctx, field)
			case "memberID":
				return ec.fieldContext_MemberPayload_memberID(ctx, field)
			case "member":
				return ec.fieldContext_MemberPayload_member(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MemberPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_removeAccountMember_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_approveAccountMember(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_approveAccountMember(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ApproveAccountMember(rctx, fc.Args["memberID"].(uint64), fc.Args["msg"].(string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"account.member.approve.*"})
			if err != nil {
				var zeroVal *models1.MemberPayload
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models1.MemberPayload
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models1.MemberPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/models.MemberPayload`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.MemberPayload)
	fc.Result = res
	return ec.marshalNMemberPayload2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐMemberPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_approveAccountMember(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_MemberPayload_clientMutationID(ctx, field)
			case "memberID":
				return ec.fieldContext_MemberPayload_memberID(ctx, field)
			case "member":
				return ec.fieldContext_MemberPayload_member(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MemberPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_approveAccountMember_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_rejectAccountMember(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_rejectAccountMember(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RejectAccountMember(rctx, fc.Args["memberID"].(uint64), fc.Args["msg"].(string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"account.member.reject.*"})
			if err != nil {
				var zeroVal *models1.MemberPayload
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models1.MemberPayload
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models1.MemberPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/models.MemberPayload`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.MemberPayload)
	fc.Result = res
	return ec.marshalNMemberPayload2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐMemberPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_rejectAccountMember(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_MemberPayload_clientMutationID(ctx, field)
			case "memberID":
				return ec.fieldContext_MemberPayload_memberID(ctx, field)
			case "member":
				return ec.fieldContext_MemberPayload_member(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MemberPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_rejectAccountMember_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_disconnectSocialAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_disconnectSocialAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DisconnectSocialAccount(rctx, fc.Args["id"].(uint64))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"account_social.disconnect.*"})
			if err != nil {
				var zeroVal *models1.SocialAccountPayload
				return zeroVal, err
			}
			if ec.directives.HasPermissions == nil {
				var zeroVal *models1.SocialAccountPayload
				return zeroVal, errors.New("directive hasPermissions is not implemented")
			}
			return ec.directives.HasPermissions(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models1.SocialAccountPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/models.SocialAccountPayload`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.SocialAccountPayload)
	fc.Result = res
	return ec.marshalNSocialAccountPayload2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐSocialAccountPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_disconnectSocialAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_SocialAccountPayload_clientMutationID(ctx, field)
			case "socialAccountID":
				return ec.fieldContext_SocialAccountPayload_socialAccountID(ctx, field)
			case "socialAccount":
				return ec.fieldContext_SocialAccountPayload_socialAccount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SocialAccountPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_disconnectSocialAccount_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateUser(rctx, fc.Args["input"].(models1.UserInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"user.create.*"})
			if err != nil {
				var zeroVal *models1.UserPayload
				return zeroVal, err
			}
			if ec.directives.HasPermissions == nil {
				var zeroVal *models1.UserPayload
				return zeroVal, errors.New("directive hasPermissions is not implemented")
			}
			return ec.directives.HasPermissions(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models1.UserPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/models.UserPayload`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.UserPayload)
	fc.Result = res
	return ec.marshalNUserPayload2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐUserPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_UserPayload_clientMutationID(ctx, field)
			case "userID":
				return ec.fieldContext_UserPayload_userID(ctx, field)
			case "user":
				return ec.fieldContext_UserPayload_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateUser(rctx, fc.Args["id"].(uint64), fc.Args["input"].(models1.UserInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"user.update.*"})
			if err != nil {
				var zeroVal *models1.UserPayload
				return zeroVal, err
			}
			if ec.directives.HasPermissions == nil {
				var zeroVal *models1.UserPayload
				return zeroVal, errors.New("directive hasPermissions is not implemented")
			}
			return ec.directives.HasPermissions(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models1.UserPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/models.UserPayload`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.UserPayload)
	fc.Result = res
	return ec.marshalNUserPayload2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐUserPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_UserPayload_clientMutationID(ctx, field)
			case "userID":
				return ec.fieldContext_UserPayload_userID(ctx, field)
			case "user":
				return ec.fieldContext_UserPayload_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_approveUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_approveUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ApproveUser(rctx, fc.Args["id"].(uint64), fc.Args["msg"].(*string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"user.approve.*"})
			if err != nil {
				var zeroVal *models1.UserPayload
				return zeroVal, err
			}
			if ec.directives.HasPermissions == nil {
				var zeroVal *models1.UserPayload
				return zeroVal, errors.New("directive hasPermissions is not implemented")
			}
			return ec.directives.HasPermissions(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models1.UserPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/models.UserPayload`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.UserPayload)
	fc.Result = res
	return ec.marshalNUserPayload2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐUserPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_approveUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_UserPayload_clientMutationID(ctx, field)
			case "userID":
				return ec.fieldContext_UserPayload_userID(ctx, field)
			case "user":
				return ec.fieldContext_UserPayload_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_approveUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_rejectUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_rejectUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RejectUser(rctx, fc.Args["id"].(uint64), fc.Args["msg"].(*string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"user.reject.*"})
			if err != nil {
				var zeroVal *models1.UserPayload
				return zeroVal, err
			}
			if ec.directives.HasPermissions == nil {
				var zeroVal *models1.UserPayload
				return zeroVal, errors.New("directive hasPermissions is not implemented")
			}
			return ec.directives.HasPermissions(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models1.UserPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/models.UserPayload`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.UserPayload)
	fc.Result = res
	return ec.marshalNUserPayload2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐUserPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_rejectUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_UserPayload_clientMutationID(ctx, field)
			case "userID":
				return ec.fieldContext_UserPayload_userID(ctx, field)
			case "user":
				return ec.fieldContext_UserPayload_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_rejectUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_resetUserPassword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_resetUserPassword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ResetUserPassword(rctx, fc.Args["email"].(string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"user.password.reset.*"})
			if err != nil {
				var zeroVal *models1.StatusResponse
				return zeroVal, err
			}
			if ec.directives.HasPermissions == nil {
				var zeroVal *models1.StatusResponse
				return zeroVal, errors.New("directive hasPermissions is not implemented")
			}
			return ec.directives.HasPermissions(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models1.StatusResponse); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/models.StatusResponse`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.StatusResponse)
	fc.Result = res
	return ec.marshalNStatusResponse2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐStatusResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_resetUserPassword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_StatusResponse_clientMutationID(ctx, field)
			case "status":
				return ec.fieldContext_StatusResponse_status(ctx, field)
			case "message":
				return ec.fieldContext_StatusResponse_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StatusResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_resetUserPassword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateUserPassword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateUserPassword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateUserPassword(rctx, fc.Args["token"].(string), fc.Args["email"].(string), fc.Args["password"].(string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"user.password.reset.*"})
			if err != nil {
				var zeroVal *models1.StatusResponse
				return zeroVal, err
			}
			if ec.directives.HasPermissions == nil {
				var zeroVal *models1.StatusResponse
				return zeroVal, errors.New("directive hasPermissions is not implemented")
			}
			return ec.directives.HasPermissions(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models1.StatusResponse); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/models.StatusResponse`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.StatusResponse)
	fc.Result = res
	return ec.marshalNStatusResponse2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐStatusResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateUserPassword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_StatusResponse_clientMutationID(ctx, field)
			case "status":
				return ec.fieldContext_StatusResponse_status(ctx, field)
			case "message":
				return ec.fieldContext_StatusResponse_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StatusResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateUserPassword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createAuthClient(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createAuthClient(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateAuthClient(rctx, fc.Args["input"].(models1.AuthClientInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"auth_client.create.*"})
			if err != nil {
				var zeroVal *models1.AuthClientPayload
				return zeroVal, err
			}
			if ec.directives.HasPermissions == nil {
				var zeroVal *models1.AuthClientPayload
				return zeroVal, errors.New("directive hasPermissions is not implemented")
			}
			return ec.directives.HasPermissions(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models1.AuthClientPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/models.AuthClientPayload`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.AuthClientPayload)
	fc.Result = res
	return ec.marshalNAuthClientPayload2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAuthClientPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createAuthClient(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_AuthClientPayload_clientMutationID(ctx, field)
			case "authClientID":
				return ec.fieldContext_AuthClientPayload_authClientID(ctx, field)
			case "authClient":
				return ec.fieldContext_AuthClientPayload_authClient(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AuthClientPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createAuthClient_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateAuthClient(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateAuthClient(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateAuthClient(rctx, fc.Args["id"].(string), fc.Args["input"].(models1.AuthClientInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"auth_client.update.*"})
			if err != nil {
				var zeroVal *models1.AuthClientPayload
				return zeroVal, err
			}
			if ec.directives.HasPermissions == nil {
				var zeroVal *models1.AuthClientPayload
				return zeroVal, errors.New("directive hasPermissions is not implemented")
			}
			return ec.directives.HasPermissions(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models1.AuthClientPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/models.AuthClientPayload`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.AuthClientPayload)
	fc.Result = res
	return ec.marshalNAuthClientPayload2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAuthClientPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateAuthClient(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_AuthClientPayload_clientMutationID(ctx, field)
			case "authClientID":
				return ec.fieldContext_AuthClientPayload_authClientID(ctx, field)
			case "authClient":
				return ec.fieldContext_AuthClientPayload_authClient(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AuthClientPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateAuthClient_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteAuthClient(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteAuthClient(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteAuthClient(rctx, fc.Args["id"].(string), fc.Args["msg"].(*string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"auth_client.delete.*"})
			if err != nil {
				var zeroVal *models1.AuthClientPayload
				return zeroVal, err
			}
			if ec.directives.HasPermissions == nil {
				var zeroVal *models1.AuthClientPayload
				return zeroVal, errors.New("directive hasPermissions is not implemented")
			}
			return ec.directives.HasPermissions(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models1.AuthClientPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/models.AuthClientPayload`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.AuthClientPayload)
	fc.Result = res
	return ec.marshalNAuthClientPayload2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAuthClientPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteAuthClient(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_AuthClientPayload_clientMutationID(ctx, field)
			case "authClientID":
				return ec.fieldContext_AuthClientPayload_authClientID(ctx, field)
			case "authClient":
				return ec.fieldContext_AuthClientPayload_authClient(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AuthClientPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteAuthClient_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_generateDirectAccessToken(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_generateDirectAccessToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().GenerateDirectAccessToken(rctx, fc.Args["userID"].(*uint64), fc.Args["description"].(string), fc.Args["expiresAt"].(*time.Time))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"directaccesstoken.create.*"})
			if err != nil {
				var zeroVal *models1.DirectAccessTokenPayload
				return zeroVal, err
			}
			if ec.directives.HasPermissions == nil {
				var zeroVal *models1.DirectAccessTokenPayload
				return zeroVal, errors.New("directive hasPermissions is not implemented")
			}
			return ec.directives.HasPermissions(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models1.DirectAccessTokenPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/models.DirectAccessTokenPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models1.DirectAccessTokenPayload)
	fc.Result = res
	return ec.marshalODirectAccessTokenPayload2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐDirectAccessTokenPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_generateDirectAccessToken(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_DirectAccessTokenPayload_clientMutationID(ctx, field)
			case "token":
				return ec.fieldContext_DirectAccessTokenPayload_token(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DirectAccessTokenPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_generateDirectAccessToken_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_revokeDirectAccessToken(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_revokeDirectAccessToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RevokeDirectAccessToken(rctx, fc.Args["filter"].(models1.DirectAccessTokenListFilter))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"directaccesstoken.delete.*"})
			if err != nil {
				var zeroVal *models1.StatusResponse
				return zeroVal, err
			}
			if ec.directives.HasPermissions == nil {
				var zeroVal *models1.StatusResponse
				return zeroVal, errors.New("directive hasPermissions is not implemented")
			}
			return ec.directives.HasPermissions(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models1.StatusResponse); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/models.StatusResponse`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models1.StatusResponse)
	fc.Result = res
	return ec.marshalOStatusResponse2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐStatusResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_revokeDirectAccessToken(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_StatusResponse_clientMutationID(ctx, field)
			case "status":
				return ec.fieldContext_StatusResponse_status(ctx, field)
			case "message":
				return ec.fieldContext_StatusResponse_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StatusResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_revokeDirectAccessToken_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_setOption(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_setOption(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().SetOption(rctx, fc.Args["name"].(string), fc.Args["value"].(*types.NullableJSON), fc.Args["type"].(models1.OptionType), fc.Args["targetID"].(uint64))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"option.set.*"})
			if err != nil {
				var zeroVal *models1.OptionPayload
				return zeroVal, err
			}
			if ec.directives.HasPermissions == nil {
				var zeroVal *models1.OptionPayload
				return zeroVal, errors.New("directive hasPermissions is not implemented")
			}
			return ec.directives.HasPermissions(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models1.OptionPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/models.OptionPayload`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.OptionPayload)
	fc.Result = res
	return ec.marshalNOptionPayload2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOptionPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_setOption(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationId":
				return ec.fieldContext_OptionPayload_clientMutationId(ctx, field)
			case "name":
				return ec.fieldContext_OptionPayload_name(ctx, field)
			case "option":
				return ec.fieldContext_OptionPayload_option(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OptionPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_setOption_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createRole(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateRole(rctx, fc.Args["input"].(models1.RBACRoleInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"role.create.*"})
			if err != nil {
				var zeroVal *models1.RBACRolePayload
				return zeroVal, err
			}
			if ec.directives.HasPermissions == nil {
				var zeroVal *models1.RBACRolePayload
				return zeroVal, errors.New("directive hasPermissions is not implemented")
			}
			return ec.directives.HasPermissions(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models1.RBACRolePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/models.RBACRolePayload`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.RBACRolePayload)
	fc.Result = res
	return ec.marshalNRBACRolePayload2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐRBACRolePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_RBACRolePayload_clientMutationID(ctx, field)
			case "roleID":
				return ec.fieldContext_RBACRolePayload_roleID(ctx, field)
			case "role":
				return ec.fieldContext_RBACRolePayload_role(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RBACRolePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createRole_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateRole(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateRole(rctx, fc.Args["id"].(uint64), fc.Args["input"].(models1.RBACRoleInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"role.update.*"})
			if err != nil {
				var zeroVal *models1.RBACRolePayload
				return zeroVal, err
			}
			if ec.directives.HasPermissions == nil {
				var zeroVal *models1.RBACRolePayload
				return zeroVal, errors.New("directive hasPermissions is not implemented")
			}
			return ec.directives.HasPermissions(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models1.RBACRolePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/models.RBACRolePayload`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.RBACRolePayload)
	fc.Result = res
	return ec.marshalNRBACRolePayload2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐRBACRolePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_RBACRolePayload_clientMutationID(ctx, field)
			case "roleID":
				return ec.fieldContext_RBACRolePayload_roleID(ctx, field)
			case "role":
				return ec.fieldContext_RBACRolePayload_role(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RBACRolePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateRole_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteRole(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteRole(rctx, fc.Args["id"].(uint64), fc.Args["msg"].(*string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"role.delete.*"})
			if err != nil {
				var zeroVal *models1.RBACRolePayload
				return zeroVal, err
			}
			if ec.directives.HasPermissions == nil {
				var zeroVal *models1.RBACRolePayload
				return zeroVal, errors.New("directive hasPermissions is not implemented")
			}
			return ec.directives.HasPermissions(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models1.RBACRolePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/models.RBACRolePayload`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.RBACRolePayload)
	fc.Result = res
	return ec.marshalNRBACRolePayload2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐRBACRolePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_RBACRolePayload_clientMutationID(ctx, field)
			case "roleID":
				return ec.fieldContext_RBACRolePayload_roleID(ctx, field)
			case "role":
				return ec.fieldContext_RBACRolePayload_role(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RBACRolePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteRole_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createFormat(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createFormat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateFormat(rctx, fc.Args["input"].(models.AdFormatInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"adv_format.create.*"})
			if err != nil {
				var zeroVal *models.AdFormatPayload
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models.AdFormatPayload
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.AdFormatPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sspserver/api/internal/server/graphql/models.AdFormatPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.AdFormatPayload)
	fc.Result = res
	return ec.marshalOAdFormatPayload2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐAdFormatPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createFormat(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_AdFormatPayload_clientMutationID(ctx, field)
			case "formatID":
				return ec.fieldContext_AdFormatPayload_formatID(ctx, field)
			case "format":
				return ec.fieldContext_AdFormatPayload_format(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AdFormatPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createFormat_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateFormat(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateFormat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateFormat(rctx, fc.Args["ID"].(uint64), fc.Args["input"].(models.AdFormatInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"adv_format.update.*"})
			if err != nil {
				var zeroVal *models.AdFormatPayload
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models.AdFormatPayload
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.AdFormatPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sspserver/api/internal/server/graphql/models.AdFormatPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.AdFormatPayload)
	fc.Result = res
	return ec.marshalOAdFormatPayload2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐAdFormatPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateFormat(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_AdFormatPayload_clientMutationID(ctx, field)
			case "formatID":
				return ec.fieldContext_AdFormatPayload_formatID(ctx, field)
			case "format":
				return ec.fieldContext_AdFormatPayload_format(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AdFormatPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateFormat_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteFormat(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteFormat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteFormat(rctx, fc.Args["ID"].(uint64), fc.Args["codename"].(string), fc.Args["msg"].(*string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"adv_format.delete.*"})
			if err != nil {
				var zeroVal *models.AdFormatPayload
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models.AdFormatPayload
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.AdFormatPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sspserver/api/internal/server/graphql/models.AdFormatPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.AdFormatPayload)
	fc.Result = res
	return ec.marshalOAdFormatPayload2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐAdFormatPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteFormat(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_AdFormatPayload_clientMutationID(ctx, field)
			case "formatID":
				return ec.fieldContext_AdFormatPayload_formatID(ctx, field)
			case "format":
				return ec.fieldContext_AdFormatPayload_format(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AdFormatPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteFormat_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createApplication(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createApplication(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateApplication(rctx, fc.Args["input"].(models.ApplicationCreateInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"adv_application.create.*"})
			if err != nil {
				var zeroVal *models.ApplicationPayload
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models.ApplicationPayload
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.ApplicationPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sspserver/api/internal/server/graphql/models.ApplicationPayload`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ApplicationPayload)
	fc.Result = res
	return ec.marshalNApplicationPayload2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐApplicationPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createApplication(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_ApplicationPayload_clientMutationID(ctx, field)
			case "applicationID":
				return ec.fieldContext_ApplicationPayload_applicationID(ctx, field)
			case "application":
				return ec.fieldContext_ApplicationPayload_application(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApplicationPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createApplication_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateApplication(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateApplication(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateApplication(rctx, fc.Args["ID"].(uint64), fc.Args["input"].(models.ApplicationUpdateInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"adv_application.update.*"})
			if err != nil {
				var zeroVal *models.ApplicationPayload
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models.ApplicationPayload
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.ApplicationPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sspserver/api/internal/server/graphql/models.ApplicationPayload`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ApplicationPayload)
	fc.Result = res
	return ec.marshalNApplicationPayload2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐApplicationPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateApplication(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_ApplicationPayload_clientMutationID(ctx, field)
			case "applicationID":
				return ec.fieldContext_ApplicationPayload_applicationID(ctx, field)
			case "application":
				return ec.fieldContext_ApplicationPayload_application(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApplicationPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateApplication_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteApplication(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteApplication(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteApplication(rctx, fc.Args["ID"].(uint64), fc.Args["msg"].(*string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"adv_application.delete.*"})
			if err != nil {
				var zeroVal *models.ApplicationPayload
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models.ApplicationPayload
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.ApplicationPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sspserver/api/internal/server/graphql/models.ApplicationPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ApplicationPayload)
	fc.Result = res
	return ec.marshalOApplicationPayload2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐApplicationPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteApplication(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_ApplicationPayload_clientMutationID(ctx, field)
			case "applicationID":
				return ec.fieldContext_ApplicationPayload_applicationID(ctx, field)
			case "application":
				return ec.fieldContext_ApplicationPayload_application(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApplicationPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteApplication_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_runApplication(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_runApplication(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RunApplication(rctx, fc.Args["ID"].(uint64), fc.Args["msg"].(*string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"adv_application.update.*"})
			if err != nil {
				var zeroVal *models1.StatusResponse
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models1.StatusResponse
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models1.StatusResponse); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/models.StatusResponse`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.StatusResponse)
	fc.Result = res
	return ec.marshalNStatusResponse2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐStatusResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_runApplication(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_StatusResponse_clientMutationID(ctx, field)
			case "status":
				return ec.fieldContext_StatusResponse_status(ctx, field)
			case "message":
				return ec.fieldContext_StatusResponse_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StatusResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_runApplication_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_pauseApplication(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_pauseApplication(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().PauseApplication(rctx, fc.Args["ID"].(uint64), fc.Args["msg"].(*string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"adv_application.update.*"})
			if err != nil {
				var zeroVal *models1.StatusResponse
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models1.StatusResponse
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models1.StatusResponse); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/models.StatusResponse`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.StatusResponse)
	fc.Result = res
	return ec.marshalNStatusResponse2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐStatusResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_pauseApplication(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_StatusResponse_clientMutationID(ctx, field)
			case "status":
				return ec.fieldContext_StatusResponse_status(ctx, field)
			case "message":
				return ec.fieldContext_StatusResponse_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StatusResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_pauseApplication_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_approveApplication(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_approveApplication(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ApproveApplication(rctx, fc.Args["ID"].(uint64), fc.Args["msg"].(*string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"adv_application.approve.*"})
			if err != nil {
				var zeroVal *models1.StatusResponse
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models1.StatusResponse
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models1.StatusResponse); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/models.StatusResponse`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.StatusResponse)
	fc.Result = res
	return ec.marshalNStatusResponse2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐStatusResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_approveApplication(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_StatusResponse_clientMutationID(ctx, field)
			case "status":
				return ec.fieldContext_StatusResponse_status(ctx, field)
			case "message":
				return ec.fieldContext_StatusResponse_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StatusResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_approveApplication_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_rejectApplication(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_rejectApplication(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RejectApplication(rctx, fc.Args["ID"].(uint64), fc.Args["msg"].(*string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"adv_application.reject.*"})
			if err != nil {
				var zeroVal *models1.StatusResponse
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models1.StatusResponse
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models1.StatusResponse); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/models.StatusResponse`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.StatusResponse)
	fc.Result = res
	return ec.marshalNStatusResponse2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐStatusResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_rejectApplication(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_StatusResponse_clientMutationID(ctx, field)
			case "status":
				return ec.fieldContext_StatusResponse_status(ctx, field)
			case "message":
				return ec.fieldContext_StatusResponse_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StatusResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_rejectApplication_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createBrowser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createBrowser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateBrowser(rctx, fc.Args["input"].(models.BrowserCreateInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"type_browser.create.*"})
			if err != nil {
				var zeroVal *models.BrowserPayload
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models.BrowserPayload
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.BrowserPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sspserver/api/internal/server/graphql/models.BrowserPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.BrowserPayload)
	fc.Result = res
	return ec.marshalOBrowserPayload2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐBrowserPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createBrowser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_BrowserPayload_clientMutationID(ctx, field)
			case "browserID":
				return ec.fieldContext_BrowserPayload_browserID(ctx, field)
			case "browser":
				return ec.fieldContext_BrowserPayload_browser(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BrowserPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createBrowser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateBrowser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateBrowser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateBrowser(rctx, fc.Args["ID"].(uint64), fc.Args["input"].(models.BrowserUpdateInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"type_browser.update.*"})
			if err != nil {
				var zeroVal *models.BrowserPayload
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models.BrowserPayload
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.BrowserPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sspserver/api/internal/server/graphql/models.BrowserPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.BrowserPayload)
	fc.Result = res
	return ec.marshalOBrowserPayload2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐBrowserPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateBrowser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_BrowserPayload_clientMutationID(ctx, field)
			case "browserID":
				return ec.fieldContext_BrowserPayload_browserID(ctx, field)
			case "browser":
				return ec.fieldContext_BrowserPayload_browser(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BrowserPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateBrowser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteBrowser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteBrowser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteBrowser(rctx, fc.Args["ID"].(uint64), fc.Args["msg"].(*string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"type_browser.delete.*"})
			if err != nil {
				var zeroVal *models.BrowserPayload
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models.BrowserPayload
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.BrowserPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sspserver/api/internal/server/graphql/models.BrowserPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.BrowserPayload)
	fc.Result = res
	return ec.marshalOBrowserPayload2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐBrowserPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteBrowser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_BrowserPayload_clientMutationID(ctx, field)
			case "browserID":
				return ec.fieldContext_BrowserPayload_browserID(ctx, field)
			case "browser":
				return ec.fieldContext_BrowserPayload_browser(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BrowserPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteBrowser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createCategory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createCategory(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateCategory(rctx, fc.Args["input"].(models.CategoryInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"adv_category.create.*"})
			if err != nil {
				var zeroVal *models.CategoryPayload
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models.CategoryPayload
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.CategoryPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sspserver/api/internal/server/graphql/models.CategoryPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.CategoryPayload)
	fc.Result = res
	return ec.marshalOCategoryPayload2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐCategoryPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createCategory(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_CategoryPayload_clientMutationID(ctx, field)
			case "categoryID":
				return ec.fieldContext_CategoryPayload_categoryID(ctx, field)
			case "category":
				return ec.fieldContext_CategoryPayload_category(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CategoryPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createCategory_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateCategory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateCategory(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateCategory(rctx, fc.Args["ID"].(uint64), fc.Args["input"].(models.CategoryInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"adv_category.update.*"})
			if err != nil {
				var zeroVal *models.CategoryPayload
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models.CategoryPayload
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.CategoryPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sspserver/api/internal/server/graphql/models.CategoryPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.CategoryPayload)
	fc.Result = res
	return ec.marshalOCategoryPayload2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐCategoryPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateCategory(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_CategoryPayload_clientMutationID(ctx, field)
			case "categoryID":
				return ec.fieldContext_CategoryPayload_categoryID(ctx, field)
			case "category":
				return ec.fieldContext_CategoryPayload_category(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CategoryPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateCategory_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteCategory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteCategory(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteCategory(rctx, fc.Args["ID"].(uint64), fc.Args["msg"].(*string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"adv_category.delete.*"})
			if err != nil {
				var zeroVal *models.CategoryPayload
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models.CategoryPayload
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.CategoryPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sspserver/api/internal/server/graphql/models.CategoryPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.CategoryPayload)
	fc.Result = res
	return ec.marshalOCategoryPayload2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐCategoryPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteCategory(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_CategoryPayload_clientMutationID(ctx, field)
			case "categoryID":
				return ec.fieldContext_CategoryPayload_categoryID(ctx, field)
			case "category":
				return ec.fieldContext_CategoryPayload_category(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CategoryPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteCategory_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createDeviceMaker(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createDeviceMaker(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateDeviceMaker(rctx, fc.Args["input"].(models.DeviceMakerCreateInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"device_maker.create.*"})
			if err != nil {
				var zeroVal *models.DeviceMakerPayload
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models.DeviceMakerPayload
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.DeviceMakerPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sspserver/api/internal/server/graphql/models.DeviceMakerPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.DeviceMakerPayload)
	fc.Result = res
	return ec.marshalODeviceMakerPayload2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceMakerPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createDeviceMaker(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_DeviceMakerPayload_clientMutationID(ctx, field)
			case "makerID":
				return ec.fieldContext_DeviceMakerPayload_makerID(ctx, field)
			case "maker":
				return ec.fieldContext_DeviceMakerPayload_maker(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceMakerPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createDeviceMaker_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateDeviceMaker(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateDeviceMaker(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateDeviceMaker(rctx, fc.Args["ID"].(uint64), fc.Args["input"].(models.DeviceMakerUpdateInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"device_maker.update.*"})
			if err != nil {
				var zeroVal *models.DeviceMakerPayload
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models.DeviceMakerPayload
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.DeviceMakerPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sspserver/api/internal/server/graphql/models.DeviceMakerPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.DeviceMakerPayload)
	fc.Result = res
	return ec.marshalODeviceMakerPayload2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceMakerPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateDeviceMaker(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_DeviceMakerPayload_clientMutationID(ctx, field)
			case "makerID":
				return ec.fieldContext_DeviceMakerPayload_makerID(ctx, field)
			case "maker":
				return ec.fieldContext_DeviceMakerPayload_maker(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceMakerPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateDeviceMaker_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteDeviceMaker(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteDeviceMaker(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteDeviceMaker(rctx, fc.Args["ID"].(uint64), fc.Args["msg"].(*string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"device_maker.delete.*"})
			if err != nil {
				var zeroVal *models.DeviceMakerPayload
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models.DeviceMakerPayload
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.DeviceMakerPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sspserver/api/internal/server/graphql/models.DeviceMakerPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.DeviceMakerPayload)
	fc.Result = res
	return ec.marshalODeviceMakerPayload2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceMakerPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteDeviceMaker(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_DeviceMakerPayload_clientMutationID(ctx, field)
			case "makerID":
				return ec.fieldContext_DeviceMakerPayload_makerID(ctx, field)
			case "maker":
				return ec.fieldContext_DeviceMakerPayload_maker(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceMakerPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteDeviceMaker_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createDeviceModel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createDeviceModel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateDeviceModel(rctx, fc.Args["input"].(models.DeviceModelCreateInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"device_model.create.*"})
			if err != nil {
				var zeroVal *models.DeviceModelPayload
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models.DeviceModelPayload
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.DeviceModelPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sspserver/api/internal/server/graphql/models.DeviceModelPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.DeviceModelPayload)
	fc.Result = res
	return ec.marshalODeviceModelPayload2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceModelPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createDeviceModel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_DeviceModelPayload_clientMutationID(ctx, field)
			case "modelID":
				return ec.fieldContext_DeviceModelPayload_modelID(ctx, field)
			case "model":
				return ec.fieldContext_DeviceModelPayload_model(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceModelPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createDeviceModel_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateDeviceModel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateDeviceModel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateDeviceModel(rctx, fc.Args["ID"].(uint64), fc.Args["input"].(models.DeviceModelUpdateInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"device_model.update.*"})
			if err != nil {
				var zeroVal *models.DeviceModelPayload
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models.DeviceModelPayload
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.DeviceModelPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sspserver/api/internal/server/graphql/models.DeviceModelPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.DeviceModelPayload)
	fc.Result = res
	return ec.marshalODeviceModelPayload2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceModelPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateDeviceModel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_DeviceModelPayload_clientMutationID(ctx, field)
			case "modelID":
				return ec.fieldContext_DeviceModelPayload_modelID(ctx, field)
			case "model":
				return ec.fieldContext_DeviceModelPayload_model(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceModelPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateDeviceModel_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteDeviceModel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteDeviceModel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteDeviceModel(rctx, fc.Args["ID"].(uint64), fc.Args["msg"].(*string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"device_model.delete.*"})
			if err != nil {
				var zeroVal *models.DeviceModelPayload
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models.DeviceModelPayload
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.DeviceModelPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sspserver/api/internal/server/graphql/models.DeviceModelPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.DeviceModelPayload)
	fc.Result = res
	return ec.marshalODeviceModelPayload2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceModelPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteDeviceModel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_DeviceModelPayload_clientMutationID(ctx, field)
			case "modelID":
				return ec.fieldContext_DeviceModelPayload_modelID(ctx, field)
			case "model":
				return ec.fieldContext_DeviceModelPayload_model(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceModelPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteDeviceModel_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createOS(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createOS(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateOs(rctx, fc.Args["input"].(models.OSCreateInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"type_os.create.*"})
			if err != nil {
				var zeroVal *models.OSPayload
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models.OSPayload
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.OSPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sspserver/api/internal/server/graphql/models.OSPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.OSPayload)
	fc.Result = res
	return ec.marshalOOSPayload2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐOSPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createOS(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_OSPayload_clientMutationID(ctx, field)
			case "OSID":
				return ec.fieldContext_OSPayload_OSID(ctx, field)
			case "OS":
				return ec.fieldContext_OSPayload_OS(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OSPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createOS_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateOS(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateOS(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateOs(rctx, fc.Args["ID"].(uint64), fc.Args["input"].(models.OSUpdateInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"type_os.update.*"})
			if err != nil {
				var zeroVal *models.OSPayload
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models.OSPayload
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.OSPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sspserver/api/internal/server/graphql/models.OSPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.OSPayload)
	fc.Result = res
	return ec.marshalOOSPayload2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐOSPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateOS(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_OSPayload_clientMutationID(ctx, field)
			case "OSID":
				return ec.fieldContext_OSPayload_OSID(ctx, field)
			case "OS":
				return ec.fieldContext_OSPayload_OS(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OSPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateOS_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteOS(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteOS(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteOs(rctx, fc.Args["ID"].(uint64), fc.Args["msg"].(*string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"type_os.delete.*"})
			if err != nil {
				var zeroVal *models.OSPayload
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models.OSPayload
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.OSPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sspserver/api/internal/server/graphql/models.OSPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.OSPayload)
	fc.Result = res
	return ec.marshalOOSPayload2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐOSPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteOS(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_OSPayload_clientMutationID(ctx, field)
			case "OSID":
				return ec.fieldContext_OSPayload_OSID(ctx, field)
			case "OS":
				return ec.fieldContext_OSPayload_OS(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OSPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteOS_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createRTBSource(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createRTBSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateRTBSource(rctx, fc.Args["input"].(models.RTBSourceInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"rtb_source.create.*"})
			if err != nil {
				var zeroVal *models.RTBSourcePayload
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models.RTBSourcePayload
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.RTBSourcePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sspserver/api/internal/server/graphql/models.RTBSourcePayload`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.RTBSourcePayload)
	fc.Result = res
	return ec.marshalNRTBSourcePayload2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐRTBSourcePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createRTBSource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_RTBSourcePayload_clientMutationID(ctx, field)
			case "sourceID":
				return ec.fieldContext_RTBSourcePayload_sourceID(ctx, field)
			case "source":
				return ec.fieldContext_RTBSourcePayload_source(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RTBSourcePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createRTBSource_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateRTBSource(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateRTBSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateRTBSource(rctx, fc.Args["ID"].(uint64), fc.Args["input"].(models.RTBSourceInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"rtb_source.update.*"})
			if err != nil {
				var zeroVal *models.RTBSourcePayload
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models.RTBSourcePayload
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.RTBSourcePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sspserver/api/internal/server/graphql/models.RTBSourcePayload`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.RTBSourcePayload)
	fc.Result = res
	return ec.marshalNRTBSourcePayload2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐRTBSourcePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateRTBSource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_RTBSourcePayload_clientMutationID(ctx, field)
			case "sourceID":
				return ec.fieldContext_RTBSourcePayload_sourceID(ctx, field)
			case "source":
				return ec.fieldContext_RTBSourcePayload_source(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RTBSourcePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateRTBSource_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteRTBSource(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteRTBSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteRTBSource(rctx, fc.Args["ID"].(uint64), fc.Args["msg"].(*string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"rtb_source.delete.*"})
			if err != nil {
				var zeroVal *models.RTBSourcePayload
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models.RTBSourcePayload
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.RTBSourcePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sspserver/api/internal/server/graphql/models.RTBSourcePayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.RTBSourcePayload)
	fc.Result = res
	return ec.marshalORTBSourcePayload2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐRTBSourcePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteRTBSource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_RTBSourcePayload_clientMutationID(ctx, field)
			case "sourceID":
				return ec.fieldContext_RTBSourcePayload_sourceID(ctx, field)
			case "source":
				return ec.fieldContext_RTBSourcePayload_source(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RTBSourcePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteRTBSource_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_runRTBSource(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_runRTBSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RunRTBSource(rctx, fc.Args["ID"].(uint64))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"rtb_source.update.*"})
			if err != nil {
				var zeroVal *models1.StatusResponse
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models1.StatusResponse
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models1.StatusResponse); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/models.StatusResponse`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.StatusResponse)
	fc.Result = res
	return ec.marshalNStatusResponse2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐStatusResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_runRTBSource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_StatusResponse_clientMutationID(ctx, field)
			case "status":
				return ec.fieldContext_StatusResponse_status(ctx, field)
			case "message":
				return ec.fieldContext_StatusResponse_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StatusResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_runRTBSource_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_pauseRTBSource(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_pauseRTBSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().PauseRTBSource(rctx, fc.Args["ID"].(uint64))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"rtb_source.update.*"})
			if err != nil {
				var zeroVal *models1.StatusResponse
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models1.StatusResponse
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models1.StatusResponse); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/models.StatusResponse`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.StatusResponse)
	fc.Result = res
	return ec.marshalNStatusResponse2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐStatusResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_pauseRTBSource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_StatusResponse_clientMutationID(ctx, field)
			case "status":
				return ec.fieldContext_StatusResponse_status(ctx, field)
			case "message":
				return ec.fieldContext_StatusResponse_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StatusResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_pauseRTBSource_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_approveRTBSource(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_approveRTBSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ApproveRTBSource(rctx, fc.Args["ID"].(uint64), fc.Args["msg"].(*string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"rtb_source.approve.*"})
			if err != nil {
				var zeroVal *models1.StatusResponse
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models1.StatusResponse
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models1.StatusResponse); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/models.StatusResponse`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.StatusResponse)
	fc.Result = res
	return ec.marshalNStatusResponse2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐStatusResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_approveRTBSource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_StatusResponse_clientMutationID(ctx, field)
			case "status":
				return ec.fieldContext_StatusResponse_status(ctx, field)
			case "message":
				return ec.fieldContext_StatusResponse_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StatusResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_approveRTBSource_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_rejectRTBSource(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_rejectRTBSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RejectRTBSource(rctx, fc.Args["ID"].(uint64), fc.Args["msg"].(*string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"rtb_source.reject.*"})
			if err != nil {
				var zeroVal *models1.StatusResponse
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models1.StatusResponse
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models1.StatusResponse); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/models.StatusResponse`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.StatusResponse)
	fc.Result = res
	return ec.marshalNStatusResponse2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐStatusResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_rejectRTBSource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_StatusResponse_clientMutationID(ctx, field)
			case "status":
				return ec.fieldContext_StatusResponse_status(ctx, field)
			case "message":
				return ec.fieldContext_StatusResponse_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StatusResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_rejectRTBSource_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createZone(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createZone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateZone(rctx, fc.Args["input"].(models.ZoneInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"adv_zone.create.*"})
			if err != nil {
				var zeroVal *models.ZonePayload
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models.ZonePayload
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.ZonePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sspserver/api/internal/server/graphql/models.ZonePayload`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ZonePayload)
	fc.Result = res
	return ec.marshalNZonePayload2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐZonePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createZone(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_ZonePayload_clientMutationID(ctx, field)
			case "zoneID":
				return ec.fieldContext_ZonePayload_zoneID(ctx, field)
			case "zone":
				return ec.fieldContext_ZonePayload_zone(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ZonePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createZone_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateZone(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateZone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateZone(rctx, fc.Args["ID"].(uint64), fc.Args["input"].(models.ZoneInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"adv_zone.update.*"})
			if err != nil {
				var zeroVal *models.ZonePayload
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models.ZonePayload
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.ZonePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sspserver/api/internal/server/graphql/models.ZonePayload`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ZonePayload)
	fc.Result = res
	return ec.marshalNZonePayload2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐZonePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateZone(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_ZonePayload_clientMutationID(ctx, field)
			case "zoneID":
				return ec.fieldContext_ZonePayload_zoneID(ctx, field)
			case "zone":
				return ec.fieldContext_ZonePayload_zone(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ZonePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateZone_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteZone(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteZone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteZone(rctx, fc.Args["ID"].(uint64), fc.Args["msg"].(*string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"adv_zone.delete.*"})
			if err != nil {
				var zeroVal *models.ZonePayload
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models.ZonePayload
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.ZonePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sspserver/api/internal/server/graphql/models.ZonePayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ZonePayload)
	fc.Result = res
	return ec.marshalOZonePayload2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐZonePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteZone(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_ZonePayload_clientMutationID(ctx, field)
			case "zoneID":
				return ec.fieldContext_ZonePayload_zoneID(ctx, field)
			case "zone":
				return ec.fieldContext_ZonePayload_zone(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ZonePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteZone_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_activateZone(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_activateZone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ActivateZone(rctx, fc.Args["ID"].(uint64), fc.Args["msg"].(*string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"adv_zone.update.*"})
			if err != nil {
				var zeroVal *models1.StatusResponse
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models1.StatusResponse
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models1.StatusResponse); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/models.StatusResponse`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.StatusResponse)
	fc.Result = res
	return ec.marshalNStatusResponse2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐStatusResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_activateZone(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_StatusResponse_clientMutationID(ctx, field)
			case "status":
				return ec.fieldContext_StatusResponse_status(ctx, field)
			case "message":
				return ec.fieldContext_StatusResponse_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StatusResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_activateZone_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deactivateZone(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deactivateZone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeactivateZone(rctx, fc.Args["ID"].(uint64), fc.Args["msg"].(*string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"adv_zone.update.*"})
			if err != nil {
				var zeroVal *models1.StatusResponse
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models1.StatusResponse
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models1.StatusResponse); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/models.StatusResponse`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.StatusResponse)
	fc.Result = res
	return ec.marshalNStatusResponse2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐStatusResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deactivateZone(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_StatusResponse_clientMutationID(ctx, field)
			case "status":
				return ec.fieldContext_StatusResponse_status(ctx, field)
			case "message":
				return ec.fieldContext_StatusResponse_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StatusResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deactivateZone_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_approveZone(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_approveZone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ApproveZone(rctx, fc.Args["ID"].(uint64), fc.Args["msg"].(*string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"adv_zone.approve.*"})
			if err != nil {
				var zeroVal *models1.StatusResponse
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models1.StatusResponse
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models1.StatusResponse); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/models.StatusResponse`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.StatusResponse)
	fc.Result = res
	return ec.marshalNStatusResponse2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐStatusResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_approveZone(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_StatusResponse_clientMutationID(ctx, field)
			case "status":
				return ec.fieldContext_StatusResponse_status(ctx, field)
			case "message":
				return ec.fieldContext_StatusResponse_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StatusResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_approveZone_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_rejectZone(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_rejectZone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RejectZone(rctx, fc.Args["ID"].(uint64), fc.Args["msg"].(*string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"adv_zone.reject.*"})
			if err != nil {
				var zeroVal *models1.StatusResponse
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models1.StatusResponse
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models1.StatusResponse); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/models.StatusResponse`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.StatusResponse)
	fc.Result = res
	return ec.marshalNStatusResponse2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐStatusResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_rejectZone(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_StatusResponse_clientMutationID(ctx, field)
			case "status":
				return ec.fieldContext_StatusResponse_status(ctx, field)
			case "message":
				return ec.fieldContext_StatusResponse_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StatusResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_rejectZone_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _OS_ID(ctx context.Context, field graphql.CollectedField, obj *models.Os) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OS_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNID642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OS_ID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OS",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OS_name(ctx context.Context, field graphql.CollectedField, obj *models.Os) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OS_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OS_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OS",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OS_description(ctx context.Context, field graphql.CollectedField, obj *models.Os) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OS_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OS_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OS",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OS_version(ctx context.Context, field graphql.CollectedField, obj *models.Os) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OS_version(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OS_version(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OS",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OS_yearRelease(ctx context.Context, field graphql.CollectedField, obj *models.Os) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OS_yearRelease(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YearRelease, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OS_yearRelease(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OS",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OS_yearEndSupport(ctx context.Context, field graphql.CollectedField, obj *models.Os) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OS_yearEndSupport(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YearEndSupport, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OS_yearEndSupport(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OS",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OS_active(ctx context.Context, field graphql.CollectedField, obj *models.Os) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OS_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models1.ActiveStatus)
	fc.Result = res
	return ec.marshalNActiveStatus2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐActiveStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OS_active(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OS",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ActiveStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OS_matchNameExp(ctx context.Context, field graphql.CollectedField, obj *models.Os) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OS_matchNameExp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MatchNameExp, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OS_matchNameExp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OS",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OS_matchUserAgentExp(ctx context.Context, field graphql.CollectedField, obj *models.Os) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OS_matchUserAgentExp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MatchUserAgentExp, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OS_matchUserAgentExp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OS",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OS_matchVersionMinExp(ctx context.Context, field graphql.CollectedField, obj *models.Os) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OS_matchVersionMinExp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MatchVersionMinExp, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OS_matchVersionMinExp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OS",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OS_matchVersionMaxExp(ctx context.Context, field graphql.CollectedField, obj *models.Os) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OS_matchVersionMaxExp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MatchVersionMaxExp, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OS_matchVersionMaxExp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OS",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OS_parentID(ctx context.Context, field graphql.CollectedField, obj *models.Os) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OS_parentID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNID642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OS_parentID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OS",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OS_parent(ctx context.Context, field graphql.CollectedField, obj *models.Os) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OS_parent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Parent, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Os)
	fc.Result = res
	return ec.marshalOOS2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐOs(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OS_parent(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OS",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_OS_ID(ctx, field)
			case "name":
				return ec.fieldContext_OS_name(ctx, field)
			case "description":
				return ec.fieldContext_OS_description(ctx, field)
			case "version":
				return ec.fieldContext_OS_version(ctx, field)
			case "yearRelease":
				return ec.fieldContext_OS_yearRelease(ctx, field)
			case "yearEndSupport":
				return ec.fieldContext_OS_yearEndSupport(ctx, field)
			case "active":
				return ec.fieldContext_OS_active(ctx, field)
			case "matchNameExp":
				return ec.fieldContext_OS_matchNameExp(ctx, field)
			case "matchUserAgentExp":
				return ec.fieldContext_OS_matchUserAgentExp(ctx, field)
			case "matchVersionMinExp":
				return ec.fieldContext_OS_matchVersionMinExp(ctx, field)
			case "matchVersionMaxExp":
				return ec.fieldContext_OS_matchVersionMaxExp(ctx, field)
			case "parentID":
				return ec.fieldContext_OS_parentID(ctx, field)
			case "parent":
				return ec.fieldContext_OS_parent(ctx, field)
			case "versions":
				return ec.fieldContext_OS_versions(ctx, field)
			case "createdAt":
				return ec.fieldContext_OS_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_OS_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_OS_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OS", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OS_versions(ctx context.Context, field graphql.CollectedField, obj *models.Os) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OS_versions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OS().Versions(rctx, obj)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Os)
	fc.Result = res
	return ec.marshalOOS2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐOsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OS_versions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OS",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_OS_ID(ctx, field)
			case "name":
				return ec.fieldContext_OS_name(ctx, field)
			case "description":
				return ec.fieldContext_OS_description(ctx, field)
			case "version":
				return ec.fieldContext_OS_version(ctx, field)
			case "yearRelease":
				return ec.fieldContext_OS_yearRelease(ctx, field)
			case "yearEndSupport":
				return ec.fieldContext_OS_yearEndSupport(ctx, field)
			case "active":
				return ec.fieldContext_OS_active(ctx, field)
			case "matchNameExp":
				return ec.fieldContext_OS_matchNameExp(ctx, field)
			case "matchUserAgentExp":
				return ec.fieldContext_OS_matchUserAgentExp(ctx, field)
			case "matchVersionMinExp":
				return ec.fieldContext_OS_matchVersionMinExp(ctx, field)
			case "matchVersionMaxExp":
				return ec.fieldContext_OS_matchVersionMaxExp(ctx, field)
			case "parentID":
				return ec.fieldContext_OS_parentID(ctx, field)
			case "parent":
				return ec.fieldContext_OS_parent(ctx, field)
			case "versions":
				return ec.fieldContext_OS_versions(ctx, field)
			case "createdAt":
				return ec.fieldContext_OS_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_OS_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_OS_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OS", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OS_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.Os) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OS_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OS_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OS",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OS_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models.Os) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OS_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OS_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OS",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OS_deletedAt(ctx context.Context, field graphql.CollectedField, obj *models.Os) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OS_deletedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OS_deletedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OS",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OSConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models.Os, models.OSEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OSConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OSConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OSConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OSConnection_edges(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models.Os, models.OSEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OSConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.OSEdge)
	fc.Result = res
	return ec.marshalOOSEdge2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐOSEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OSConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OSConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_OSEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_OSEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OSEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OSConnection_list(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models.Os, models.OSEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OSConnection_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Os)
	fc.Result = res
	return ec.marshalOOS2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐOsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OSConnection_list(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OSConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_OS_ID(ctx, field)
			case "name":
				return ec.fieldContext_OS_name(ctx, field)
			case "description":
				return ec.fieldContext_OS_description(ctx, field)
			case "version":
				return ec.fieldContext_OS_version(ctx, field)
			case "yearRelease":
				return ec.fieldContext_OS_yearRelease(ctx, field)
			case "yearEndSupport":
				return ec.fieldContext_OS_yearEndSupport(ctx, field)
			case "active":
				return ec.fieldContext_OS_active(ctx, field)
			case "matchNameExp":
				return ec.fieldContext_OS_matchNameExp(ctx, field)
			case "matchUserAgentExp":
				return ec.fieldContext_OS_matchUserAgentExp(ctx, field)
			case "matchVersionMinExp":
				return ec.fieldContext_OS_matchVersionMinExp(ctx, field)
			case "matchVersionMaxExp":
				return ec.fieldContext_OS_matchVersionMaxExp(ctx, field)
			case "parentID":
				return ec.fieldContext_OS_parentID(ctx, field)
			case "parent":
				return ec.fieldContext_OS_parent(ctx, field)
			case "versions":
				return ec.fieldContext_OS_versions(ctx, field)
			case "createdAt":
				return ec.fieldContext_OS_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_OS_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_OS_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OS", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OSConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models.Os, models.OSEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OSConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OSConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OSConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "total":
				return ec.fieldContext_PageInfo_total(ctx, field)
			case "page":
				return ec.fieldContext_PageInfo_page(ctx, field)
			case "count":
				return ec.fieldContext_PageInfo_count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OSEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *models.OSEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OSEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OSEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OSEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OSEdge_node(ctx context.Context, field graphql.CollectedField, obj *models.OSEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OSEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Os)
	fc.Result = res
	return ec.marshalNOS2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐOs(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OSEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OSEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_OS_ID(ctx, field)
			case "name":
				return ec.fieldContext_OS_name(ctx, field)
			case "description":
				return ec.fieldContext_OS_description(ctx, field)
			case "version":
				return ec.fieldContext_OS_version(ctx, field)
			case "yearRelease":
				return ec.fieldContext_OS_yearRelease(ctx, field)
			case "yearEndSupport":
				return ec.fieldContext_OS_yearEndSupport(ctx, field)
			case "active":
				return ec.fieldContext_OS_active(ctx, field)
			case "matchNameExp":
				return ec.fieldContext_OS_matchNameExp(ctx, field)
			case "matchUserAgentExp":
				return ec.fieldContext_OS_matchUserAgentExp(ctx, field)
			case "matchVersionMinExp":
				return ec.fieldContext_OS_matchVersionMinExp(ctx, field)
			case "matchVersionMaxExp":
				return ec.fieldContext_OS_matchVersionMaxExp(ctx, field)
			case "parentID":
				return ec.fieldContext_OS_parentID(ctx, field)
			case "parent":
				return ec.fieldContext_OS_parent(ctx, field)
			case "versions":
				return ec.fieldContext_OS_versions(ctx, field)
			case "createdAt":
				return ec.fieldContext_OS_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_OS_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_OS_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OS", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OSPayload_clientMutationID(ctx context.Context, field graphql.CollectedField, obj *models.OSPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OSPayload_clientMutationID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientMutationID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OSPayload_clientMutationID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OSPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OSPayload_OSID(ctx context.Context, field graphql.CollectedField, obj *models.OSPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OSPayload_OSID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Osid, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNID642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OSPayload_OSID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OSPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OSPayload_OS(ctx context.Context, field graphql.CollectedField, obj *models.OSPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OSPayload_OS(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Os, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Os)
	fc.Result = res
	return ec.marshalNOS2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐOs(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OSPayload_OS(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OSPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_OS_ID(ctx, field)
			case "name":
				return ec.fieldContext_OS_name(ctx, field)
			case "description":
				return ec.fieldContext_OS_description(ctx, field)
			case "version":
				return ec.fieldContext_OS_version(ctx, field)
			case "yearRelease":
				return ec.fieldContext_OS_yearRelease(ctx, field)
			case "yearEndSupport":
				return ec.fieldContext_OS_yearEndSupport(ctx, field)
			case "active":
				return ec.fieldContext_OS_active(ctx, field)
			case "matchNameExp":
				return ec.fieldContext_OS_matchNameExp(ctx, field)
			case "matchUserAgentExp":
				return ec.fieldContext_OS_matchUserAgentExp(ctx, field)
			case "matchVersionMinExp":
				return ec.fieldContext_OS_matchVersionMinExp(ctx, field)
			case "matchVersionMaxExp":
				return ec.fieldContext_OS_matchVersionMaxExp(ctx, field)
			case "parentID":
				return ec.fieldContext_OS_parentID(ctx, field)
			case "parent":
				return ec.fieldContext_OS_parent(ctx, field)
			case "versions":
				return ec.fieldContext_OS_versions(ctx, field)
			case "createdAt":
				return ec.fieldContext_OS_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_OS_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_OS_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OS", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Option_type(ctx context.Context, field graphql.CollectedField, obj *models1.Option) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Option_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models1.OptionType)
	fc.Result = res
	return ec.marshalNOptionType2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOptionType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Option_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Option",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type OptionType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Option_targetID(ctx context.Context, field graphql.CollectedField, obj *models1.Option) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Option_targetID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TargetID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNID642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Option_targetID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Option",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Option_name(ctx context.Context, field graphql.CollectedField, obj *models1.Option) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Option_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Option_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Option",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Option_value(ctx context.Context, field graphql.CollectedField, obj *models1.Option) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Option_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.NullableJSON)
	fc.Result = res
	return ec.marshalONullableJSON2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋtypesᚐNullableJSON(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Option_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Option",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullableJSON does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OptionConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models1.Option, models1.OptionEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OptionConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OptionConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OptionConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OptionConnection_edges(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models1.Option, models1.OptionEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OptionConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models1.OptionEdge)
	fc.Result = res
	return ec.marshalNOptionEdge2ᚕᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOptionEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OptionConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OptionConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_OptionEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_OptionEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OptionEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OptionConnection_list(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models1.Option, models1.OptionEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OptionConnection_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models1.Option)
	fc.Result = res
	return ec.marshalNOption2ᚕᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOptionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OptionConnection_list(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OptionConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_Option_type(ctx, field)
			case "targetID":
				return ec.fieldContext_Option_targetID(ctx, field)
			case "name":
				return ec.fieldContext_Option_name(ctx, field)
			case "value":
				return ec.fieldContext_Option_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Option", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OptionConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models1.Option, models1.OptionEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OptionConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OptionConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OptionConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "total":
				return ec.fieldContext_PageInfo_total(ctx, field)
			case "page":
				return ec.fieldContext_PageInfo_page(ctx, field)
			case "count":
				return ec.fieldContext_PageInfo_count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OptionEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *models1.OptionEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OptionEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OptionEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OptionEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OptionEdge_node(ctx context.Context, field graphql.CollectedField, obj *models1.OptionEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OptionEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.Option)
	fc.Result = res
	return ec.marshalNOption2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOption(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OptionEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OptionEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_Option_type(ctx, field)
			case "targetID":
				return ec.fieldContext_Option_targetID(ctx, field)
			case "name":
				return ec.fieldContext_Option_name(ctx, field)
			case "value":
				return ec.fieldContext_Option_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Option", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OptionPayload_clientMutationId(ctx context.Context, field graphql.CollectedField, obj *models1.OptionPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OptionPayload_clientMutationId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientMutationID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OptionPayload_clientMutationId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OptionPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OptionPayload_name(ctx context.Context, field graphql.CollectedField, obj *models1.OptionPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OptionPayload_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OptionPayload_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OptionPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OptionPayload_option(ctx context.Context, field graphql.CollectedField, obj *models1.OptionPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OptionPayload_option(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Option, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models1.Option)
	fc.Result = res
	return ec.marshalOOption2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOption(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OptionPayload_option(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OptionPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_Option_type(ctx, field)
			case "targetID":
				return ec.fieldContext_Option_targetID(ctx, field)
			case "name":
				return ec.fieldContext_Option_name(ctx, field)
			case "value":
				return ec.fieldContext_Option_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Option", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_startCursor(ctx context.Context, field graphql.CollectedField, obj *models1.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_startCursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartCursor, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_startCursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_endCursor(ctx context.Context, field graphql.CollectedField, obj *models1.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_endCursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndCursor, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_endCursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_hasPreviousPage(ctx context.Context, field graphql.CollectedField, obj *models1.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasPreviousPage, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_hasPreviousPage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField, obj *models1.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_hasNextPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasNextPage, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_hasNextPage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_total(ctx context.Context, field graphql.CollectedField, obj *models1.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_total(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_total(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_page(ctx context.Context, field graphql.CollectedField, obj *models1.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_page(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Page, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_page(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_count(ctx context.Context, field graphql.CollectedField, obj *models1.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_count(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Profile_ID(ctx context.Context, field graphql.CollectedField, obj *models1.Profile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Profile_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNID642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Profile_ID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Profile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Profile_user(ctx context.Context, field graphql.CollectedField, obj *models1.Profile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Profile_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Profile_user(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Profile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_User_ID(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "status":
				return ec.fieldContext_User_status(ctx, field)
			case "statusMessage":
				return ec.fieldContext_User_statusMessage(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Profile_firstName(ctx context.Context, field graphql.CollectedField, obj *models1.Profile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Profile_firstName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstName, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Profile_firstName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Profile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Profile_lastName(ctx context.Context, field graphql.CollectedField, obj *models1.Profile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Profile_lastName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastName, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Profile_lastName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Profile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Profile_companyName(ctx context.Context, field graphql.CollectedField, obj *models1.Profile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Profile_companyName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanyName, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Profile_companyName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Profile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Profile_about(ctx context.Context, field graphql.CollectedField, obj *models1.Profile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Profile_about(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.About, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Profile_about(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Profile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Profile_email(ctx context.Context, field graphql.CollectedField, obj *models1.Profile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Profile_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Profile_email(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Profile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Profile_messgangers(ctx context.Context, field graphql.CollectedField, obj *models1.Profile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Profile_messgangers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Messgangers, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models1.ProfileMessanger)
	fc.Result = res
	return ec.marshalOProfileMessanger2ᚕᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐProfileMessangerᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Profile_messgangers(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Profile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "mtype":
				return ec.fieldContext_ProfileMessanger_mtype(ctx, field)
			case "address":
				return ec.fieldContext_ProfileMessanger_address(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProfileMessanger", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Profile_createdAt(ctx context.Context, field graphql.CollectedField, obj *models1.Profile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Profile_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Profile_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Profile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Profile_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models1.Profile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Profile_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Profile_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Profile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProfileMessanger_mtype(ctx context.Context, field graphql.CollectedField, obj *models1.ProfileMessanger) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProfileMessanger_mtype(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mtype, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models1.MessangerType)
	fc.Result = res
	return ec.marshalNMessangerType2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐMessangerType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProfileMessanger_mtype(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProfileMessanger",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MessangerType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProfileMessanger_address(ctx context.Context, field graphql.CollectedField, obj *models1.ProfileMessanger) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProfileMessanger_address(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProfileMessanger_address(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProfileMessanger",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_serviceVersion(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_serviceVersion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ServiceVersion(rctx)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_serviceVersion(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_currentSession(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_currentSession(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().CurrentSession(rctx)
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"account.view.*"})
			if err != nil {
				var zeroVal *models1.SessionToken
				return zeroVal, err
			}
			if ec.directives.HasPermissions == nil {
				var zeroVal *models1.SessionToken
				return zeroVal, errors.New("directive hasPermissions is not implemented")
			}
			return ec.directives.HasPermissions(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models1.SessionToken); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/models.SessionToken`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.SessionToken)
	fc.Result = res
	return ec.marshalNSessionToken2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐSessionToken(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_currentSession(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "token":
				return ec.fieldContext_SessionToken_token(ctx, field)
			case "expiresAt":
				return ec.fieldContext_SessionToken_expiresAt(ctx, field)
			case "isAdmin":
				return ec.fieldContext_SessionToken_isAdmin(ctx, field)
			case "roles":
				return ec.fieldContext_SessionToken_roles(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SessionToken", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_currentAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_currentAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().CurrentAccount(rctx)
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"account.view.*"})
			if err != nil {
				var zeroVal *models1.AccountPayload
				return zeroVal, err
			}
			if ec.directives.HasPermissions == nil {
				var zeroVal *models1.AccountPayload
				return zeroVal, errors.New("directive hasPermissions is not implemented")
			}
			return ec.directives.HasPermissions(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models1.AccountPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/models.AccountPayload`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.AccountPayload)
	fc.Result = res
	return ec.marshalNAccountPayload2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAccountPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_currentAccount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_AccountPayload_clientMutationID(ctx, field)
			case "accountID":
				return ec.fieldContext_AccountPayload_accountID(ctx, field)
			case "account":
				return ec.fieldContext_AccountPayload_account(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccountPayload", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_account(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_account(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Account(rctx, fc.Args["id"].(uint64))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"account.view.*"})
			if err != nil {
				var zeroVal *models1.AccountPayload
				return zeroVal, err
			}
			if ec.directives.HasPermissions == nil {
				var zeroVal *models1.AccountPayload
				return zeroVal, errors.New("directive hasPermissions is not implemented")
			}
			return ec.directives.HasPermissions(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models1.AccountPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/models.AccountPayload`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.AccountPayload)
	fc.Result = res
	return ec.marshalNAccountPayload2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAccountPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_account(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_AccountPayload_clientMutationID(ctx, field)
			case "accountID":
				return ec.fieldContext_AccountPayload_accountID(ctx, field)
			case "account":
				return ec.fieldContext_AccountPayload_account(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccountPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_account_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listAccounts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listAccounts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().ListAccounts(rctx, fc.Args["filter"].(*models1.AccountListFilter), fc.Args["order"].(*models1.AccountListOrder), fc.Args["page"].(*models1.Page))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"account.list.*"})
			if err != nil {
				var zeroVal *connectors.CollectionConnection[models1.Account, models1.AccountEdge]
				return zeroVal, err
			}
			if ec.directives.HasPermissions == nil {
				var zeroVal *connectors.CollectionConnection[models1.Account, models1.AccountEdge]
				return zeroVal, errors.New("directive hasPermissions is not implemented")
			}
			return ec.directives.HasPermissions(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*connectors.CollectionConnection[models1.Account, models1.AccountEdge]); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/connectors.CollectionConnection[github.com/geniusrabbit/blaze-api/server/graphql/models.Account, github.com/geniusrabbit/blaze-api/server/graphql/models.AccountEdge]`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*connectors.CollectionConnection[models1.Account, models1.AccountEdge])
	fc.Result = res
	return ec.marshalOAccountConnection2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋconnectorsᚐCollectionConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listAccounts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_AccountConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_AccountConnection_edges(ctx, field)
			case "list":
				return ec.fieldContext_AccountConnection_list(ctx, field)
			case "pageInfo":
				return ec.fieldContext_AccountConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccountConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listAccounts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listAccountRolesAndPermissions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listAccountRolesAndPermissions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().ListAccountRolesAndPermissions(rctx, fc.Args["accountID"].(uint64), fc.Args["order"].(*models1.RBACRoleListOrder))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"account.view.*"})
			if err != nil {
				var zeroVal *connectors.CollectionConnection[models1.RBACRole, models1.RBACRoleEdge]
				return zeroVal, err
			}
			if ec.directives.HasPermissions == nil {
				var zeroVal *connectors.CollectionConnection[models1.RBACRole, models1.RBACRoleEdge]
				return zeroVal, errors.New("directive hasPermissions is not implemented")
			}
			return ec.directives.HasPermissions(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*connectors.CollectionConnection[models1.RBACRole, models1.RBACRoleEdge]); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/connectors.CollectionConnection[github.com/geniusrabbit/blaze-api/server/graphql/models.RBACRole, github.com/geniusrabbit/blaze-api/server/graphql/models.RBACRoleEdge]`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*connectors.CollectionConnection[models1.RBACRole, models1.RBACRoleEdge])
	fc.Result = res
	return ec.marshalORBACRoleConnection2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋconnectorsᚐCollectionConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listAccountRolesAndPermissions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_RBACRoleConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_RBACRoleConnection_edges(ctx, field)
			case "list":
				return ec.fieldContext_RBACRoleConnection_list(ctx, field)
			case "pageInfo":
				return ec.fieldContext_RBACRoleConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RBACRoleConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listAccountRolesAndPermissions_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listMembers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listMembers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().ListMembers(rctx, fc.Args["filter"].(*models1.MemberListFilter), fc.Args["order"].(*models1.MemberListOrder), fc.Args["page"].(*models1.Page))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"account.member.list.*"})
			if err != nil {
				var zeroVal *connectors.CollectionConnection[models1.Member, models1.MemberEdge]
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *connectors.CollectionConnection[models1.Member, models1.MemberEdge]
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*connectors.CollectionConnection[models1.Member, models1.MemberEdge]); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/connectors.CollectionConnection[github.com/geniusrabbit/blaze-api/server/graphql/models.Member, github.com/geniusrabbit/blaze-api/server/graphql/models.MemberEdge]`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*connectors.CollectionConnection[models1.Member, models1.MemberEdge])
	fc.Result = res
	return ec.marshalOMemberConnection2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋconnectorsᚐCollectionConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listMembers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_MemberConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_MemberConnection_edges(ctx, field)
			case "list":
				return ec.fieldContext_MemberConnection_list(ctx, field)
			case "pageInfo":
				return ec.fieldContext_MemberConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MemberConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listMembers_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_socialAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_socialAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().SocialAccount(rctx, fc.Args["id"].(uint64))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"account_social.view.*"})
			if err != nil {
				var zeroVal *models1.SocialAccountPayload
				return zeroVal, err
			}
			if ec.directives.HasPermissions == nil {
				var zeroVal *models1.SocialAccountPayload
				return zeroVal, errors.New("directive hasPermissions is not implemented")
			}
			return ec.directives.HasPermissions(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models1.SocialAccountPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/models.SocialAccountPayload`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.SocialAccountPayload)
	fc.Result = res
	return ec.marshalNSocialAccountPayload2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐSocialAccountPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_socialAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_SocialAccountPayload_clientMutationID(ctx, field)
			case "socialAccountID":
				return ec.fieldContext_SocialAccountPayload_socialAccountID(ctx, field)
			case "socialAccount":
				return ec.fieldContext_SocialAccountPayload_socialAccount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SocialAccountPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_socialAccount_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_currentSocialAccounts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_currentSocialAccounts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().CurrentSocialAccounts(rctx, fc.Args["filter"].(*models1.SocialAccountListFilter), fc.Args["order"].(*models1.SocialAccountListOrder))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"account_social.list.*"})
			if err != nil {
				var zeroVal *connectors.CollectionConnection[models1.SocialAccount, models1.SocialAccountEdge]
				return zeroVal, err
			}
			if ec.directives.HasPermissions == nil {
				var zeroVal *connectors.CollectionConnection[models1.SocialAccount, models1.SocialAccountEdge]
				return zeroVal, errors.New("directive hasPermissions is not implemented")
			}
			return ec.directives.HasPermissions(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*connectors.CollectionConnection[models1.SocialAccount, models1.SocialAccountEdge]); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/connectors.CollectionConnection[github.com/geniusrabbit/blaze-api/server/graphql/models.SocialAccount, github.com/geniusrabbit/blaze-api/server/graphql/models.SocialAccountEdge]`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*connectors.CollectionConnection[models1.SocialAccount, models1.SocialAccountEdge])
	fc.Result = res
	return ec.marshalNSocialAccountConnection2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋconnectorsᚐCollectionConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_currentSocialAccounts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_SocialAccountConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_SocialAccountConnection_edges(ctx, field)
			case "list":
				return ec.fieldContext_SocialAccountConnection_list(ctx, field)
			case "pageInfo":
				return ec.fieldContext_SocialAccountConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SocialAccountConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_currentSocialAccounts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listSocialAccounts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listSocialAccounts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().ListSocialAccounts(rctx, fc.Args["filter"].(*models1.SocialAccountListFilter), fc.Args["order"].(*models1.SocialAccountListOrder), fc.Args["page"].(*models1.Page))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"account_social.list.*"})
			if err != nil {
				var zeroVal *connectors.CollectionConnection[models1.SocialAccount, models1.SocialAccountEdge]
				return zeroVal, err
			}
			if ec.directives.HasPermissions == nil {
				var zeroVal *connectors.CollectionConnection[models1.SocialAccount, models1.SocialAccountEdge]
				return zeroVal, errors.New("directive hasPermissions is not implemented")
			}
			return ec.directives.HasPermissions(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*connectors.CollectionConnection[models1.SocialAccount, models1.SocialAccountEdge]); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/connectors.CollectionConnection[github.com/geniusrabbit/blaze-api/server/graphql/models.SocialAccount, github.com/geniusrabbit/blaze-api/server/graphql/models.SocialAccountEdge]`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*connectors.CollectionConnection[models1.SocialAccount, models1.SocialAccountEdge])
	fc.Result = res
	return ec.marshalNSocialAccountConnection2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋconnectorsᚐCollectionConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listSocialAccounts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_SocialAccountConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_SocialAccountConnection_edges(ctx, field)
			case "list":
				return ec.fieldContext_SocialAccountConnection_list(ctx, field)
			case "pageInfo":
				return ec.fieldContext_SocialAccountConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SocialAccountConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listSocialAccounts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_currentUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_currentUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().CurrentUser(rctx)
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"user.view.*"})
			if err != nil {
				var zeroVal *models1.UserPayload
				return zeroVal, err
			}
			if ec.directives.HasPermissions == nil {
				var zeroVal *models1.UserPayload
				return zeroVal, errors.New("directive hasPermissions is not implemented")
			}
			return ec.directives.HasPermissions(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models1.UserPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/models.UserPayload`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.UserPayload)
	fc.Result = res
	return ec.marshalNUserPayload2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐUserPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_currentUser(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_UserPayload_clientMutationID(ctx, field)
			case "userID":
				return ec.fieldContext_UserPayload_userID(ctx, field)
			case "user":
				return ec.fieldContext_UserPayload_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserPayload", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_user(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().User(rctx, fc.Args["id"].(uint64), fc.Args["username"].(string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"user.view.*"})
			if err != nil {
				var zeroVal *models1.UserPayload
				return zeroVal, err
			}
			if ec.directives.HasPermissions == nil {
				var zeroVal *models1.UserPayload
				return zeroVal, errors.New("directive hasPermissions is not implemented")
			}
			return ec.directives.HasPermissions(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models1.UserPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/models.UserPayload`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.UserPayload)
	fc.Result = res
	return ec.marshalNUserPayload2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐUserPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_user(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_UserPayload_clientMutationID(ctx, field)
			case "userID":
				return ec.fieldContext_UserPayload_userID(ctx, field)
			case "user":
				return ec.fieldContext_UserPayload_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_user_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listUsers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listUsers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().ListUsers(rctx, fc.Args["filter"].(*models1.UserListFilter), fc.Args["order"].(*models1.UserListOrder), fc.Args["page"].(*models1.Page))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"user.list.*"})
			if err != nil {
				var zeroVal *connectors.CollectionConnection[models1.User, models1.UserEdge]
				return zeroVal, err
			}
			if ec.directives.HasPermissions == nil {
				var zeroVal *connectors.CollectionConnection[models1.User, models1.UserEdge]
				return zeroVal, errors.New("directive hasPermissions is not implemented")
			}
			return ec.directives.HasPermissions(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*connectors.CollectionConnection[models1.User, models1.UserEdge]); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/connectors.CollectionConnection[github.com/geniusrabbit/blaze-api/server/graphql/models.User, github.com/geniusrabbit/blaze-api/server/graphql/models.UserEdge]`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*connectors.CollectionConnection[models1.User, models1.UserEdge])
	fc.Result = res
	return ec.marshalOUserConnection2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋconnectorsᚐCollectionConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listUsers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_UserConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_UserConnection_edges(ctx, field)
			case "list":
				return ec.fieldContext_UserConnection_list(ctx, field)
			case "pageInfo":
				return ec.fieldContext_UserConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listUsers_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_authClient(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_authClient(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().AuthClient(rctx, fc.Args["id"].(string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"auth_client.view.*"})
			if err != nil {
				var zeroVal *models1.AuthClientPayload
				return zeroVal, err
			}
			if ec.directives.HasPermissions == nil {
				var zeroVal *models1.AuthClientPayload
				return zeroVal, errors.New("directive hasPermissions is not implemented")
			}
			return ec.directives.HasPermissions(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models1.AuthClientPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/models.AuthClientPayload`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.AuthClientPayload)
	fc.Result = res
	return ec.marshalNAuthClientPayload2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAuthClientPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_authClient(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_AuthClientPayload_clientMutationID(ctx, field)
			case "authClientID":
				return ec.fieldContext_AuthClientPayload_authClientID(ctx, field)
			case "authClient":
				return ec.fieldContext_AuthClientPayload_authClient(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AuthClientPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_authClient_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listAuthClients(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listAuthClients(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().ListAuthClients(rctx, fc.Args["filter"].(*models1.AuthClientListFilter), fc.Args["order"].(*models1.AuthClientListOrder), fc.Args["page"].(*models1.Page))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"auth_client.list.*"})
			if err != nil {
				var zeroVal *connectors.CollectionConnection[models1.AuthClient, models1.AuthClientEdge]
				return zeroVal, err
			}
			if ec.directives.HasPermissions == nil {
				var zeroVal *connectors.CollectionConnection[models1.AuthClient, models1.AuthClientEdge]
				return zeroVal, errors.New("directive hasPermissions is not implemented")
			}
			return ec.directives.HasPermissions(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*connectors.CollectionConnection[models1.AuthClient, models1.AuthClientEdge]); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/connectors.CollectionConnection[github.com/geniusrabbit/blaze-api/server/graphql/models.AuthClient, github.com/geniusrabbit/blaze-api/server/graphql/models.AuthClientEdge]`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*connectors.CollectionConnection[models1.AuthClient, models1.AuthClientEdge])
	fc.Result = res
	return ec.marshalOAuthClientConnection2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋconnectorsᚐCollectionConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listAuthClients(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_AuthClientConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_AuthClientConnection_edges(ctx, field)
			case "list":
				return ec.fieldContext_AuthClientConnection_list(ctx, field)
			case "pageInfo":
				return ec.fieldContext_AuthClientConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AuthClientConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listAuthClients_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getDirectAccessToken(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getDirectAccessToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetDirectAccessToken(rctx, fc.Args["id"].(uint64))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"directaccesstoken.view.*"})
			if err != nil {
				var zeroVal *models1.DirectAccessTokenPayload
				return zeroVal, err
			}
			if ec.directives.HasPermissions == nil {
				var zeroVal *models1.DirectAccessTokenPayload
				return zeroVal, errors.New("directive hasPermissions is not implemented")
			}
			return ec.directives.HasPermissions(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models1.DirectAccessTokenPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/models.DirectAccessTokenPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models1.DirectAccessTokenPayload)
	fc.Result = res
	return ec.marshalODirectAccessTokenPayload2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐDirectAccessTokenPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getDirectAccessToken(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_DirectAccessTokenPayload_clientMutationID(ctx, field)
			case "token":
				return ec.fieldContext_DirectAccessTokenPayload_token(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DirectAccessTokenPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getDirectAccessToken_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listDirectAccessTokens(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listDirectAccessTokens(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().ListDirectAccessTokens(rctx, fc.Args["filter"].(*models1.DirectAccessTokenListFilter), fc.Args["order"].(*models1.DirectAccessTokenListOrder), fc.Args["page"].(*models1.Page))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"directaccesstoken.list.*"})
			if err != nil {
				var zeroVal *connectors.CollectionConnection[models1.DirectAccessToken, models1.DirectAccessTokenEdge]
				return zeroVal, err
			}
			if ec.directives.HasPermissions == nil {
				var zeroVal *connectors.CollectionConnection[models1.DirectAccessToken, models1.DirectAccessTokenEdge]
				return zeroVal, errors.New("directive hasPermissions is not implemented")
			}
			return ec.directives.HasPermissions(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*connectors.CollectionConnection[models1.DirectAccessToken, models1.DirectAccessTokenEdge]); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/connectors.CollectionConnection[github.com/geniusrabbit/blaze-api/server/graphql/models.DirectAccessToken, github.com/geniusrabbit/blaze-api/server/graphql/models.DirectAccessTokenEdge]`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*connectors.CollectionConnection[models1.DirectAccessToken, models1.DirectAccessTokenEdge])
	fc.Result = res
	return ec.marshalODirectAccessTokenConnection2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋconnectorsᚐCollectionConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listDirectAccessTokens(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_DirectAccessTokenConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_DirectAccessTokenConnection_edges(ctx, field)
			case "list":
				return ec.fieldContext_DirectAccessTokenConnection_list(ctx, field)
			case "pageInfo":
				return ec.fieldContext_DirectAccessTokenConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DirectAccessTokenConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listDirectAccessTokens_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listHistory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listHistory(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().ListHistory(rctx, fc.Args["filter"].(*models1.HistoryActionListFilter), fc.Args["order"].(*models1.HistoryActionListOrder), fc.Args["page"].(*models1.Page))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"history_log.list.*"})
			if err != nil {
				var zeroVal *connectors.CollectionConnection[models1.HistoryAction, models1.HistoryActionEdge]
				return zeroVal, err
			}
			if ec.directives.HasPermissions == nil {
				var zeroVal *connectors.CollectionConnection[models1.HistoryAction, models1.HistoryActionEdge]
				return zeroVal, errors.New("directive hasPermissions is not implemented")
			}
			return ec.directives.HasPermissions(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*connectors.CollectionConnection[models1.HistoryAction, models1.HistoryActionEdge]); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/connectors.CollectionConnection[github.com/geniusrabbit/blaze-api/server/graphql/models.HistoryAction, github.com/geniusrabbit/blaze-api/server/graphql/models.HistoryActionEdge]`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*connectors.CollectionConnection[models1.HistoryAction, models1.HistoryActionEdge])
	fc.Result = res
	return ec.marshalOHistoryActionConnection2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋconnectorsᚐCollectionConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listHistory(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_HistoryActionConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_HistoryActionConnection_edges(ctx, field)
			case "list":
				return ec.fieldContext_HistoryActionConnection_list(ctx, field)
			case "pageInfo":
				return ec.fieldContext_HistoryActionConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HistoryActionConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listHistory_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_option(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_option(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Option(rctx, fc.Args["name"].(string), fc.Args["type"].(models1.OptionType), fc.Args["targetID"].(uint64))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"option.get.*"})
			if err != nil {
				var zeroVal *models1.OptionPayload
				return zeroVal, err
			}
			if ec.directives.HasPermissions == nil {
				var zeroVal *models1.OptionPayload
				return zeroVal, errors.New("directive hasPermissions is not implemented")
			}
			return ec.directives.HasPermissions(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models1.OptionPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/models.OptionPayload`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.OptionPayload)
	fc.Result = res
	return ec.marshalNOptionPayload2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOptionPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_option(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationId":
				return ec.fieldContext_OptionPayload_clientMutationId(ctx, field)
			case "name":
				return ec.fieldContext_OptionPayload_name(ctx, field)
			case "option":
				return ec.fieldContext_OptionPayload_option(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OptionPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_option_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listOptions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listOptions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().ListOptions(rctx, fc.Args["filter"].(*models1.OptionListFilter), fc.Args["order"].(*models1.OptionListOrder), fc.Args["page"].(*models1.Page))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"option.list.*"})
			if err != nil {
				var zeroVal *connectors.CollectionConnection[models1.Option, models1.OptionEdge]
				return zeroVal, err
			}
			if ec.directives.HasPermissions == nil {
				var zeroVal *connectors.CollectionConnection[models1.Option, models1.OptionEdge]
				return zeroVal, errors.New("directive hasPermissions is not implemented")
			}
			return ec.directives.HasPermissions(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*connectors.CollectionConnection[models1.Option, models1.OptionEdge]); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/connectors.CollectionConnection[github.com/geniusrabbit/blaze-api/server/graphql/models.Option, github.com/geniusrabbit/blaze-api/server/graphql/models.OptionEdge]`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*connectors.CollectionConnection[models1.Option, models1.OptionEdge])
	fc.Result = res
	return ec.marshalOOptionConnection2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋconnectorsᚐCollectionConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listOptions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_OptionConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_OptionConnection_edges(ctx, field)
			case "list":
				return ec.fieldContext_OptionConnection_list(ctx, field)
			case "pageInfo":
				return ec.fieldContext_OptionConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OptionConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listOptions_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_role(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_role(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Role(rctx, fc.Args["id"].(uint64))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"role.view.*"})
			if err != nil {
				var zeroVal *models1.RBACRolePayload
				return zeroVal, err
			}
			if ec.directives.HasPermissions == nil {
				var zeroVal *models1.RBACRolePayload
				return zeroVal, errors.New("directive hasPermissions is not implemented")
			}
			return ec.directives.HasPermissions(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models1.RBACRolePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/models.RBACRolePayload`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.RBACRolePayload)
	fc.Result = res
	return ec.marshalNRBACRolePayload2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐRBACRolePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_role(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_RBACRolePayload_clientMutationID(ctx, field)
			case "roleID":
				return ec.fieldContext_RBACRolePayload_roleID(ctx, field)
			case "role":
				return ec.fieldContext_RBACRolePayload_role(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RBACRolePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_role_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_checkPermission(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_checkPermission(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().CheckPermission(rctx, fc.Args["name"].(string), fc.Args["key"].(*string), fc.Args["targetID"].(*string), fc.Args["idKey"].(*string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"role.check"})
			if err != nil {
				var zeroVal *string
				return zeroVal, err
			}
			if ec.directives.HasPermissions == nil {
				var zeroVal *string
				return zeroVal, errors.New("directive hasPermissions is not implemented")
			}
			return ec.directives.HasPermissions(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_checkPermission(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_checkPermission_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listRoles(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listRoles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().ListRoles(rctx, fc.Args["filter"].(*models1.RBACRoleListFilter), fc.Args["order"].(*models1.RBACRoleListOrder), fc.Args["page"].(*models1.Page))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"role.list.*"})
			if err != nil {
				var zeroVal *connectors.CollectionConnection[models1.RBACRole, models1.RBACRoleEdge]
				return zeroVal, err
			}
			if ec.directives.HasPermissions == nil {
				var zeroVal *connectors.CollectionConnection[models1.RBACRole, models1.RBACRoleEdge]
				return zeroVal, errors.New("directive hasPermissions is not implemented")
			}
			return ec.directives.HasPermissions(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*connectors.CollectionConnection[models1.RBACRole, models1.RBACRoleEdge]); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/connectors.CollectionConnection[github.com/geniusrabbit/blaze-api/server/graphql/models.RBACRole, github.com/geniusrabbit/blaze-api/server/graphql/models.RBACRoleEdge]`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*connectors.CollectionConnection[models1.RBACRole, models1.RBACRoleEdge])
	fc.Result = res
	return ec.marshalORBACRoleConnection2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋconnectorsᚐCollectionConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listRoles(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_RBACRoleConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_RBACRoleConnection_edges(ctx, field)
			case "list":
				return ec.fieldContext_RBACRoleConnection_list(ctx, field)
			case "pageInfo":
				return ec.fieldContext_RBACRoleConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RBACRoleConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listRoles_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listPermissions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listPermissions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().ListPermissions(rctx, fc.Args["patterns"].([]string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"permission.list"})
			if err != nil {
				var zeroVal []*models1.RBACPermission
				return zeroVal, err
			}
			if ec.directives.HasPermissions == nil {
				var zeroVal []*models1.RBACPermission
				return zeroVal, errors.New("directive hasPermissions is not implemented")
			}
			return ec.directives.HasPermissions(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models1.RBACPermission); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/geniusrabbit/blaze-api/server/graphql/models.RBACPermission`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models1.RBACPermission)
	fc.Result = res
	return ec.marshalORBACPermission2ᚕᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐRBACPermissionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listPermissions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_RBACPermission_name(ctx, field)
			case "object":
				return ec.fieldContext_RBACPermission_object(ctx, field)
			case "access":
				return ec.fieldContext_RBACPermission_access(ctx, field)
			case "fullname":
				return ec.fieldContext_RBACPermission_fullname(ctx, field)
			case "description":
				return ec.fieldContext_RBACPermission_description(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RBACPermission", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listPermissions_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listMyPermissions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listMyPermissions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().ListMyPermissions(rctx, fc.Args["patterns"].([]string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"permission.list"})
			if err != nil {
				var zeroVal []*models1.RBACPermission
				return zeroVal, err
			}
			if ec.directives.HasPermissions == nil {
				var zeroVal []*models1.RBACPermission
				return zeroVal, errors.New("directive hasPermissions is not implemented")
			}
			return ec.directives.HasPermissions(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models1.RBACPermission); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/geniusrabbit/blaze-api/server/graphql/models.RBACPermission`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models1.RBACPermission)
	fc.Result = res
	return ec.marshalORBACPermission2ᚕᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐRBACPermissionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listMyPermissions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_RBACPermission_name(ctx, field)
			case "object":
				return ec.fieldContext_RBACPermission_object(ctx, field)
			case "access":
				return ec.fieldContext_RBACPermission_access(ctx, field)
			case "fullname":
				return ec.fieldContext_RBACPermission_fullname(ctx, field)
			case "description":
				return ec.fieldContext_RBACPermission_description(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RBACPermission", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listMyPermissions_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_format(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_format(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Format(rctx, fc.Args["ID"].(uint64), fc.Args["codename"].(string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"adv_format.view.*"})
			if err != nil {
				var zeroVal *models.AdFormatPayload
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models.AdFormatPayload
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.AdFormatPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sspserver/api/internal/server/graphql/models.AdFormatPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.AdFormatPayload)
	fc.Result = res
	return ec.marshalOAdFormatPayload2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐAdFormatPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_format(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_AdFormatPayload_clientMutationID(ctx, field)
			case "formatID":
				return ec.fieldContext_AdFormatPayload_formatID(ctx, field)
			case "format":
				return ec.fieldContext_AdFormatPayload_format(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AdFormatPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_format_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listFormats(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listFormats(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().ListFormats(rctx, fc.Args["filter"].(*models.AdFormatListFilter), fc.Args["order"].(*models.AdFormatListOrder), fc.Args["page"].(*models1.Page))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"adv_format.list.*"})
			if err != nil {
				var zeroVal *connectors.CollectionConnection[models.AdFormat, models.AdFormatEdge]
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *connectors.CollectionConnection[models.AdFormat, models.AdFormatEdge]
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*connectors.CollectionConnection[models.AdFormat, models.AdFormatEdge]); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/connectors.CollectionConnection[github.com/sspserver/api/internal/server/graphql/models.AdFormat, github.com/sspserver/api/internal/server/graphql/models.AdFormatEdge]`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*connectors.CollectionConnection[models.AdFormat, models.AdFormatEdge])
	fc.Result = res
	return ec.marshalOAdFormatConnection2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋconnectorsᚐCollectionConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listFormats(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_AdFormatConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_AdFormatConnection_edges(ctx, field)
			case "list":
				return ec.fieldContext_AdFormatConnection_list(ctx, field)
			case "pageInfo":
				return ec.fieldContext_AdFormatConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AdFormatConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listFormats_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_application(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_application(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Application(rctx, fc.Args["ID"].(uint64))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"adv_application.view.*"})
			if err != nil {
				var zeroVal *models.ApplicationPayload
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models.ApplicationPayload
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.ApplicationPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sspserver/api/internal/server/graphql/models.ApplicationPayload`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ApplicationPayload)
	fc.Result = res
	return ec.marshalNApplicationPayload2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐApplicationPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_application(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_ApplicationPayload_clientMutationID(ctx, field)
			case "applicationID":
				return ec.fieldContext_ApplicationPayload_applicationID(ctx, field)
			case "application":
				return ec.fieldContext_ApplicationPayload_application(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApplicationPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_application_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listApplications(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listApplications(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().ListApplications(rctx, fc.Args["filter"].(*models.ApplicationListFilter), fc.Args["order"].(*models.ApplicationListOrder), fc.Args["page"].(*models1.Page))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"adv_application.list.*"})
			if err != nil {
				var zeroVal *connectors.CollectionConnection[models.Application, models.ApplicationEdge]
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *connectors.CollectionConnection[models.Application, models.ApplicationEdge]
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*connectors.CollectionConnection[models.Application, models.ApplicationEdge]); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/connectors.CollectionConnection[github.com/sspserver/api/internal/server/graphql/models.Application, github.com/sspserver/api/internal/server/graphql/models.ApplicationEdge]`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*connectors.CollectionConnection[models.Application, models.ApplicationEdge])
	fc.Result = res
	return ec.marshalOApplicationConnection2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋconnectorsᚐCollectionConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listApplications(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ApplicationConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_ApplicationConnection_edges(ctx, field)
			case "list":
				return ec.fieldContext_ApplicationConnection_list(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ApplicationConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApplicationConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listApplications_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_browser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_browser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Browser(rctx, fc.Args["ID"].(uint64))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"type_browser.view.*"})
			if err != nil {
				var zeroVal *models.BrowserPayload
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models.BrowserPayload
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.BrowserPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sspserver/api/internal/server/graphql/models.BrowserPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.BrowserPayload)
	fc.Result = res
	return ec.marshalOBrowserPayload2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐBrowserPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_browser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_BrowserPayload_clientMutationID(ctx, field)
			case "browserID":
				return ec.fieldContext_BrowserPayload_browserID(ctx, field)
			case "browser":
				return ec.fieldContext_BrowserPayload_browser(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BrowserPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_browser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listBrowsers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listBrowsers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().ListBrowsers(rctx, fc.Args["filter"].(*models.BrowserListFilter), fc.Args["order"].([]*models.BrowserListOrder), fc.Args["page"].(*models1.Page))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"type_browser.list.*"})
			if err != nil {
				var zeroVal *connectors.CollectionConnection[models.Browser, models.BrowserEdge]
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *connectors.CollectionConnection[models.Browser, models.BrowserEdge]
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*connectors.CollectionConnection[models.Browser, models.BrowserEdge]); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/connectors.CollectionConnection[github.com/sspserver/api/internal/server/graphql/models.Browser, github.com/sspserver/api/internal/server/graphql/models.BrowserEdge]`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*connectors.CollectionConnection[models.Browser, models.BrowserEdge])
	fc.Result = res
	return ec.marshalOBrowserConnection2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋconnectorsᚐCollectionConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listBrowsers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_BrowserConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_BrowserConnection_edges(ctx, field)
			case "list":
				return ec.fieldContext_BrowserConnection_list(ctx, field)
			case "pageInfo":
				return ec.fieldContext_BrowserConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BrowserConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listBrowsers_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_category(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_category(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Category(rctx, fc.Args["ID"].(uint64))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"adv_category.view.*"})
			if err != nil {
				var zeroVal *models.CategoryPayload
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models.CategoryPayload
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.CategoryPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sspserver/api/internal/server/graphql/models.CategoryPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.CategoryPayload)
	fc.Result = res
	return ec.marshalOCategoryPayload2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐCategoryPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_category(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_CategoryPayload_clientMutationID(ctx, field)
			case "categoryID":
				return ec.fieldContext_CategoryPayload_categoryID(ctx, field)
			case "category":
				return ec.fieldContext_CategoryPayload_category(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CategoryPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_category_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listCategories(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listCategories(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().ListCategories(rctx, fc.Args["filter"].(*models.CategoryListFilter), fc.Args["order"].(*models.CategoryListOrder), fc.Args["page"].(*models1.Page))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"adv_category.list.*"})
			if err != nil {
				var zeroVal *connectors.CollectionConnection[models.Category, models.CategoryEdge]
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *connectors.CollectionConnection[models.Category, models.CategoryEdge]
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*connectors.CollectionConnection[models.Category, models.CategoryEdge]); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/connectors.CollectionConnection[github.com/sspserver/api/internal/server/graphql/models.Category, github.com/sspserver/api/internal/server/graphql/models.CategoryEdge]`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*connectors.CollectionConnection[models.Category, models.CategoryEdge])
	fc.Result = res
	return ec.marshalOCategoryConnection2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋconnectorsᚐCollectionConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listCategories(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_CategoryConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_CategoryConnection_edges(ctx, field)
			case "list":
				return ec.fieldContext_CategoryConnection_list(ctx, field)
			case "pageInfo":
				return ec.fieldContext_CategoryConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CategoryConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listCategories_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_continents(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_continents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Continents(rctx)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Continent)
	fc.Result = res
	return ec.marshalOContinent2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐContinentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_continents(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_Continent_ID(ctx, field)
			case "code2":
				return ec.fieldContext_Continent_code2(ctx, field)
			case "name":
				return ec.fieldContext_Continent_name(ctx, field)
			case "countries":
				return ec.fieldContext_Continent_countries(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Continent", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_countries(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_countries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Countries(rctx)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Country)
	fc.Result = res
	return ec.marshalOCountry2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐCountryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_countries(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_Country_ID(ctx, field)
			case "code2":
				return ec.fieldContext_Country_code2(ctx, field)
			case "code3":
				return ec.fieldContext_Country_code3(ctx, field)
			case "name":
				return ec.fieldContext_Country_name(ctx, field)
			case "nativeName":
				return ec.fieldContext_Country_nativeName(ctx, field)
			case "continentCode":
				return ec.fieldContext_Country_continentCode(ctx, field)
			case "continent":
				return ec.fieldContext_Country_continent(ctx, field)
			case "capital":
				return ec.fieldContext_Country_capital(ctx, field)
			case "languages":
				return ec.fieldContext_Country_languages(ctx, field)
			case "phoneCodes":
				return ec.fieldContext_Country_phoneCodes(ctx, field)
			case "timeZones":
				return ec.fieldContext_Country_timeZones(ctx, field)
			case "coordinates":
				return ec.fieldContext_Country_coordinates(ctx, field)
			case "currency":
				return ec.fieldContext_Country_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Country", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_deviceMaker(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_deviceMaker(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().DeviceMaker(rctx, fc.Args["ID"].(uint64), fc.Args["codename"].(string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"device_maker.view.*"})
			if err != nil {
				var zeroVal *models.DeviceMakerPayload
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models.DeviceMakerPayload
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.DeviceMakerPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sspserver/api/internal/server/graphql/models.DeviceMakerPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.DeviceMakerPayload)
	fc.Result = res
	return ec.marshalODeviceMakerPayload2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceMakerPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_deviceMaker(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_DeviceMakerPayload_clientMutationID(ctx, field)
			case "makerID":
				return ec.fieldContext_DeviceMakerPayload_makerID(ctx, field)
			case "maker":
				return ec.fieldContext_DeviceMakerPayload_maker(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceMakerPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_deviceMaker_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listDeviceMakers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listDeviceMakers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().ListDeviceMakers(rctx, fc.Args["filter"].(*models.DeviceMakerListFilter), fc.Args["order"].([]*models.DeviceMakerListOrder), fc.Args["page"].(*models1.Page))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"device_maker.list.*"})
			if err != nil {
				var zeroVal *connectors.CollectionConnection[models.DeviceMaker, models.DeviceMakerEdge]
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *connectors.CollectionConnection[models.DeviceMaker, models.DeviceMakerEdge]
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*connectors.CollectionConnection[models.DeviceMaker, models.DeviceMakerEdge]); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/connectors.CollectionConnection[github.com/sspserver/api/internal/server/graphql/models.DeviceMaker, github.com/sspserver/api/internal/server/graphql/models.DeviceMakerEdge]`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*connectors.CollectionConnection[models.DeviceMaker, models.DeviceMakerEdge])
	fc.Result = res
	return ec.marshalODeviceMakerConnection2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋconnectorsᚐCollectionConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listDeviceMakers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_DeviceMakerConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_DeviceMakerConnection_edges(ctx, field)
			case "list":
				return ec.fieldContext_DeviceMakerConnection_list(ctx, field)
			case "pageInfo":
				return ec.fieldContext_DeviceMakerConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceMakerConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listDeviceMakers_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_deviceModel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_deviceModel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().DeviceModel(rctx, fc.Args["ID"].(uint64), fc.Args["codename"].(string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"device_model.view.*"})
			if err != nil {
				var zeroVal *models.DeviceModelPayload
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models.DeviceModelPayload
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.DeviceModelPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sspserver/api/internal/server/graphql/models.DeviceModelPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.DeviceModelPayload)
	fc.Result = res
	return ec.marshalODeviceModelPayload2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceModelPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_deviceModel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_DeviceModelPayload_clientMutationID(ctx, field)
			case "modelID":
				return ec.fieldContext_DeviceModelPayload_modelID(ctx, field)
			case "model":
				return ec.fieldContext_DeviceModelPayload_model(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceModelPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_deviceModel_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listDeviceModels(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listDeviceModels(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().ListDeviceModels(rctx, fc.Args["filter"].(*models.DeviceModelListFilter), fc.Args["order"].([]*models.DeviceModelListOrder), fc.Args["page"].(*models1.Page))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"device_model.list.*"})
			if err != nil {
				var zeroVal *connectors.CollectionConnection[models.DeviceModel, models.DeviceModelEdge]
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *connectors.CollectionConnection[models.DeviceModel, models.DeviceModelEdge]
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*connectors.CollectionConnection[models.DeviceModel, models.DeviceModelEdge]); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/connectors.CollectionConnection[github.com/sspserver/api/internal/server/graphql/models.DeviceModel, github.com/sspserver/api/internal/server/graphql/models.DeviceModelEdge]`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*connectors.CollectionConnection[models.DeviceModel, models.DeviceModelEdge])
	fc.Result = res
	return ec.marshalODeviceModelConnection2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋconnectorsᚐCollectionConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listDeviceModels(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_DeviceModelConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_DeviceModelConnection_edges(ctx, field)
			case "list":
				return ec.fieldContext_DeviceModelConnection_list(ctx, field)
			case "pageInfo":
				return ec.fieldContext_DeviceModelConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceModelConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listDeviceModels_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listDeviceTypes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listDeviceTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().ListDeviceTypes(rctx)
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"device_type.list.*"})
			if err != nil {
				var zeroVal []*models.DeviceType
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal []*models.DeviceType
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.DeviceType); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/sspserver/api/internal/server/graphql/models.DeviceType`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.DeviceType)
	fc.Result = res
	return ec.marshalODeviceType2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listDeviceTypes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_DeviceType_ID(ctx, field)
			case "name":
				return ec.fieldContext_DeviceType_name(ctx, field)
			case "codename":
				return ec.fieldContext_DeviceType_codename(ctx, field)
			case "description":
				return ec.fieldContext_DeviceType_description(ctx, field)
			case "active":
				return ec.fieldContext_DeviceType_active(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_OS(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_OS(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Os(rctx, fc.Args["ID"].(uint64))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"type_os.view.*"})
			if err != nil {
				var zeroVal *models.OSPayload
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models.OSPayload
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.OSPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sspserver/api/internal/server/graphql/models.OSPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.OSPayload)
	fc.Result = res
	return ec.marshalOOSPayload2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐOSPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_OS(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_OSPayload_clientMutationID(ctx, field)
			case "OSID":
				return ec.fieldContext_OSPayload_OSID(ctx, field)
			case "OS":
				return ec.fieldContext_OSPayload_OS(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OSPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_OS_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listOS(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listOS(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().ListOs(rctx, fc.Args["filter"].(*models.OSListFilter), fc.Args["order"].([]*models.OSListOrder), fc.Args["page"].(*models1.Page))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"type_os.list.*"})
			if err != nil {
				var zeroVal *connectors.CollectionConnection[models.Os, models.OSEdge]
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *connectors.CollectionConnection[models.Os, models.OSEdge]
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*connectors.CollectionConnection[models.Os, models.OSEdge]); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/connectors.CollectionConnection[github.com/sspserver/api/internal/server/graphql/models.Os, github.com/sspserver/api/internal/server/graphql/models.OSEdge]`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*connectors.CollectionConnection[models.Os, models.OSEdge])
	fc.Result = res
	return ec.marshalOOSConnection2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋconnectorsᚐCollectionConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listOS(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_OSConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_OSConnection_edges(ctx, field)
			case "list":
				return ec.fieldContext_OSConnection_list(ctx, field)
			case "pageInfo":
				return ec.fieldContext_OSConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OSConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listOS_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_RTBSource(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_RTBSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().RTBSource(rctx, fc.Args["ID"].(uint64))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"rtb_source.view.*"})
			if err != nil {
				var zeroVal *models.RTBSourcePayload
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models.RTBSourcePayload
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.RTBSourcePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sspserver/api/internal/server/graphql/models.RTBSourcePayload`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.RTBSourcePayload)
	fc.Result = res
	return ec.marshalNRTBSourcePayload2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐRTBSourcePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_RTBSource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_RTBSourcePayload_clientMutationID(ctx, field)
			case "sourceID":
				return ec.fieldContext_RTBSourcePayload_sourceID(ctx, field)
			case "source":
				return ec.fieldContext_RTBSourcePayload_source(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RTBSourcePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_RTBSource_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listRTBSources(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listRTBSources(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().ListRTBSources(rctx, fc.Args["filter"].(*models.RTBSourceListFilter), fc.Args["order"].(*models.RTBSourceListOrder), fc.Args["page"].(*models1.Page))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"rtb_source.list.*"})
			if err != nil {
				var zeroVal *connectors.CollectionConnection[models.RTBSource, models.RTBSourceEdge]
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *connectors.CollectionConnection[models.RTBSource, models.RTBSourceEdge]
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*connectors.CollectionConnection[models.RTBSource, models.RTBSourceEdge]); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/connectors.CollectionConnection[github.com/sspserver/api/internal/server/graphql/models.RTBSource, github.com/sspserver/api/internal/server/graphql/models.RTBSourceEdge]`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*connectors.CollectionConnection[models.RTBSource, models.RTBSourceEdge])
	fc.Result = res
	return ec.marshalORTBSourceConnection2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋconnectorsᚐCollectionConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listRTBSources(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_RTBSourceConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_RTBSourceConnection_edges(ctx, field)
			case "list":
				return ec.fieldContext_RTBSourceConnection_list(ctx, field)
			case "pageInfo":
				return ec.fieldContext_RTBSourceConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RTBSourceConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listRTBSources_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_statisticAdList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_statisticAdList(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().StatisticAdList(rctx, fc.Args["filter"].(*models.StatisticAdListFilter), fc.Args["group"].([]models.StatisticKey), fc.Args["order"].([]*models.StatisticAdKeyOrder), fc.Args["page"].(*models1.Page))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"statistic.list.*"})
			if err != nil {
				var zeroVal *connectors.CollectionConnection[models.StatisticAdItem, struct{}]
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *connectors.CollectionConnection[models.StatisticAdItem, struct{}]
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*connectors.CollectionConnection[models.StatisticAdItem, struct{}]); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/connectors.CollectionConnection[github.com/sspserver/api/internal/server/graphql/models.StatisticAdItem, struct{}]`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*connectors.CollectionConnection[models.StatisticAdItem, struct{}])
	fc.Result = res
	return ec.marshalNStatisticAdItemConnection2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋconnectorsᚐCollectionConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_statisticAdList(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_StatisticAdItemConnection_totalCount(ctx, field)
			case "list":
				return ec.fieldContext_StatisticAdItemConnection_list(ctx, field)
			case "pageInfo":
				return ec.fieldContext_StatisticAdItemConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StatisticAdItemConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_statisticAdList_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_zone(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_zone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Zone(rctx, fc.Args["ID"].(uint64))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"adv_zone.view.*"})
			if err != nil {
				var zeroVal *models.ZonePayload
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *models.ZonePayload
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.ZonePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/sspserver/api/internal/server/graphql/models.ZonePayload`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ZonePayload)
	fc.Result = res
	return ec.marshalNZonePayload2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐZonePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_zone(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationID":
				return ec.fieldContext_ZonePayload_clientMutationID(ctx, field)
			case "zoneID":
				return ec.fieldContext_ZonePayload_zoneID(ctx, field)
			case "zone":
				return ec.fieldContext_ZonePayload_zone(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ZonePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_zone_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listZones(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listZones(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().ListZones(rctx, fc.Args["filter"].(*models.ZoneListFilter), fc.Args["order"].(*models.ZoneListOrder), fc.Args["page"].(*models1.Page))
		}

		directive1 := func(ctx context.Context) (any, error) {
			permissions, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"adv_zone.list.*"})
			if err != nil {
				var zeroVal *connectors.CollectionConnection[models.Zone, models.ZoneEdge]
				return zeroVal, err
			}
			if ec.directives.Acl == nil {
				var zeroVal *connectors.CollectionConnection[models.Zone, models.ZoneEdge]
				return zeroVal, errors.New("directive acl is not implemented")
			}
			return ec.directives.Acl(ctx, nil, directive0, permissions)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*connectors.CollectionConnection[models.Zone, models.ZoneEdge]); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/geniusrabbit/blaze-api/server/graphql/connectors.CollectionConnection[github.com/sspserver/api/internal/server/graphql/models.Zone, github.com/sspserver/api/internal/server/graphql/models.ZoneEdge]`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*connectors.CollectionConnection[models.Zone, models.ZoneEdge])
	fc.Result = res
	return ec.marshalOZoneConnection2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋconnectorsᚐCollectionConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listZones(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ZoneConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_ZoneConnection_edges(ctx, field)
			case "list":
				return ec.fieldContext_ZoneConnection_list(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ZoneConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ZoneConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listZones_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RBACPermission_name(ctx context.Context, field graphql.CollectedField, obj *models1.RBACPermission) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RBACPermission_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RBACPermission_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RBACPermission",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RBACPermission_object(ctx context.Context, field graphql.CollectedField, obj *models1.RBACPermission) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RBACPermission_object(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Object, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RBACPermission_object(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RBACPermission",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RBACPermission_access(ctx context.Context, field graphql.CollectedField, obj *models1.RBACPermission) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RBACPermission_access(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Access, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RBACPermission_access(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RBACPermission",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RBACPermission_fullname(ctx context.Context, field graphql.CollectedField, obj *models1.RBACPermission) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RBACPermission_fullname(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fullname, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RBACPermission_fullname(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RBACPermission",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RBACPermission_description(ctx context.Context, field graphql.CollectedField, obj *models1.RBACPermission) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RBACPermission_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RBACPermission_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RBACPermission",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RBACRole_ID(ctx context.Context, field graphql.CollectedField, obj *models1.RBACRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RBACRole_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNID642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RBACRole_ID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RBACRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RBACRole_name(ctx context.Context, field graphql.CollectedField, obj *models1.RBACRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RBACRole_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RBACRole_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RBACRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RBACRole_title(ctx context.Context, field graphql.CollectedField, obj *models1.RBACRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RBACRole_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RBACRole_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RBACRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RBACRole_description(ctx context.Context, field graphql.CollectedField, obj *models1.RBACRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RBACRole_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RBACRole_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RBACRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RBACRole_context(ctx context.Context, field graphql.CollectedField, obj *models1.RBACRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RBACRole_context(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Context, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.NullableJSON)
	fc.Result = res
	return ec.marshalONullableJSON2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋtypesᚐNullableJSON(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RBACRole_context(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RBACRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullableJSON does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RBACRole_childRoles(ctx context.Context, field graphql.CollectedField, obj *models1.RBACRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RBACRole_childRoles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChildRoles, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models1.RBACRole)
	fc.Result = res
	return ec.marshalORBACRole2ᚕᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐRBACRoleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RBACRole_childRoles(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RBACRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_RBACRole_ID(ctx, field)
			case "name":
				return ec.fieldContext_RBACRole_name(ctx, field)
			case "title":
				return ec.fieldContext_RBACRole_title(ctx, field)
			case "description":
				return ec.fieldContext_RBACRole_description(ctx, field)
			case "context":
				return ec.fieldContext_RBACRole_context(ctx, field)
			case "childRoles":
				return ec.fieldContext_RBACRole_childRoles(ctx, field)
			case "permissions":
				return ec.fieldContext_RBACRole_permissions(ctx, field)
			case "permissionPatterns":
				return ec.fieldContext_RBACRole_permissionPatterns(ctx, field)
			case "createdAt":
				return ec.fieldContext_RBACRole_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_RBACRole_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_RBACRole_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RBACRole", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RBACRole_permissions(ctx context.Context, field graphql.CollectedField, obj *models1.RBACRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RBACRole_permissions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Permissions, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models1.RBACPermission)
	fc.Result = res
	return ec.marshalORBACPermission2ᚕᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐRBACPermissionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RBACRole_permissions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RBACRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_RBACPermission_name(ctx, field)
			case "object":
				return ec.fieldContext_RBACPermission_object(ctx, field)
			case "access":
				return ec.fieldContext_RBACPermission_access(ctx, field)
			case "fullname":
				return ec.fieldContext_RBACPermission_fullname(ctx, field)
			case "description":
				return ec.fieldContext_RBACPermission_description(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RBACPermission", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RBACRole_permissionPatterns(ctx context.Context, field graphql.CollectedField, obj *models1.RBACRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RBACRole_permissionPatterns(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PermissionPatterns, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RBACRole_permissionPatterns(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RBACRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RBACRole_createdAt(ctx context.Context, field graphql.CollectedField, obj *models1.RBACRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RBACRole_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RBACRole_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RBACRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RBACRole_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models1.RBACRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RBACRole_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RBACRole_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RBACRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RBACRole_deletedAt(ctx context.Context, field graphql.CollectedField, obj *models1.RBACRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RBACRole_deletedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RBACRole_deletedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RBACRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RBACRoleConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models1.RBACRole, models1.RBACRoleEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RBACRoleConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RBACRoleConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RBACRoleConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RBACRoleConnection_edges(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models1.RBACRole, models1.RBACRoleEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RBACRoleConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models1.RBACRoleEdge)
	fc.Result = res
	return ec.marshalORBACRoleEdge2ᚕᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐRBACRoleEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RBACRoleConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RBACRoleConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_RBACRoleEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_RBACRoleEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RBACRoleEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RBACRoleConnection_list(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models1.RBACRole, models1.RBACRoleEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RBACRoleConnection_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models1.RBACRole)
	fc.Result = res
	return ec.marshalORBACRole2ᚕᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐRBACRoleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RBACRoleConnection_list(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RBACRoleConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_RBACRole_ID(ctx, field)
			case "name":
				return ec.fieldContext_RBACRole_name(ctx, field)
			case "title":
				return ec.fieldContext_RBACRole_title(ctx, field)
			case "description":
				return ec.fieldContext_RBACRole_description(ctx, field)
			case "context":
				return ec.fieldContext_RBACRole_context(ctx, field)
			case "childRoles":
				return ec.fieldContext_RBACRole_childRoles(ctx, field)
			case "permissions":
				return ec.fieldContext_RBACRole_permissions(ctx, field)
			case "permissionPatterns":
				return ec.fieldContext_RBACRole_permissionPatterns(ctx, field)
			case "createdAt":
				return ec.fieldContext_RBACRole_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_RBACRole_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_RBACRole_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RBACRole", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RBACRoleConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models1.RBACRole, models1.RBACRoleEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RBACRoleConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RBACRoleConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RBACRoleConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "total":
				return ec.fieldContext_PageInfo_total(ctx, field)
			case "page":
				return ec.fieldContext_PageInfo_page(ctx, field)
			case "count":
				return ec.fieldContext_PageInfo_count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RBACRoleEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *models1.RBACRoleEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RBACRoleEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RBACRoleEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RBACRoleEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RBACRoleEdge_node(ctx context.Context, field graphql.CollectedField, obj *models1.RBACRoleEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RBACRoleEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models1.RBACRole)
	fc.Result = res
	return ec.marshalORBACRole2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐRBACRole(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RBACRoleEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RBACRoleEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_RBACRole_ID(ctx, field)
			case "name":
				return ec.fieldContext_RBACRole_name(ctx, field)
			case "title":
				return ec.fieldContext_RBACRole_title(ctx, field)
			case "description":
				return ec.fieldContext_RBACRole_description(ctx, field)
			case "context":
				return ec.fieldContext_RBACRole_context(ctx, field)
			case "childRoles":
				return ec.fieldContext_RBACRole_childRoles(ctx, field)
			case "permissions":
				return ec.fieldContext_RBACRole_permissions(ctx, field)
			case "permissionPatterns":
				return ec.fieldContext_RBACRole_permissionPatterns(ctx, field)
			case "createdAt":
				return ec.fieldContext_RBACRole_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_RBACRole_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_RBACRole_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RBACRole", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RBACRolePayload_clientMutationID(ctx context.Context, field graphql.CollectedField, obj *models1.RBACRolePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RBACRolePayload_clientMutationID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientMutationID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RBACRolePayload_clientMutationID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RBACRolePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RBACRolePayload_roleID(ctx context.Context, field graphql.CollectedField, obj *models1.RBACRolePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RBACRolePayload_roleID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoleID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNID642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RBACRolePayload_roleID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RBACRolePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RBACRolePayload_role(ctx context.Context, field graphql.CollectedField, obj *models1.RBACRolePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RBACRolePayload_role(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Role, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models1.RBACRole)
	fc.Result = res
	return ec.marshalORBACRole2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐRBACRole(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RBACRolePayload_role(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RBACRolePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_RBACRole_ID(ctx, field)
			case "name":
				return ec.fieldContext_RBACRole_name(ctx, field)
			case "title":
				return ec.fieldContext_RBACRole_title(ctx, field)
			case "description":
				return ec.fieldContext_RBACRole_description(ctx, field)
			case "context":
				return ec.fieldContext_RBACRole_context(ctx, field)
			case "childRoles":
				return ec.fieldContext_RBACRole_childRoles(ctx, field)
			case "permissions":
				return ec.fieldContext_RBACRole_permissions(ctx, field)
			case "permissionPatterns":
				return ec.fieldContext_RBACRole_permissionPatterns(ctx, field)
			case "createdAt":
				return ec.fieldContext_RBACRole_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_RBACRole_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_RBACRole_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RBACRole", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RTBSource_ID(ctx context.Context, field graphql.CollectedField, obj *models.RTBSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RTBSource_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNID642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RTBSource_ID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RTBSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RTBSource_accountID(ctx context.Context, field graphql.CollectedField, obj *models.RTBSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RTBSource_accountID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNID642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RTBSource_accountID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RTBSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RTBSource_title(ctx context.Context, field graphql.CollectedField, obj *models.RTBSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RTBSource_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RTBSource_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RTBSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RTBSource_description(ctx context.Context, field graphql.CollectedField, obj *models.RTBSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RTBSource_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RTBSource_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RTBSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RTBSource_status(ctx context.Context, field graphql.CollectedField, obj *models.RTBSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RTBSource_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models1.ApproveStatus)
	fc.Result = res
	return ec.marshalNApproveStatus2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐApproveStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RTBSource_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RTBSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ApproveStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RTBSource_active(ctx context.Context, field graphql.CollectedField, obj *models.RTBSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RTBSource_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models1.ActiveStatus)
	fc.Result = res
	return ec.marshalNActiveStatus2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐActiveStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RTBSource_active(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RTBSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ActiveStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RTBSource_flags(ctx context.Context, field graphql.CollectedField, obj *models.RTBSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RTBSource_flags(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Flags, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.NullableJSON)
	fc.Result = res
	return ec.marshalNNullableJSON2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋtypesᚐNullableJSON(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RTBSource_flags(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RTBSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullableJSON does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RTBSource_protocol(ctx context.Context, field graphql.CollectedField, obj *models.RTBSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RTBSource_protocol(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Protocol, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RTBSource_protocol(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RTBSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RTBSource_minimalWeight(ctx context.Context, field graphql.CollectedField, obj *models.RTBSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RTBSource_minimalWeight(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinimalWeight, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RTBSource_minimalWeight(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RTBSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RTBSource_URL(ctx context.Context, field graphql.CollectedField, obj *models.RTBSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RTBSource_URL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RTBSource_URL(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RTBSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RTBSource_method(ctx context.Context, field graphql.CollectedField, obj *models.RTBSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RTBSource_method(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Method, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RTBSource_method(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RTBSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RTBSource_requestType(ctx context.Context, field graphql.CollectedField, obj *models.RTBSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RTBSource_requestType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RequestType, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.RTBRequestFormatType)
	fc.Result = res
	return ec.marshalNRTBRequestFormatType2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐRTBRequestFormatType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RTBSource_requestType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RTBSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type RTBRequestFormatType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RTBSource_headers(ctx context.Context, field graphql.CollectedField, obj *models.RTBSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RTBSource_headers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Headers, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.NullableJSON)
	fc.Result = res
	return ec.marshalNNullableJSON2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋtypesᚐNullableJSON(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RTBSource_headers(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RTBSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullableJSON does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RTBSource_RPS(ctx context.Context, field graphql.CollectedField, obj *models.RTBSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RTBSource_RPS(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rps, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RTBSource_RPS(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RTBSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RTBSource_timeout(ctx context.Context, field graphql.CollectedField, obj *models.RTBSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RTBSource_timeout(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timeout, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RTBSource_timeout(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RTBSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RTBSource_accuracy(ctx context.Context, field graphql.CollectedField, obj *models.RTBSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RTBSource_accuracy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Accuracy, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RTBSource_accuracy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RTBSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RTBSource_priceCorrectionReduce(ctx context.Context, field graphql.CollectedField, obj *models.RTBSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RTBSource_priceCorrectionReduce(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PriceCorrectionReduce, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RTBSource_priceCorrectionReduce(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RTBSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RTBSource_auctionType(ctx context.Context, field graphql.CollectedField, obj *models.RTBSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RTBSource_auctionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuctionType, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.AuctionType)
	fc.Result = res
	return ec.marshalNAuctionType2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐAuctionType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RTBSource_auctionType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RTBSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AuctionType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RTBSource_minBid(ctx context.Context, field graphql.CollectedField, obj *models.RTBSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RTBSource_minBid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinBid, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RTBSource_minBid(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RTBSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RTBSource_maxBid(ctx context.Context, field graphql.CollectedField, obj *models.RTBSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RTBSource_maxBid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxBid, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RTBSource_maxBid(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RTBSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RTBSource_formats(ctx context.Context, field graphql.CollectedField, obj *models.RTBSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RTBSource_formats(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Formats, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RTBSource_formats(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RTBSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RTBSource_deviceTypes(ctx context.Context, field graphql.CollectedField, obj *models.RTBSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RTBSource_deviceTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceTypes, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]int64)
	fc.Result = res
	return ec.marshalOInt642ᚕint64ᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RTBSource_deviceTypes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RTBSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RTBSource_devices(ctx context.Context, field graphql.CollectedField, obj *models.RTBSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RTBSource_devices(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Devices, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]int64)
	fc.Result = res
	return ec.marshalOInt642ᚕint64ᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RTBSource_devices(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RTBSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RTBSource_OS(ctx context.Context, field graphql.CollectedField, obj *models.RTBSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RTBSource_OS(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Os, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]int64)
	fc.Result = res
	return ec.marshalOInt642ᚕint64ᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RTBSource_OS(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RTBSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RTBSource_browsers(ctx context.Context, field graphql.CollectedField, obj *models.RTBSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RTBSource_browsers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Browsers, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]int64)
	fc.Result = res
	return ec.marshalOInt642ᚕint64ᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RTBSource_browsers(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RTBSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RTBSource_carriers(ctx context.Context, field graphql.CollectedField, obj *models.RTBSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RTBSource_carriers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Carriers, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]int64)
	fc.Result = res
	return ec.marshalOInt642ᚕint64ᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RTBSource_carriers(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RTBSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RTBSource_categories(ctx context.Context, field graphql.CollectedField, obj *models.RTBSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RTBSource_categories(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Categories, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]int64)
	fc.Result = res
	return ec.marshalOInt642ᚕint64ᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RTBSource_categories(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RTBSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RTBSource_countries(ctx context.Context, field graphql.CollectedField, obj *models.RTBSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RTBSource_countries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Countries, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RTBSource_countries(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RTBSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RTBSource_languages(ctx context.Context, field graphql.CollectedField, obj *models.RTBSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RTBSource_languages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Languages, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RTBSource_languages(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RTBSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RTBSource_applications(ctx context.Context, field graphql.CollectedField, obj *models.RTBSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RTBSource_applications(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Applications, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]int64)
	fc.Result = res
	return ec.marshalOInt642ᚕint64ᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RTBSource_applications(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RTBSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RTBSource_domains(ctx context.Context, field graphql.CollectedField, obj *models.RTBSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RTBSource_domains(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Domains, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RTBSource_domains(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RTBSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RTBSource_zones(ctx context.Context, field graphql.CollectedField, obj *models.RTBSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RTBSource_zones(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Zones, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]int64)
	fc.Result = res
	return ec.marshalOInt642ᚕint64ᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RTBSource_zones(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RTBSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RTBSource_secure(ctx context.Context, field graphql.CollectedField, obj *models.RTBSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RTBSource_secure(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Secure, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.AnyOnlyExclude)
	fc.Result = res
	return ec.marshalNAnyOnlyExclude2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐAnyOnlyExclude(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RTBSource_secure(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RTBSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AnyOnlyExclude does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RTBSource_adBlock(ctx context.Context, field graphql.CollectedField, obj *models.RTBSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RTBSource_adBlock(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdBlock, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.AnyOnlyExclude)
	fc.Result = res
	return ec.marshalNAnyOnlyExclude2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐAnyOnlyExclude(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RTBSource_adBlock(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RTBSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AnyOnlyExclude does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RTBSource_privateBrowsing(ctx context.Context, field graphql.CollectedField, obj *models.RTBSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RTBSource_privateBrowsing(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrivateBrowsing, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.AnyOnlyExclude)
	fc.Result = res
	return ec.marshalNAnyOnlyExclude2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐAnyOnlyExclude(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RTBSource_privateBrowsing(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RTBSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AnyOnlyExclude does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RTBSource_IP(ctx context.Context, field graphql.CollectedField, obj *models.RTBSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RTBSource_IP(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IP, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.AnyIPv4IPv6)
	fc.Result = res
	return ec.marshalNAnyIPv4IPv62githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐAnyIPv4IPv6(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RTBSource_IP(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RTBSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AnyIPv4IPv6 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RTBSource_config(ctx context.Context, field graphql.CollectedField, obj *models.RTBSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RTBSource_config(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Config, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.NullableJSON)
	fc.Result = res
	return ec.marshalNNullableJSON2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋtypesᚐNullableJSON(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RTBSource_config(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RTBSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullableJSON does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RTBSource_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.RTBSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RTBSource_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RTBSource_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RTBSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RTBSource_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models.RTBSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RTBSource_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RTBSource_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RTBSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RTBSource_deletedAt(ctx context.Context, field graphql.CollectedField, obj *models.RTBSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RTBSource_deletedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RTBSource_deletedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RTBSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RTBSourceConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models.RTBSource, models.RTBSourceEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RTBSourceConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RTBSourceConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RTBSourceConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RTBSourceConnection_edges(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models.RTBSource, models.RTBSourceEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RTBSourceConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.RTBSourceEdge)
	fc.Result = res
	return ec.marshalNRTBSourceEdge2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐRTBSourceEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RTBSourceConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RTBSourceConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_RTBSourceEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_RTBSourceEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RTBSourceEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RTBSourceConnection_list(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models.RTBSource, models.RTBSourceEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RTBSourceConnection_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.RTBSource)
	fc.Result = res
	return ec.marshalNRTBSource2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐRTBSourceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RTBSourceConnection_list(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RTBSourceConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_RTBSource_ID(ctx, field)
			case "accountID":
				return ec.fieldContext_RTBSource_accountID(ctx, field)
			case "title":
				return ec.fieldContext_RTBSource_title(ctx, field)
			case "description":
				return ec.fieldContext_RTBSource_description(ctx, field)
			case "status":
				return ec.fieldContext_RTBSource_status(ctx, field)
			case "active":
				return ec.fieldContext_RTBSource_active(ctx, field)
			case "flags":
				return ec.fieldContext_RTBSource_flags(ctx, field)
			case "protocol":
				return ec.fieldContext_RTBSource_protocol(ctx, field)
			case "minimalWeight":
				return ec.fieldContext_RTBSource_minimalWeight(ctx, field)
			case "URL":
				return ec.fieldContext_RTBSource_URL(ctx, field)
			case "method":
				return ec.fieldContext_RTBSource_method(ctx, field)
			case "requestType":
				return ec.fieldContext_RTBSource_requestType(ctx, field)
			case "headers":
				return ec.fieldContext_RTBSource_headers(ctx, field)
			case "RPS":
				return ec.fieldContext_RTBSource_RPS(ctx, field)
			case "timeout":
				return ec.fieldContext_RTBSource_timeout(ctx, field)
			case "accuracy":
				return ec.fieldContext_RTBSource_accuracy(ctx, field)
			case "priceCorrectionReduce":
				return ec.fieldContext_RTBSource_priceCorrectionReduce(ctx, field)
			case "auctionType":
				return ec.fieldContext_RTBSource_auctionType(ctx, field)
			case "minBid":
				return ec.fieldContext_RTBSource_minBid(ctx, field)
			case "maxBid":
				return ec.fieldContext_RTBSource_maxBid(ctx, field)
			case "formats":
				return ec.fieldContext_RTBSource_formats(ctx, field)
			case "deviceTypes":
				return ec.fieldContext_RTBSource_deviceTypes(ctx, field)
			case "devices":
				return ec.fieldContext_RTBSource_devices(ctx, field)
			case "OS":
				return ec.fieldContext_RTBSource_OS(ctx, field)
			case "browsers":
				return ec.fieldContext_RTBSource_browsers(ctx, field)
			case "carriers":
				return ec.fieldContext_RTBSource_carriers(ctx, field)
			case "categories":
				return ec.fieldContext_RTBSource_categories(ctx, field)
			case "countries":
				return ec.fieldContext_RTBSource_countries(ctx, field)
			case "languages":
				return ec.fieldContext_RTBSource_languages(ctx, field)
			case "applications":
				return ec.fieldContext_RTBSource_applications(ctx, field)
			case "domains":
				return ec.fieldContext_RTBSource_domains(ctx, field)
			case "zones":
				return ec.fieldContext_RTBSource_zones(ctx, field)
			case "secure":
				return ec.fieldContext_RTBSource_secure(ctx, field)
			case "adBlock":
				return ec.fieldContext_RTBSource_adBlock(ctx, field)
			case "privateBrowsing":
				return ec.fieldContext_RTBSource_privateBrowsing(ctx, field)
			case "IP":
				return ec.fieldContext_RTBSource_IP(ctx, field)
			case "config":
				return ec.fieldContext_RTBSource_config(ctx, field)
			case "createdAt":
				return ec.fieldContext_RTBSource_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_RTBSource_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_RTBSource_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RTBSource", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RTBSourceConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models.RTBSource, models.RTBSourceEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RTBSourceConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RTBSourceConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RTBSourceConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "total":
				return ec.fieldContext_PageInfo_total(ctx, field)
			case "page":
				return ec.fieldContext_PageInfo_page(ctx, field)
			case "count":
				return ec.fieldContext_PageInfo_count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RTBSourceEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *models.RTBSourceEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RTBSourceEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RTBSourceEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RTBSourceEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RTBSourceEdge_node(ctx context.Context, field graphql.CollectedField, obj *models.RTBSourceEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RTBSourceEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.RTBSource)
	fc.Result = res
	return ec.marshalNRTBSource2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐRTBSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RTBSourceEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RTBSourceEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_RTBSource_ID(ctx, field)
			case "accountID":
				return ec.fieldContext_RTBSource_accountID(ctx, field)
			case "title":
				return ec.fieldContext_RTBSource_title(ctx, field)
			case "description":
				return ec.fieldContext_RTBSource_description(ctx, field)
			case "status":
				return ec.fieldContext_RTBSource_status(ctx, field)
			case "active":
				return ec.fieldContext_RTBSource_active(ctx, field)
			case "flags":
				return ec.fieldContext_RTBSource_flags(ctx, field)
			case "protocol":
				return ec.fieldContext_RTBSource_protocol(ctx, field)
			case "minimalWeight":
				return ec.fieldContext_RTBSource_minimalWeight(ctx, field)
			case "URL":
				return ec.fieldContext_RTBSource_URL(ctx, field)
			case "method":
				return ec.fieldContext_RTBSource_method(ctx, field)
			case "requestType":
				return ec.fieldContext_RTBSource_requestType(ctx, field)
			case "headers":
				return ec.fieldContext_RTBSource_headers(ctx, field)
			case "RPS":
				return ec.fieldContext_RTBSource_RPS(ctx, field)
			case "timeout":
				return ec.fieldContext_RTBSource_timeout(ctx, field)
			case "accuracy":
				return ec.fieldContext_RTBSource_accuracy(ctx, field)
			case "priceCorrectionReduce":
				return ec.fieldContext_RTBSource_priceCorrectionReduce(ctx, field)
			case "auctionType":
				return ec.fieldContext_RTBSource_auctionType(ctx, field)
			case "minBid":
				return ec.fieldContext_RTBSource_minBid(ctx, field)
			case "maxBid":
				return ec.fieldContext_RTBSource_maxBid(ctx, field)
			case "formats":
				return ec.fieldContext_RTBSource_formats(ctx, field)
			case "deviceTypes":
				return ec.fieldContext_RTBSource_deviceTypes(ctx, field)
			case "devices":
				return ec.fieldContext_RTBSource_devices(ctx, field)
			case "OS":
				return ec.fieldContext_RTBSource_OS(ctx, field)
			case "browsers":
				return ec.fieldContext_RTBSource_browsers(ctx, field)
			case "carriers":
				return ec.fieldContext_RTBSource_carriers(ctx, field)
			case "categories":
				return ec.fieldContext_RTBSource_categories(ctx, field)
			case "countries":
				return ec.fieldContext_RTBSource_countries(ctx, field)
			case "languages":
				return ec.fieldContext_RTBSource_languages(ctx, field)
			case "applications":
				return ec.fieldContext_RTBSource_applications(ctx, field)
			case "domains":
				return ec.fieldContext_RTBSource_domains(ctx, field)
			case "zones":
				return ec.fieldContext_RTBSource_zones(ctx, field)
			case "secure":
				return ec.fieldContext_RTBSource_secure(ctx, field)
			case "adBlock":
				return ec.fieldContext_RTBSource_adBlock(ctx, field)
			case "privateBrowsing":
				return ec.fieldContext_RTBSource_privateBrowsing(ctx, field)
			case "IP":
				return ec.fieldContext_RTBSource_IP(ctx, field)
			case "config":
				return ec.fieldContext_RTBSource_config(ctx, field)
			case "createdAt":
				return ec.fieldContext_RTBSource_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_RTBSource_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_RTBSource_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RTBSource", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RTBSourcePayload_clientMutationID(ctx context.Context, field graphql.CollectedField, obj *models.RTBSourcePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RTBSourcePayload_clientMutationID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientMutationID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RTBSourcePayload_clientMutationID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RTBSourcePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RTBSourcePayload_sourceID(ctx context.Context, field graphql.CollectedField, obj *models.RTBSourcePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RTBSourcePayload_sourceID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNID642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RTBSourcePayload_sourceID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RTBSourcePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RTBSourcePayload_source(ctx context.Context, field graphql.CollectedField, obj *models.RTBSourcePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RTBSourcePayload_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.RTBSource)
	fc.Result = res
	return ec.marshalNRTBSource2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐRTBSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RTBSourcePayload_source(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RTBSourcePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_RTBSource_ID(ctx, field)
			case "accountID":
				return ec.fieldContext_RTBSource_accountID(ctx, field)
			case "title":
				return ec.fieldContext_RTBSource_title(ctx, field)
			case "description":
				return ec.fieldContext_RTBSource_description(ctx, field)
			case "status":
				return ec.fieldContext_RTBSource_status(ctx, field)
			case "active":
				return ec.fieldContext_RTBSource_active(ctx, field)
			case "flags":
				return ec.fieldContext_RTBSource_flags(ctx, field)
			case "protocol":
				return ec.fieldContext_RTBSource_protocol(ctx, field)
			case "minimalWeight":
				return ec.fieldContext_RTBSource_minimalWeight(ctx, field)
			case "URL":
				return ec.fieldContext_RTBSource_URL(ctx, field)
			case "method":
				return ec.fieldContext_RTBSource_method(ctx, field)
			case "requestType":
				return ec.fieldContext_RTBSource_requestType(ctx, field)
			case "headers":
				return ec.fieldContext_RTBSource_headers(ctx, field)
			case "RPS":
				return ec.fieldContext_RTBSource_RPS(ctx, field)
			case "timeout":
				return ec.fieldContext_RTBSource_timeout(ctx, field)
			case "accuracy":
				return ec.fieldContext_RTBSource_accuracy(ctx, field)
			case "priceCorrectionReduce":
				return ec.fieldContext_RTBSource_priceCorrectionReduce(ctx, field)
			case "auctionType":
				return ec.fieldContext_RTBSource_auctionType(ctx, field)
			case "minBid":
				return ec.fieldContext_RTBSource_minBid(ctx, field)
			case "maxBid":
				return ec.fieldContext_RTBSource_maxBid(ctx, field)
			case "formats":
				return ec.fieldContext_RTBSource_formats(ctx, field)
			case "deviceTypes":
				return ec.fieldContext_RTBSource_deviceTypes(ctx, field)
			case "devices":
				return ec.fieldContext_RTBSource_devices(ctx, field)
			case "OS":
				return ec.fieldContext_RTBSource_OS(ctx, field)
			case "browsers":
				return ec.fieldContext_RTBSource_browsers(ctx, field)
			case "carriers":
				return ec.fieldContext_RTBSource_carriers(ctx, field)
			case "categories":
				return ec.fieldContext_RTBSource_categories(ctx, field)
			case "countries":
				return ec.fieldContext_RTBSource_countries(ctx, field)
			case "languages":
				return ec.fieldContext_RTBSource_languages(ctx, field)
			case "applications":
				return ec.fieldContext_RTBSource_applications(ctx, field)
			case "domains":
				return ec.fieldContext_RTBSource_domains(ctx, field)
			case "zones":
				return ec.fieldContext_RTBSource_zones(ctx, field)
			case "secure":
				return ec.fieldContext_RTBSource_secure(ctx, field)
			case "adBlock":
				return ec.fieldContext_RTBSource_adBlock(ctx, field)
			case "privateBrowsing":
				return ec.fieldContext_RTBSource_privateBrowsing(ctx, field)
			case "IP":
				return ec.fieldContext_RTBSource_IP(ctx, field)
			case "config":
				return ec.fieldContext_RTBSource_config(ctx, field)
			case "createdAt":
				return ec.fieldContext_RTBSource_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_RTBSource_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_RTBSource_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RTBSource", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SessionToken_token(ctx context.Context, field graphql.CollectedField, obj *models1.SessionToken) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SessionToken_token(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SessionToken_token(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SessionToken",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SessionToken_expiresAt(ctx context.Context, field graphql.CollectedField, obj *models1.SessionToken) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SessionToken_expiresAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpiresAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SessionToken_expiresAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SessionToken",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SessionToken_isAdmin(ctx context.Context, field graphql.CollectedField, obj *models1.SessionToken) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SessionToken_isAdmin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAdmin, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SessionToken_isAdmin(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SessionToken",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SessionToken_roles(ctx context.Context, field graphql.CollectedField, obj *models1.SessionToken) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SessionToken_roles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Roles, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SessionToken_roles(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SessionToken",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SocialAccount_ID(ctx context.Context, field graphql.CollectedField, obj *models1.SocialAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SocialAccount_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNID642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SocialAccount_ID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SocialAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SocialAccount_userID(ctx context.Context, field graphql.CollectedField, obj *models1.SocialAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SocialAccount_userID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNID642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SocialAccount_userID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SocialAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SocialAccount_socialID(ctx context.Context, field graphql.CollectedField, obj *models1.SocialAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SocialAccount_socialID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SocialID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SocialAccount_socialID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SocialAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SocialAccount_provider(ctx context.Context, field graphql.CollectedField, obj *models1.SocialAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SocialAccount_provider(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Provider, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SocialAccount_provider(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SocialAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SocialAccount_email(ctx context.Context, field graphql.CollectedField, obj *models1.SocialAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SocialAccount_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SocialAccount_email(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SocialAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SocialAccount_username(ctx context.Context, field graphql.CollectedField, obj *models1.SocialAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SocialAccount_username(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Username, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SocialAccount_username(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SocialAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SocialAccount_firstName(ctx context.Context, field graphql.CollectedField, obj *models1.SocialAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SocialAccount_firstName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstName, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SocialAccount_firstName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SocialAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SocialAccount_lastName(ctx context.Context, field graphql.CollectedField, obj *models1.SocialAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SocialAccount_lastName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastName, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SocialAccount_lastName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SocialAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SocialAccount_avatar(ctx context.Context, field graphql.CollectedField, obj *models1.SocialAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SocialAccount_avatar(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avatar, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SocialAccount_avatar(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SocialAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SocialAccount_link(ctx context.Context, field graphql.CollectedField, obj *models1.SocialAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SocialAccount_link(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Link, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SocialAccount_link(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SocialAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SocialAccount_data(ctx context.Context, field graphql.CollectedField, obj *models1.SocialAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SocialAccount_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.NullableJSON)
	fc.Result = res
	return ec.marshalNNullableJSON2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋtypesᚐNullableJSON(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SocialAccount_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SocialAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullableJSON does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SocialAccount_sessions(ctx context.Context, field graphql.CollectedField, obj *models1.SocialAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SocialAccount_sessions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sessions, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models1.SocialAccountSession)
	fc.Result = res
	return ec.marshalOSocialAccountSession2ᚕᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐSocialAccountSessionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SocialAccount_sessions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SocialAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_SocialAccountSession_name(ctx, field)
			case "socialAccountID":
				return ec.fieldContext_SocialAccountSession_socialAccountID(ctx, field)
			case "tokenType":
				return ec.fieldContext_SocialAccountSession_tokenType(ctx, field)
			case "accessToken":
				return ec.fieldContext_SocialAccountSession_accessToken(ctx, field)
			case "refreshToken":
				return ec.fieldContext_SocialAccountSession_refreshToken(ctx, field)
			case "scope":
				return ec.fieldContext_SocialAccountSession_scope(ctx, field)
			case "createdAt":
				return ec.fieldContext_SocialAccountSession_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_SocialAccountSession_updatedAt(ctx, field)
			case "expiresAt":
				return ec.fieldContext_SocialAccountSession_expiresAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_SocialAccountSession_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SocialAccountSession", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SocialAccount_createdAt(ctx context.Context, field graphql.CollectedField, obj *models1.SocialAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SocialAccount_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SocialAccount_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SocialAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SocialAccount_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models1.SocialAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SocialAccount_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SocialAccount_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SocialAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SocialAccount_deletedAt(ctx context.Context, field graphql.CollectedField, obj *models1.SocialAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SocialAccount_deletedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SocialAccount_deletedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SocialAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SocialAccountConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models1.SocialAccount, models1.SocialAccountEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SocialAccountConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SocialAccountConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SocialAccountConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SocialAccountConnection_edges(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models1.SocialAccount, models1.SocialAccountEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SocialAccountConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models1.SocialAccountEdge)
	fc.Result = res
	return ec.marshalOSocialAccountEdge2ᚕᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐSocialAccountEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SocialAccountConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SocialAccountConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_SocialAccountEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_SocialAccountEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SocialAccountEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SocialAccountConnection_list(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models1.SocialAccount, models1.SocialAccountEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SocialAccountConnection_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models1.SocialAccount)
	fc.Result = res
	return ec.marshalOSocialAccount2ᚕᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐSocialAccountᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SocialAccountConnection_list(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SocialAccountConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_SocialAccount_ID(ctx, field)
			case "userID":
				return ec.fieldContext_SocialAccount_userID(ctx, field)
			case "socialID":
				return ec.fieldContext_SocialAccount_socialID(ctx, field)
			case "provider":
				return ec.fieldContext_SocialAccount_provider(ctx, field)
			case "email":
				return ec.fieldContext_SocialAccount_email(ctx, field)
			case "username":
				return ec.fieldContext_SocialAccount_username(ctx, field)
			case "firstName":
				return ec.fieldContext_SocialAccount_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_SocialAccount_lastName(ctx, field)
			case "avatar":
				return ec.fieldContext_SocialAccount_avatar(ctx, field)
			case "link":
				return ec.fieldContext_SocialAccount_link(ctx, field)
			case "data":
				return ec.fieldContext_SocialAccount_data(ctx, field)
			case "sessions":
				return ec.fieldContext_SocialAccount_sessions(ctx, field)
			case "createdAt":
				return ec.fieldContext_SocialAccount_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_SocialAccount_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_SocialAccount_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SocialAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SocialAccountConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models1.SocialAccount, models1.SocialAccountEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SocialAccountConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SocialAccountConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SocialAccountConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "total":
				return ec.fieldContext_PageInfo_total(ctx, field)
			case "page":
				return ec.fieldContext_PageInfo_page(ctx, field)
			case "count":
				return ec.fieldContext_PageInfo_count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SocialAccountEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *models1.SocialAccountEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SocialAccountEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SocialAccountEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SocialAccountEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SocialAccountEdge_node(ctx context.Context, field graphql.CollectedField, obj *models1.SocialAccountEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SocialAccountEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models1.SocialAccount)
	fc.Result = res
	return ec.marshalOSocialAccount2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐSocialAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SocialAccountEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SocialAccountEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_SocialAccount_ID(ctx, field)
			case "userID":
				return ec.fieldContext_SocialAccount_userID(ctx, field)
			case "socialID":
				return ec.fieldContext_SocialAccount_socialID(ctx, field)
			case "provider":
				return ec.fieldContext_SocialAccount_provider(ctx, field)
			case "email":
				return ec.fieldContext_SocialAccount_email(ctx, field)
			case "username":
				return ec.fieldContext_SocialAccount_username(ctx, field)
			case "firstName":
				return ec.fieldContext_SocialAccount_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_SocialAccount_lastName(ctx, field)
			case "avatar":
				return ec.fieldContext_SocialAccount_avatar(ctx, field)
			case "link":
				return ec.fieldContext_SocialAccount_link(ctx, field)
			case "data":
				return ec.fieldContext_SocialAccount_data(ctx, field)
			case "sessions":
				return ec.fieldContext_SocialAccount_sessions(ctx, field)
			case "createdAt":
				return ec.fieldContext_SocialAccount_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_SocialAccount_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_SocialAccount_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SocialAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SocialAccountPayload_clientMutationID(ctx context.Context, field graphql.CollectedField, obj *models1.SocialAccountPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SocialAccountPayload_clientMutationID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientMutationID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SocialAccountPayload_clientMutationID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SocialAccountPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SocialAccountPayload_socialAccountID(ctx context.Context, field graphql.CollectedField, obj *models1.SocialAccountPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SocialAccountPayload_socialAccountID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SocialAccountID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNID642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SocialAccountPayload_socialAccountID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SocialAccountPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SocialAccountPayload_socialAccount(ctx context.Context, field graphql.CollectedField, obj *models1.SocialAccountPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SocialAccountPayload_socialAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SocialAccount, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models1.SocialAccount)
	fc.Result = res
	return ec.marshalOSocialAccount2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐSocialAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SocialAccountPayload_socialAccount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SocialAccountPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_SocialAccount_ID(ctx, field)
			case "userID":
				return ec.fieldContext_SocialAccount_userID(ctx, field)
			case "socialID":
				return ec.fieldContext_SocialAccount_socialID(ctx, field)
			case "provider":
				return ec.fieldContext_SocialAccount_provider(ctx, field)
			case "email":
				return ec.fieldContext_SocialAccount_email(ctx, field)
			case "username":
				return ec.fieldContext_SocialAccount_username(ctx, field)
			case "firstName":
				return ec.fieldContext_SocialAccount_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_SocialAccount_lastName(ctx, field)
			case "avatar":
				return ec.fieldContext_SocialAccount_avatar(ctx, field)
			case "link":
				return ec.fieldContext_SocialAccount_link(ctx, field)
			case "data":
				return ec.fieldContext_SocialAccount_data(ctx, field)
			case "sessions":
				return ec.fieldContext_SocialAccount_sessions(ctx, field)
			case "createdAt":
				return ec.fieldContext_SocialAccount_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_SocialAccount_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_SocialAccount_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SocialAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SocialAccountSession_name(ctx context.Context, field graphql.CollectedField, obj *models1.SocialAccountSession) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SocialAccountSession_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SocialAccountSession_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SocialAccountSession",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SocialAccountSession_socialAccountID(ctx context.Context, field graphql.CollectedField, obj *models1.SocialAccountSession) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SocialAccountSession_socialAccountID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SocialAccountID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNID642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SocialAccountSession_socialAccountID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SocialAccountSession",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SocialAccountSession_tokenType(ctx context.Context, field graphql.CollectedField, obj *models1.SocialAccountSession) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SocialAccountSession_tokenType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TokenType, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SocialAccountSession_tokenType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SocialAccountSession",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SocialAccountSession_accessToken(ctx context.Context, field graphql.CollectedField, obj *models1.SocialAccountSession) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SocialAccountSession_accessToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccessToken, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SocialAccountSession_accessToken(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SocialAccountSession",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SocialAccountSession_refreshToken(ctx context.Context, field graphql.CollectedField, obj *models1.SocialAccountSession) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SocialAccountSession_refreshToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RefreshToken, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SocialAccountSession_refreshToken(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SocialAccountSession",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SocialAccountSession_scope(ctx context.Context, field graphql.CollectedField, obj *models1.SocialAccountSession) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SocialAccountSession_scope(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Scope, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SocialAccountSession_scope(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SocialAccountSession",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SocialAccountSession_createdAt(ctx context.Context, field graphql.CollectedField, obj *models1.SocialAccountSession) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SocialAccountSession_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SocialAccountSession_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SocialAccountSession",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SocialAccountSession_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models1.SocialAccountSession) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SocialAccountSession_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SocialAccountSession_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SocialAccountSession",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SocialAccountSession_expiresAt(ctx context.Context, field graphql.CollectedField, obj *models1.SocialAccountSession) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SocialAccountSession_expiresAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpiresAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SocialAccountSession_expiresAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SocialAccountSession",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SocialAccountSession_deletedAt(ctx context.Context, field graphql.CollectedField, obj *models1.SocialAccountSession) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SocialAccountSession_deletedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SocialAccountSession_deletedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SocialAccountSession",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StatisticAdItem_keys(ctx context.Context, field graphql.CollectedField, obj *models.StatisticAdItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StatisticAdItem_keys(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Keys, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.StatisticItemKey)
	fc.Result = res
	return ec.marshalOStatisticItemKey2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐStatisticItemKeyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StatisticAdItem_keys(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StatisticAdItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext_StatisticItemKey_key(ctx, field)
			case "value":
				return ec.fieldContext_StatisticItemKey_value(ctx, field)
			case "text":
				return ec.fieldContext_StatisticItemKey_text(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StatisticItemKey", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StatisticAdItem_profit(ctx context.Context, field graphql.CollectedField, obj *models.StatisticAdItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StatisticAdItem_profit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Profit, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StatisticAdItem_profit(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StatisticAdItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StatisticAdItem_bidPrice(ctx context.Context, field graphql.CollectedField, obj *models.StatisticAdItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StatisticAdItem_bidPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BidPrice, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StatisticAdItem_bidPrice(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StatisticAdItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StatisticAdItem_requests(ctx context.Context, field graphql.CollectedField, obj *models.StatisticAdItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StatisticAdItem_requests(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Requests, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StatisticAdItem_requests(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StatisticAdItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StatisticAdItem_impressions(ctx context.Context, field graphql.CollectedField, obj *models.StatisticAdItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StatisticAdItem_impressions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Impressions, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StatisticAdItem_impressions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StatisticAdItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StatisticAdItem_views(ctx context.Context, field graphql.CollectedField, obj *models.StatisticAdItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StatisticAdItem_views(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Views, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StatisticAdItem_views(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StatisticAdItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StatisticAdItem_directs(ctx context.Context, field graphql.CollectedField, obj *models.StatisticAdItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StatisticAdItem_directs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directs, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StatisticAdItem_directs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StatisticAdItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StatisticAdItem_clicks(ctx context.Context, field graphql.CollectedField, obj *models.StatisticAdItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StatisticAdItem_clicks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Clicks, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StatisticAdItem_clicks(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StatisticAdItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StatisticAdItem_bids(ctx context.Context, field graphql.CollectedField, obj *models.StatisticAdItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StatisticAdItem_bids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Bids, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StatisticAdItem_bids(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StatisticAdItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StatisticAdItem_wins(ctx context.Context, field graphql.CollectedField, obj *models.StatisticAdItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StatisticAdItem_wins(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Wins, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StatisticAdItem_wins(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StatisticAdItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StatisticAdItem_skips(ctx context.Context, field graphql.CollectedField, obj *models.StatisticAdItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StatisticAdItem_skips(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Skips, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StatisticAdItem_skips(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StatisticAdItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StatisticAdItem_nobids(ctx context.Context, field graphql.CollectedField, obj *models.StatisticAdItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StatisticAdItem_nobids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nobids, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StatisticAdItem_nobids(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StatisticAdItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StatisticAdItem_errors(ctx context.Context, field graphql.CollectedField, obj *models.StatisticAdItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StatisticAdItem_errors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Errors, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StatisticAdItem_errors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StatisticAdItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StatisticAdItem_CTR(ctx context.Context, field graphql.CollectedField, obj *models.StatisticAdItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StatisticAdItem_CTR(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ctr, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StatisticAdItem_CTR(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StatisticAdItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StatisticAdItem_eCPM(ctx context.Context, field graphql.CollectedField, obj *models.StatisticAdItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StatisticAdItem_eCPM(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ECpm, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StatisticAdItem_eCPM(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StatisticAdItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StatisticAdItem_eCPC(ctx context.Context, field graphql.CollectedField, obj *models.StatisticAdItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StatisticAdItem_eCPC(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ECpc, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StatisticAdItem_eCPC(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StatisticAdItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StatisticAdItemConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models.StatisticAdItem, struct{}]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StatisticAdItemConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StatisticAdItemConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StatisticAdItemConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StatisticAdItemConnection_list(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models.StatisticAdItem, struct{}]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StatisticAdItemConnection_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.StatisticAdItem)
	fc.Result = res
	return ec.marshalOStatisticAdItem2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐStatisticAdItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StatisticAdItemConnection_list(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StatisticAdItemConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "keys":
				return ec.fieldContext_StatisticAdItem_keys(ctx, field)
			case "profit":
				return ec.fieldContext_StatisticAdItem_profit(ctx, field)
			case "bidPrice":
				return ec.fieldContext_StatisticAdItem_bidPrice(ctx, field)
			case "requests":
				return ec.fieldContext_StatisticAdItem_requests(ctx, field)
			case "impressions":
				return ec.fieldContext_StatisticAdItem_impressions(ctx, field)
			case "views":
				return ec.fieldContext_StatisticAdItem_views(ctx, field)
			case "directs":
				return ec.fieldContext_StatisticAdItem_directs(ctx, field)
			case "clicks":
				return ec.fieldContext_StatisticAdItem_clicks(ctx, field)
			case "bids":
				return ec.fieldContext_StatisticAdItem_bids(ctx, field)
			case "wins":
				return ec.fieldContext_StatisticAdItem_wins(ctx, field)
			case "skips":
				return ec.fieldContext_StatisticAdItem_skips(ctx, field)
			case "nobids":
				return ec.fieldContext_StatisticAdItem_nobids(ctx, field)
			case "errors":
				return ec.fieldContext_StatisticAdItem_errors(ctx, field)
			case "CTR":
				return ec.fieldContext_StatisticAdItem_CTR(ctx, field)
			case "eCPM":
				return ec.fieldContext_StatisticAdItem_eCPM(ctx, field)
			case "eCPC":
				return ec.fieldContext_StatisticAdItem_eCPC(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StatisticAdItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StatisticAdItemConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models.StatisticAdItem, struct{}]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StatisticAdItemConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StatisticAdItemConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StatisticAdItemConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "total":
				return ec.fieldContext_PageInfo_total(ctx, field)
			case "page":
				return ec.fieldContext_PageInfo_page(ctx, field)
			case "count":
				return ec.fieldContext_PageInfo_count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StatisticItemKey_key(ctx context.Context, field graphql.CollectedField, obj *models.StatisticItemKey) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StatisticItemKey_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.StatisticKey)
	fc.Result = res
	return ec.marshalNStatisticKey2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐStatisticKey(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StatisticItemKey_key(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StatisticItemKey",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type StatisticKey does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StatisticItemKey_value(ctx context.Context, field graphql.CollectedField, obj *models.StatisticItemKey) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StatisticItemKey_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(any)
	fc.Result = res
	return ec.marshalNAny2interface(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StatisticItemKey_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StatisticItemKey",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Any does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StatisticItemKey_text(ctx context.Context, field graphql.CollectedField, obj *models.StatisticItemKey) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StatisticItemKey_text(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.StatisticItemKey().Text(rctx, obj)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StatisticItemKey_text(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StatisticItemKey",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StatusResponse_clientMutationID(ctx context.Context, field graphql.CollectedField, obj *models1.StatusResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StatusResponse_clientMutationID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientMutationID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StatusResponse_clientMutationID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StatusResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StatusResponse_status(ctx context.Context, field graphql.CollectedField, obj *models1.StatusResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StatusResponse_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models1.ResponseStatus)
	fc.Result = res
	return ec.marshalNResponseStatus2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐResponseStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StatusResponse_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StatusResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ResponseStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StatusResponse_message(ctx context.Context, field graphql.CollectedField, obj *models1.StatusResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StatusResponse_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StatusResponse_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StatusResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimeZone_name(ctx context.Context, field graphql.CollectedField, obj *models.TimeZone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimeZone_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimeZone_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimeZone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimeZone_lon(ctx context.Context, field graphql.CollectedField, obj *models.TimeZone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimeZone_lon(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lon, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimeZone_lon(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimeZone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_ID(ctx context.Context, field graphql.CollectedField, obj *models1.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNID642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_ID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_username(ctx context.Context, field graphql.CollectedField, obj *models1.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_username(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Username, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_username(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_status(ctx context.Context, field graphql.CollectedField, obj *models1.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models1.ApproveStatus)
	fc.Result = res
	return ec.marshalNApproveStatus2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐApproveStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ApproveStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_statusMessage(ctx context.Context, field graphql.CollectedField, obj *models1.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_statusMessage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatusMessage, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_statusMessage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_createdAt(ctx context.Context, field graphql.CollectedField, obj *models1.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models1.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models1.User, models1.UserEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserConnection_edges(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models1.User, models1.UserEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models1.UserEdge)
	fc.Result = res
	return ec.marshalOUserEdge2ᚕᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐUserEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_UserEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_UserEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserConnection_list(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models1.User, models1.UserEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserConnection_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models1.User)
	fc.Result = res
	return ec.marshalOUser2ᚕᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserConnection_list(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_User_ID(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "status":
				return ec.fieldContext_User_status(ctx, field)
			case "statusMessage":
				return ec.fieldContext_User_statusMessage(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models1.User, models1.UserEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "total":
				return ec.fieldContext_PageInfo_total(ctx, field)
			case "page":
				return ec.fieldContext_PageInfo_page(ctx, field)
			case "count":
				return ec.fieldContext_PageInfo_count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *models1.UserEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserEdge_node(ctx context.Context, field graphql.CollectedField, obj *models1.UserEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models1.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_User_ID(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "status":
				return ec.fieldContext_User_status(ctx, field)
			case "statusMessage":
				return ec.fieldContext_User_statusMessage(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserPayload_clientMutationID(ctx context.Context, field graphql.CollectedField, obj *models1.UserPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserPayload_clientMutationID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientMutationID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserPayload_clientMutationID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserPayload_userID(ctx context.Context, field graphql.CollectedField, obj *models1.UserPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserPayload_userID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNID642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserPayload_userID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserPayload_user(ctx context.Context, field graphql.CollectedField, obj *models1.UserPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserPayload_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models1.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserPayload_user(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_User_ID(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "status":
				return ec.fieldContext_User_status(ctx, field)
			case "statusMessage":
				return ec.fieldContext_User_statusMessage(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Zone_ID(ctx context.Context, field graphql.CollectedField, obj *models.Zone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Zone_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNID642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Zone_ID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Zone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Zone_codename(ctx context.Context, field graphql.CollectedField, obj *models.Zone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Zone_codename(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Codename, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Zone_codename(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Zone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Zone_accountID(ctx context.Context, field graphql.CollectedField, obj *models.Zone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Zone_accountID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNID642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Zone_accountID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Zone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Zone_title(ctx context.Context, field graphql.CollectedField, obj *models.Zone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Zone_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Zone_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Zone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Zone_description(ctx context.Context, field graphql.CollectedField, obj *models.Zone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Zone_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Zone_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Zone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Zone_status(ctx context.Context, field graphql.CollectedField, obj *models.Zone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Zone_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models1.ApproveStatus)
	fc.Result = res
	return ec.marshalNApproveStatus2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐApproveStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Zone_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Zone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ApproveStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Zone_active(ctx context.Context, field graphql.CollectedField, obj *models.Zone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Zone_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models1.ActiveStatus)
	fc.Result = res
	return ec.marshalNActiveStatus2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐActiveStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Zone_active(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Zone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ActiveStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Zone_defaultCode(ctx context.Context, field graphql.CollectedField, obj *models.Zone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Zone_defaultCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultCode, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.NullableJSON)
	fc.Result = res
	return ec.marshalNNullableJSON2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋtypesᚐNullableJSON(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Zone_defaultCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Zone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullableJSON does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Zone_context(ctx context.Context, field graphql.CollectedField, obj *models.Zone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Zone_context(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Context, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.NullableJSON)
	fc.Result = res
	return ec.marshalNNullableJSON2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋtypesᚐNullableJSON(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Zone_context(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Zone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullableJSON does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Zone_minECPM(ctx context.Context, field graphql.CollectedField, obj *models.Zone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Zone_minECPM(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinEcpm, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Zone_minECPM(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Zone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Zone_fixedPurchasePrice(ctx context.Context, field graphql.CollectedField, obj *models.Zone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Zone_fixedPurchasePrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FixedPurchasePrice, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Zone_fixedPurchasePrice(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Zone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Zone_allowedFormats(ctx context.Context, field graphql.CollectedField, obj *models.Zone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Zone_allowedFormats(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllowedFormats, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Zone_allowedFormats(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Zone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Zone_allowedTypes(ctx context.Context, field graphql.CollectedField, obj *models.Zone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Zone_allowedTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllowedTypes, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]int64)
	fc.Result = res
	return ec.marshalOInt642ᚕint64ᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Zone_allowedTypes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Zone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Zone_allowedSources(ctx context.Context, field graphql.CollectedField, obj *models.Zone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Zone_allowedSources(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllowedSources, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]int64)
	fc.Result = res
	return ec.marshalOInt642ᚕint64ᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Zone_allowedSources(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Zone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Zone_disallowedSources(ctx context.Context, field graphql.CollectedField, obj *models.Zone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Zone_disallowedSources(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisallowedSources, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]int64)
	fc.Result = res
	return ec.marshalOInt642ᚕint64ᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Zone_disallowedSources(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Zone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Zone_campaigns(ctx context.Context, field graphql.CollectedField, obj *models.Zone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Zone_campaigns(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Campaigns, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]int64)
	fc.Result = res
	return ec.marshalOInt642ᚕint64ᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Zone_campaigns(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Zone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Zone_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.Zone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Zone_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Zone_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Zone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Zone_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models.Zone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Zone_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Zone_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Zone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Zone_deletedAt(ctx context.Context, field graphql.CollectedField, obj *models.Zone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Zone_deletedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Zone_deletedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Zone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ZoneConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models.Zone, models.ZoneEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ZoneConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ZoneConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ZoneConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ZoneConnection_edges(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models.Zone, models.ZoneEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ZoneConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.ZoneEdge)
	fc.Result = res
	return ec.marshalOZoneEdge2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐZoneEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ZoneConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ZoneConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_ZoneEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_ZoneEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ZoneEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ZoneConnection_list(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models.Zone, models.ZoneEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ZoneConnection_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Zone)
	fc.Result = res
	return ec.marshalOZone2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐZoneᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ZoneConnection_list(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ZoneConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_Zone_ID(ctx, field)
			case "codename":
				return ec.fieldContext_Zone_codename(ctx, field)
			case "accountID":
				return ec.fieldContext_Zone_accountID(ctx, field)
			case "title":
				return ec.fieldContext_Zone_title(ctx, field)
			case "description":
				return ec.fieldContext_Zone_description(ctx, field)
			case "status":
				return ec.fieldContext_Zone_status(ctx, field)
			case "active":
				return ec.fieldContext_Zone_active(ctx, field)
			case "defaultCode":
				return ec.fieldContext_Zone_defaultCode(ctx, field)
			case "context":
				return ec.fieldContext_Zone_context(ctx, field)
			case "minECPM":
				return ec.fieldContext_Zone_minECPM(ctx, field)
			case "fixedPurchasePrice":
				return ec.fieldContext_Zone_fixedPurchasePrice(ctx, field)
			case "allowedFormats":
				return ec.fieldContext_Zone_allowedFormats(ctx, field)
			case "allowedTypes":
				return ec.fieldContext_Zone_allowedTypes(ctx, field)
			case "allowedSources":
				return ec.fieldContext_Zone_allowedSources(ctx, field)
			case "disallowedSources":
				return ec.fieldContext_Zone_disallowedSources(ctx, field)
			case "campaigns":
				return ec.fieldContext_Zone_campaigns(ctx, field)
			case "createdAt":
				return ec.fieldContext_Zone_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Zone_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Zone_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Zone", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ZoneConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *connectors.CollectionConnection[models.Zone, models.ZoneEdge]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ZoneConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ZoneConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ZoneConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "total":
				return ec.fieldContext_PageInfo_total(ctx, field)
			case "page":
				return ec.fieldContext_PageInfo_page(ctx, field)
			case "count":
				return ec.fieldContext_PageInfo_count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ZoneEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *models.ZoneEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ZoneEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ZoneEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ZoneEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ZoneEdge_node(ctx context.Context, field graphql.CollectedField, obj *models.ZoneEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ZoneEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Zone)
	fc.Result = res
	return ec.marshalNZone2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐZone(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ZoneEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ZoneEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_Zone_ID(ctx, field)
			case "codename":
				return ec.fieldContext_Zone_codename(ctx, field)
			case "accountID":
				return ec.fieldContext_Zone_accountID(ctx, field)
			case "title":
				return ec.fieldContext_Zone_title(ctx, field)
			case "description":
				return ec.fieldContext_Zone_description(ctx, field)
			case "status":
				return ec.fieldContext_Zone_status(ctx, field)
			case "active":
				return ec.fieldContext_Zone_active(ctx, field)
			case "defaultCode":
				return ec.fieldContext_Zone_defaultCode(ctx, field)
			case "context":
				return ec.fieldContext_Zone_context(ctx, field)
			case "minECPM":
				return ec.fieldContext_Zone_minECPM(ctx, field)
			case "fixedPurchasePrice":
				return ec.fieldContext_Zone_fixedPurchasePrice(ctx, field)
			case "allowedFormats":
				return ec.fieldContext_Zone_allowedFormats(ctx, field)
			case "allowedTypes":
				return ec.fieldContext_Zone_allowedTypes(ctx, field)
			case "allowedSources":
				return ec.fieldContext_Zone_allowedSources(ctx, field)
			case "disallowedSources":
				return ec.fieldContext_Zone_disallowedSources(ctx, field)
			case "campaigns":
				return ec.fieldContext_Zone_campaigns(ctx, field)
			case "createdAt":
				return ec.fieldContext_Zone_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Zone_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Zone_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Zone", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ZonePayload_clientMutationID(ctx context.Context, field graphql.CollectedField, obj *models.ZonePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ZonePayload_clientMutationID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientMutationID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ZonePayload_clientMutationID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ZonePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ZonePayload_zoneID(ctx context.Context, field graphql.CollectedField, obj *models.ZonePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ZonePayload_zoneID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ZoneID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNID642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ZonePayload_zoneID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ZonePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ZonePayload_zone(ctx context.Context, field graphql.CollectedField, obj *models.ZonePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ZonePayload_zone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Zone, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Zone)
	fc.Result = res
	return ec.marshalNZone2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐZone(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ZonePayload_zone(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ZonePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_Zone_ID(ctx, field)
			case "codename":
				return ec.fieldContext_Zone_codename(ctx, field)
			case "accountID":
				return ec.fieldContext_Zone_accountID(ctx, field)
			case "title":
				return ec.fieldContext_Zone_title(ctx, field)
			case "description":
				return ec.fieldContext_Zone_description(ctx, field)
			case "status":
				return ec.fieldContext_Zone_status(ctx, field)
			case "active":
				return ec.fieldContext_Zone_active(ctx, field)
			case "defaultCode":
				return ec.fieldContext_Zone_defaultCode(ctx, field)
			case "context":
				return ec.fieldContext_Zone_context(ctx, field)
			case "minECPM":
				return ec.fieldContext_Zone_minECPM(ctx, field)
			case "fixedPurchasePrice":
				return ec.fieldContext_Zone_fixedPurchasePrice(ctx, field)
			case "allowedFormats":
				return ec.fieldContext_Zone_allowedFormats(ctx, field)
			case "allowedTypes":
				return ec.fieldContext_Zone_allowedTypes(ctx, field)
			case "allowedSources":
				return ec.fieldContext_Zone_allowedSources(ctx, field)
			case "disallowedSources":
				return ec.fieldContext_Zone_disallowedSources(ctx, field)
			case "campaigns":
				return ec.fieldContext_Zone_campaigns(ctx, field)
			case "createdAt":
				return ec.fieldContext_Zone_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Zone_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Zone_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Zone", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Directive_args_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Field_args_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_isOneOf(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_isOneOf(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOneOf(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_isOneOf(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputAccountCreateInput(ctx context.Context, obj any) (models1.AccountCreateInput, error) {
	var it models1.AccountCreateInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ownerID", "owner", "account", "password"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ownerID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerID"))
			data, err := ec.unmarshalOID642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerID = data
		case "owner":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner"))
			data, err := ec.unmarshalOUserInput2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐUserInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Owner = data
		case "account":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("account"))
			data, err := ec.unmarshalNAccountInput2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAccountInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Account = data
		case "password":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAccountInput(ctx context.Context, obj any) (models1.AccountInput, error) {
	var it models1.AccountInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"status", "title", "description", "logoURI", "policyURI", "termsOfServiceURI", "clientURI", "contacts"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOApproveStatus2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐApproveStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "logoURI":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logoURI"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LogoURI = data
		case "policyURI":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("policyURI"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PolicyURI = data
		case "termsOfServiceURI":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("termsOfServiceURI"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TermsOfServiceURI = data
		case "clientURI":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientURI"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClientURI = data
		case "contacts":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contacts"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Contacts = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAccountListFilter(ctx context.Context, obj any) (models1.AccountListFilter, error) {
	var it models1.AccountListFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "UserID", "title", "status"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			data, err := ec.unmarshalOID642ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "UserID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("UserID"))
			data, err := ec.unmarshalOID642ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOApproveStatus2ᚕgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐApproveStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAccountListOrder(ctx context.Context, obj any) (models1.AccountListOrder, error) {
	var it models1.AccountListOrder
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "title", "status"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAdFormatInput(ctx context.Context, obj any) (models.AdFormatInput, error) {
	var it models.AdFormatInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"codename", "type", "title", "description", "active", "width", "height", "minWidth", "minHeight", "config"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "codename":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codename"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Codename = data
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOActiveStatus2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐActiveStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		case "width":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("width"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Width = data
		case "height":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("height"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Height = data
		case "minWidth":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minWidth"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.MinWidth = data
		case "minHeight":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minHeight"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.MinHeight = data
		case "config":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("config"))
			data, err := ec.unmarshalOJSON2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋtypesᚐJSON(ctx, v)
			if err != nil {
				return it, err
			}
			it.Config = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAdFormatListFilter(ctx context.Context, obj any) (models.AdFormatListFilter, error) {
	var it models.AdFormatListFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "codename", "type", "title", "active"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			data, err := ec.unmarshalOID642ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "codename":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codename"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Codename = data
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOActiveStatus2ᚕgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐActiveStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAdFormatListOrder(ctx context.Context, obj any) (models.AdFormatListOrder, error) {
	var it models.AdFormatListOrder
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "codename", "type", "title", "active", "createdAt", "updatedAt"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "codename":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codename"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.Codename = data
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputApplicationCreateInput(ctx context.Context, obj any) (models.ApplicationCreateInput, error) {
	var it models.ApplicationCreateInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"accountID", "title", "description", "URI", "type", "platform", "categories", "revenueShare"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "accountID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountID"))
			data, err := ec.unmarshalOID642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountID = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalNString2string(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				min, err := ec.unmarshalNInt2int(ctx, 3)
				if err != nil {
					var zeroVal string
					return zeroVal, err
				}
				max, err := ec.unmarshalNInt2int(ctx, 255)
				if err != nil {
					var zeroVal string
					return zeroVal, err
				}
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, false)
				if err != nil {
					var zeroVal string
					return zeroVal, err
				}
				if ec.directives.Length == nil {
					var zeroVal string
					return zeroVal, errors.New("directive length is not implemented")
				}
				return ec.directives.Length(ctx, obj, directive0, min, max, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Title = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				if ec.directives.Notempty == nil {
					var zeroVal *string
					return zeroVal, errors.New("directive notempty is not implemented")
				}
				return ec.directives.Notempty(ctx, obj, directive0, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Description = data
			} else if tmp == nil {
				it.Description = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "URI":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("URI"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalNString2string(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				min, err := ec.unmarshalNInt2int(ctx, 1)
				if err != nil {
					var zeroVal string
					return zeroVal, err
				}
				max, err := ec.unmarshalNInt2int(ctx, 255)
				if err != nil {
					var zeroVal string
					return zeroVal, err
				}
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, false)
				if err != nil {
					var zeroVal string
					return zeroVal, err
				}
				if ec.directives.Length == nil {
					var zeroVal string
					return zeroVal, errors.New("directive length is not implemented")
				}
				return ec.directives.Length(ctx, obj, directive0, min, max, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.URI = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalOApplicationType2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐApplicationType(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "platform":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("platform"))
			data, err := ec.unmarshalOPlatformType2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐPlatformType(ctx, v)
			if err != nil {
				return it, err
			}
			it.Platform = data
		case "categories":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categories"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Categories = data
		case "revenueShare":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("revenueShare"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.RevenueShare = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputApplicationListFilter(ctx context.Context, obj any) (models.ApplicationListFilter, error) {
	var it models.ApplicationListFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "title", "URI", "accountID", "type", "platform", "premium", "status", "active", "private"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			data, err := ec.unmarshalOID642ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "URI":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("URI"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URI = data
		case "accountID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountID"))
			data, err := ec.unmarshalOID642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountID = data
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalOApplicationType2ᚕgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐApplicationTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "platform":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("platform"))
			data, err := ec.unmarshalOPlatformType2ᚕgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐPlatformTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Platform = data
		case "premium":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("premium"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Premium = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOApproveStatus2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐApproveStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOActiveStatus2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐActiveStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		case "private":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("private"))
			data, err := ec.unmarshalOPrivateStatus2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐPrivateStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Private = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputApplicationListOrder(ctx context.Context, obj any) (models.ApplicationListOrder, error) {
	var it models.ApplicationListOrder
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "title", "URI", "type", "platform", "premium", "status", "active", "createdAt", "updatedAt", "deletedAt"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "URI":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("URI"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.URI = data
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "platform":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("platform"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.Platform = data
		case "premium":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("premium"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.Premium = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "deletedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputApplicationUpdateInput(ctx context.Context, obj any) (models.ApplicationUpdateInput, error) {
	var it models.ApplicationUpdateInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"accountID", "title", "description", "URI", "type", "platform", "categories", "revenueShare"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "accountID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountID"))
			data, err := ec.unmarshalOID642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountID = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				if ec.directives.Notempty == nil {
					var zeroVal *string
					return zeroVal, errors.New("directive notempty is not implemented")
				}
				return ec.directives.Notempty(ctx, obj, directive0, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Title = data
			} else if tmp == nil {
				it.Title = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				if ec.directives.Notempty == nil {
					var zeroVal *string
					return zeroVal, errors.New("directive notempty is not implemented")
				}
				return ec.directives.Notempty(ctx, obj, directive0, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Description = data
			} else if tmp == nil {
				it.Description = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "URI":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("URI"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				pattern, err := ec.unmarshalNString2string(ctx, "^[a-zA-Z0-9.-]*$")
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				if ec.directives.Regex == nil {
					var zeroVal *string
					return zeroVal, errors.New("directive regex is not implemented")
				}
				return ec.directives.Regex(ctx, obj, directive0, pattern, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.URI = data
			} else if tmp == nil {
				it.URI = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalOApplicationType2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐApplicationType(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "platform":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("platform"))
			data, err := ec.unmarshalOPlatformType2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐPlatformType(ctx, v)
			if err != nil {
				return it, err
			}
			it.Platform = data
		case "categories":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categories"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Categories = data
		case "revenueShare":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("revenueShare"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.RevenueShare = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuthClientInput(ctx context.Context, obj any) (models1.AuthClientInput, error) {
	var it models1.AuthClientInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"accountID", "userID", "title", "secret", "redirectURIs", "grantTypes", "responseTypes", "scope", "audience", "subjectType", "allowedCORSOrigins", "public", "expiresAt"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "accountID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountID"))
			data, err := ec.unmarshalOID642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountID = data
		case "userID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			data, err := ec.unmarshalOID642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "secret":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("secret"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Secret = data
		case "redirectURIs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("redirectURIs"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RedirectURIs = data
		case "grantTypes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grantTypes"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.GrantTypes = data
		case "responseTypes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("responseTypes"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ResponseTypes = data
		case "scope":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scope"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Scope = data
		case "audience":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audience"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Audience = data
		case "subjectType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subjectType"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.SubjectType = data
		case "allowedCORSOrigins":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("allowedCORSOrigins"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AllowedCORSOrigins = data
		case "public":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("public"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Public = data
		case "expiresAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiresAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiresAt = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuthClientListFilter(ctx context.Context, obj any) (models1.AuthClientListFilter, error) {
	var it models1.AuthClientListFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "userID", "accountID", "public"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "userID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			data, err := ec.unmarshalOID642ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		case "accountID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountID"))
			data, err := ec.unmarshalOID642ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountID = data
		case "public":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("public"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Public = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuthClientListOrder(ctx context.Context, obj any) (models1.AuthClientListOrder, error) {
	var it models1.AuthClientListOrder
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "userID", "accountID", "title", "public", "lastUpdate"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "userID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		case "accountID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountID"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountID = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "public":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("public"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.Public = data
		case "lastUpdate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastUpdate"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastUpdate = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBrowserCreateInput(ctx context.Context, obj any) (models.BrowserCreateInput, error) {
	var it models.BrowserCreateInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"parentID", "name", "version", "description", "active", "yearRelease", "yearEndSupport", "matchNameExp", "matchUserAgentExp", "matchVersionMinExp", "matchVersionMaxExp"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "parentID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentID"))
			data, err := ec.unmarshalOID642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ParentID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalNString2string(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				min, err := ec.unmarshalNInt2int(ctx, 1)
				if err != nil {
					var zeroVal string
					return zeroVal, err
				}
				max, err := ec.unmarshalNInt2int(ctx, 255)
				if err != nil {
					var zeroVal string
					return zeroVal, err
				}
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, false)
				if err != nil {
					var zeroVal string
					return zeroVal, err
				}
				if ec.directives.Length == nil {
					var zeroVal string
					return zeroVal, errors.New("directive length is not implemented")
				}
				return ec.directives.Length(ctx, obj, directive0, min, max, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Name = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "version":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				pattern, err := ec.unmarshalNString2string(ctx, "^[0-9]+\\.[0-9]+(\\.[0-9]+)?$")
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				if ec.directives.Regex == nil {
					var zeroVal *string
					return zeroVal, errors.New("directive regex is not implemented")
				}
				return ec.directives.Regex(ctx, obj, directive0, pattern, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Version = data
			} else if tmp == nil {
				it.Version = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				if ec.directives.Notempty == nil {
					var zeroVal *string
					return zeroVal, errors.New("directive notempty is not implemented")
				}
				return ec.directives.Notempty(ctx, obj, directive0, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Description = data
			} else if tmp == nil {
				it.Description = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOActiveStatus2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐActiveStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		case "yearRelease":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yearRelease"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.YearRelease = data
		case "yearEndSupport":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yearEndSupport"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.YearEndSupport = data
		case "matchNameExp":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("matchNameExp"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				if ec.directives.Notempty == nil {
					var zeroVal *string
					return zeroVal, errors.New("directive notempty is not implemented")
				}
				return ec.directives.Notempty(ctx, obj, directive0, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.MatchNameExp = data
			} else if tmp == nil {
				it.MatchNameExp = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "matchUserAgentExp":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("matchUserAgentExp"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				if ec.directives.Notempty == nil {
					var zeroVal *string
					return zeroVal, errors.New("directive notempty is not implemented")
				}
				return ec.directives.Notempty(ctx, obj, directive0, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.MatchUserAgentExp = data
			} else if tmp == nil {
				it.MatchUserAgentExp = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "matchVersionMinExp":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("matchVersionMinExp"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				if ec.directives.Notempty == nil {
					var zeroVal *string
					return zeroVal, errors.New("directive notempty is not implemented")
				}
				return ec.directives.Notempty(ctx, obj, directive0, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.MatchVersionMinExp = data
			} else if tmp == nil {
				it.MatchVersionMinExp = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "matchVersionMaxExp":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("matchVersionMaxExp"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				if ec.directives.Notempty == nil {
					var zeroVal *string
					return zeroVal, errors.New("directive notempty is not implemented")
				}
				return ec.directives.Notempty(ctx, obj, directive0, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.MatchVersionMaxExp = data
			} else if tmp == nil {
				it.MatchVersionMaxExp = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBrowserListFilter(ctx context.Context, obj any) (models.BrowserListFilter, error) {
	var it models.BrowserListFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "parentID", "name", "active"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			data, err := ec.unmarshalOID642ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "parentID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentID"))
			data, err := ec.unmarshalOID642ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ParentID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOActiveStatus2ᚕgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐActiveStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBrowserListOrder(ctx context.Context, obj any) (models.BrowserListOrder, error) {
	var it models.BrowserListOrder
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "name", "active", "createdAt", "updatedAt", "yearRelease"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "yearRelease":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yearRelease"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.YearRelease = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBrowserUpdateInput(ctx context.Context, obj any) (models.BrowserUpdateInput, error) {
	var it models.BrowserUpdateInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "version", "description", "active", "yearRelease", "yearEndSupport", "matchNameExp", "matchUserAgentExp", "matchVersionMinExp", "matchVersionMaxExp"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				min, err := ec.unmarshalNInt2int(ctx, 1)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				max, err := ec.unmarshalNInt2int(ctx, 255)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				if ec.directives.Length == nil {
					var zeroVal *string
					return zeroVal, errors.New("directive length is not implemented")
				}
				return ec.directives.Length(ctx, obj, directive0, min, max, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Name = data
			} else if tmp == nil {
				it.Name = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "version":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				pattern, err := ec.unmarshalNString2string(ctx, "^[0-9]+\\.[0-9]+(\\.[0-9]+)?$")
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				if ec.directives.Regex == nil {
					var zeroVal *string
					return zeroVal, errors.New("directive regex is not implemented")
				}
				return ec.directives.Regex(ctx, obj, directive0, pattern, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Version = data
			} else if tmp == nil {
				it.Version = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				if ec.directives.Notempty == nil {
					var zeroVal *string
					return zeroVal, errors.New("directive notempty is not implemented")
				}
				return ec.directives.Notempty(ctx, obj, directive0, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Description = data
			} else if tmp == nil {
				it.Description = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOActiveStatus2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐActiveStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		case "yearRelease":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yearRelease"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.YearRelease = data
		case "yearEndSupport":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yearEndSupport"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.YearEndSupport = data
		case "matchNameExp":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("matchNameExp"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				if ec.directives.Notempty == nil {
					var zeroVal *string
					return zeroVal, errors.New("directive notempty is not implemented")
				}
				return ec.directives.Notempty(ctx, obj, directive0, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.MatchNameExp = data
			} else if tmp == nil {
				it.MatchNameExp = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "matchUserAgentExp":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("matchUserAgentExp"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				if ec.directives.Notempty == nil {
					var zeroVal *string
					return zeroVal, errors.New("directive notempty is not implemented")
				}
				return ec.directives.Notempty(ctx, obj, directive0, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.MatchUserAgentExp = data
			} else if tmp == nil {
				it.MatchUserAgentExp = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "matchVersionMinExp":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("matchVersionMinExp"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				if ec.directives.Notempty == nil {
					var zeroVal *string
					return zeroVal, errors.New("directive notempty is not implemented")
				}
				return ec.directives.Notempty(ctx, obj, directive0, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.MatchVersionMinExp = data
			} else if tmp == nil {
				it.MatchVersionMinExp = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "matchVersionMaxExp":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("matchVersionMaxExp"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				if ec.directives.Notempty == nil {
					var zeroVal *string
					return zeroVal, errors.New("directive notempty is not implemented")
				}
				return ec.directives.Notempty(ctx, obj, directive0, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.MatchVersionMaxExp = data
			} else if tmp == nil {
				it.MatchVersionMaxExp = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCategoryInput(ctx context.Context, obj any) (models.CategoryInput, error) {
	var it models.CategoryInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description", "IABCode", "parentID", "position", "active"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "IABCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("IABCode"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IABCode = data
		case "parentID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentID"))
			data, err := ec.unmarshalOID642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ParentID = data
		case "position":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("position"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Position = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOActiveStatus2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐActiveStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCategoryListFilter(ctx context.Context, obj any) (models.CategoryListFilter, error) {
	var it models.CategoryListFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "name", "IABCode", "parentID", "active"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			data, err := ec.unmarshalOID642ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "IABCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("IABCode"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IABCode = data
		case "parentID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentID"))
			data, err := ec.unmarshalOID642ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ParentID = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOActiveStatus2ᚕgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐActiveStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCategoryListOrder(ctx context.Context, obj any) (models.CategoryListOrder, error) {
	var it models.CategoryListOrder
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "name", "IABCode", "parentID", "position", "active", "createdAt", "updatedAt"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "IABCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("IABCode"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.IABCode = data
		case "parentID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentID"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.ParentID = data
		case "position":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("position"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.Position = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeviceMakerCreateInput(ctx context.Context, obj any) (models.DeviceMakerCreateInput, error) {
	var it models.DeviceMakerCreateInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"codename", "name", "description", "matchExp", "active"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "codename":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codename"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalNString2string(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				min, err := ec.unmarshalNInt2int(ctx, 1)
				if err != nil {
					var zeroVal string
					return zeroVal, err
				}
				max, err := ec.unmarshalNInt2int(ctx, 64)
				if err != nil {
					var zeroVal string
					return zeroVal, err
				}
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, false)
				if err != nil {
					var zeroVal string
					return zeroVal, err
				}
				if ec.directives.Length == nil {
					var zeroVal string
					return zeroVal, errors.New("directive length is not implemented")
				}
				return ec.directives.Length(ctx, obj, directive0, min, max, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Codename = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalNString2string(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				min, err := ec.unmarshalNInt2int(ctx, 1)
				if err != nil {
					var zeroVal string
					return zeroVal, err
				}
				max, err := ec.unmarshalNInt2int(ctx, 128)
				if err != nil {
					var zeroVal string
					return zeroVal, err
				}
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, false)
				if err != nil {
					var zeroVal string
					return zeroVal, err
				}
				if ec.directives.Length == nil {
					var zeroVal string
					return zeroVal, errors.New("directive length is not implemented")
				}
				return ec.directives.Length(ctx, obj, directive0, min, max, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Name = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				min, err := ec.unmarshalNInt2int(ctx, 1)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				max, err := ec.unmarshalNInt2int(ctx, 1024)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				if ec.directives.Length == nil {
					var zeroVal *string
					return zeroVal, errors.New("directive length is not implemented")
				}
				return ec.directives.Length(ctx, obj, directive0, min, max, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Description = data
			} else if tmp == nil {
				it.Description = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "matchExp":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("matchExp"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				min, err := ec.unmarshalNInt2int(ctx, 1)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				max, err := ec.unmarshalNInt2int(ctx, 1024)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				if ec.directives.Length == nil {
					var zeroVal *string
					return zeroVal, errors.New("directive length is not implemented")
				}
				return ec.directives.Length(ctx, obj, directive0, min, max, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.MatchExp = data
			} else if tmp == nil {
				it.MatchExp = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalNActiveStatus2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐActiveStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeviceMakerListFilter(ctx context.Context, obj any) (models.DeviceMakerListFilter, error) {
	var it models.DeviceMakerListFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "codename", "name", "active"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			data, err := ec.unmarshalOID642ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "codename":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codename"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Codename = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOActiveStatus2ᚕgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐActiveStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeviceMakerListOrder(ctx context.Context, obj any) (models.DeviceMakerListOrder, error) {
	var it models.DeviceMakerListOrder
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "codename", "name", "active", "createdAt", "updatedAt"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "codename":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codename"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.Codename = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeviceMakerUpdateInput(ctx context.Context, obj any) (models.DeviceMakerUpdateInput, error) {
	var it models.DeviceMakerUpdateInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"codename", "name", "description", "matchExp", "active"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "codename":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codename"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				min, err := ec.unmarshalNInt2int(ctx, 1)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				max, err := ec.unmarshalNInt2int(ctx, 64)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				if ec.directives.Length == nil {
					var zeroVal *string
					return zeroVal, errors.New("directive length is not implemented")
				}
				return ec.directives.Length(ctx, obj, directive0, min, max, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Codename = data
			} else if tmp == nil {
				it.Codename = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				min, err := ec.unmarshalNInt2int(ctx, 1)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				max, err := ec.unmarshalNInt2int(ctx, 128)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				if ec.directives.Length == nil {
					var zeroVal *string
					return zeroVal, errors.New("directive length is not implemented")
				}
				return ec.directives.Length(ctx, obj, directive0, min, max, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Name = data
			} else if tmp == nil {
				it.Name = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				min, err := ec.unmarshalNInt2int(ctx, 1)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				max, err := ec.unmarshalNInt2int(ctx, 1024)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				if ec.directives.Length == nil {
					var zeroVal *string
					return zeroVal, errors.New("directive length is not implemented")
				}
				return ec.directives.Length(ctx, obj, directive0, min, max, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Description = data
			} else if tmp == nil {
				it.Description = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "matchExp":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("matchExp"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				min, err := ec.unmarshalNInt2int(ctx, 1)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				max, err := ec.unmarshalNInt2int(ctx, 1024)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				if ec.directives.Length == nil {
					var zeroVal *string
					return zeroVal, errors.New("directive length is not implemented")
				}
				return ec.directives.Length(ctx, obj, directive0, min, max, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.MatchExp = data
			} else if tmp == nil {
				it.MatchExp = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOActiveStatus2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐActiveStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeviceModelCreateInput(ctx context.Context, obj any) (models.DeviceModelCreateInput, error) {
	var it models.DeviceModelCreateInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "codename", "description", "version", "parentID", "matchExp", "typeCodename", "makerCodename", "active"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalNString2string(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				min, err := ec.unmarshalNInt2int(ctx, 1)
				if err != nil {
					var zeroVal string
					return zeroVal, err
				}
				max, err := ec.unmarshalNInt2int(ctx, 128)
				if err != nil {
					var zeroVal string
					return zeroVal, err
				}
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, false)
				if err != nil {
					var zeroVal string
					return zeroVal, err
				}
				if ec.directives.Length == nil {
					var zeroVal string
					return zeroVal, errors.New("directive length is not implemented")
				}
				return ec.directives.Length(ctx, obj, directive0, min, max, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Name = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "codename":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codename"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalNString2string(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				min, err := ec.unmarshalNInt2int(ctx, 1)
				if err != nil {
					var zeroVal string
					return zeroVal, err
				}
				max, err := ec.unmarshalNInt2int(ctx, 64)
				if err != nil {
					var zeroVal string
					return zeroVal, err
				}
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, false)
				if err != nil {
					var zeroVal string
					return zeroVal, err
				}
				if ec.directives.Length == nil {
					var zeroVal string
					return zeroVal, errors.New("directive length is not implemented")
				}
				return ec.directives.Length(ctx, obj, directive0, min, max, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Codename = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				min, err := ec.unmarshalNInt2int(ctx, 1)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				max, err := ec.unmarshalNInt2int(ctx, 1024)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				if ec.directives.Length == nil {
					var zeroVal *string
					return zeroVal, errors.New("directive length is not implemented")
				}
				return ec.directives.Length(ctx, obj, directive0, min, max, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Description = data
			} else if tmp == nil {
				it.Description = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "version":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalNString2string(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				pattern, err := ec.unmarshalNString2string(ctx, "^(\\d+(\\.\\d+){1,2})?$")
				if err != nil {
					var zeroVal string
					return zeroVal, err
				}
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, false)
				if err != nil {
					var zeroVal string
					return zeroVal, err
				}
				if ec.directives.Regex == nil {
					var zeroVal string
					return zeroVal, errors.New("directive regex is not implemented")
				}
				return ec.directives.Regex(ctx, obj, directive0, pattern, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Version = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "parentID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentID"))
			data, err := ec.unmarshalOID642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ParentID = data
		case "matchExp":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("matchExp"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				min, err := ec.unmarshalNInt2int(ctx, 1)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				max, err := ec.unmarshalNInt2int(ctx, 128)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				if ec.directives.Length == nil {
					var zeroVal *string
					return zeroVal, errors.New("directive length is not implemented")
				}
				return ec.directives.Length(ctx, obj, directive0, min, max, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.MatchExp = data
			} else if tmp == nil {
				it.MatchExp = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "typeCodename":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeCodename"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalNString2string(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				min, err := ec.unmarshalNInt2int(ctx, 1)
				if err != nil {
					var zeroVal string
					return zeroVal, err
				}
				max, err := ec.unmarshalNInt2int(ctx, 64)
				if err != nil {
					var zeroVal string
					return zeroVal, err
				}
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, false)
				if err != nil {
					var zeroVal string
					return zeroVal, err
				}
				if ec.directives.Length == nil {
					var zeroVal string
					return zeroVal, errors.New("directive length is not implemented")
				}
				return ec.directives.Length(ctx, obj, directive0, min, max, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.TypeCodename = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "makerCodename":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("makerCodename"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalNString2string(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				min, err := ec.unmarshalNInt2int(ctx, 1)
				if err != nil {
					var zeroVal string
					return zeroVal, err
				}
				max, err := ec.unmarshalNInt2int(ctx, 64)
				if err != nil {
					var zeroVal string
					return zeroVal, err
				}
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, false)
				if err != nil {
					var zeroVal string
					return zeroVal, err
				}
				if ec.directives.Length == nil {
					var zeroVal string
					return zeroVal, errors.New("directive length is not implemented")
				}
				return ec.directives.Length(ctx, obj, directive0, min, max, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.MakerCodename = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalNActiveStatus2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐActiveStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeviceModelListFilter(ctx context.Context, obj any) (models.DeviceModelListFilter, error) {
	var it models.DeviceModelListFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "parentID", "codename", "name", "typeCodename", "makerCodename", "active"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			data, err := ec.unmarshalOID642ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "parentID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentID"))
			data, err := ec.unmarshalOID642ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ParentID = data
		case "codename":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codename"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Codename = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "typeCodename":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeCodename"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeCodename = data
		case "makerCodename":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("makerCodename"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.MakerCodename = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOActiveStatus2ᚕgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐActiveStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeviceModelListOrder(ctx context.Context, obj any) (models.DeviceModelListOrder, error) {
	var it models.DeviceModelListOrder
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "codename", "name", "typeCodename", "makerCodename", "active", "createdAt", "updatedAt", "yearRelease"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "codename":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codename"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.Codename = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "typeCodename":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeCodename"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeCodename = data
		case "makerCodename":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("makerCodename"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.MakerCodename = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "yearRelease":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yearRelease"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.YearRelease = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeviceModelUpdateInput(ctx context.Context, obj any) (models.DeviceModelUpdateInput, error) {
	var it models.DeviceModelUpdateInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "codename", "description", "version", "parentID", "matchExp", "typeCodename", "makerCodename", "active"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				min, err := ec.unmarshalNInt2int(ctx, 1)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				max, err := ec.unmarshalNInt2int(ctx, 128)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				if ec.directives.Length == nil {
					var zeroVal *string
					return zeroVal, errors.New("directive length is not implemented")
				}
				return ec.directives.Length(ctx, obj, directive0, min, max, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Name = data
			} else if tmp == nil {
				it.Name = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "codename":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codename"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				min, err := ec.unmarshalNInt2int(ctx, 1)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				max, err := ec.unmarshalNInt2int(ctx, 64)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				if ec.directives.Length == nil {
					var zeroVal *string
					return zeroVal, errors.New("directive length is not implemented")
				}
				return ec.directives.Length(ctx, obj, directive0, min, max, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Codename = data
			} else if tmp == nil {
				it.Codename = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				min, err := ec.unmarshalNInt2int(ctx, 1)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				max, err := ec.unmarshalNInt2int(ctx, 1024)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				if ec.directives.Length == nil {
					var zeroVal *string
					return zeroVal, errors.New("directive length is not implemented")
				}
				return ec.directives.Length(ctx, obj, directive0, min, max, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Description = data
			} else if tmp == nil {
				it.Description = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "version":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				pattern, err := ec.unmarshalNString2string(ctx, "^(\\d+(\\.\\d+){1,2})?$")
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				if ec.directives.Regex == nil {
					var zeroVal *string
					return zeroVal, errors.New("directive regex is not implemented")
				}
				return ec.directives.Regex(ctx, obj, directive0, pattern, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Version = data
			} else if tmp == nil {
				it.Version = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "parentID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentID"))
			data, err := ec.unmarshalOID642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ParentID = data
		case "matchExp":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("matchExp"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				min, err := ec.unmarshalNInt2int(ctx, 1)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				max, err := ec.unmarshalNInt2int(ctx, 128)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				if ec.directives.Length == nil {
					var zeroVal *string
					return zeroVal, errors.New("directive length is not implemented")
				}
				return ec.directives.Length(ctx, obj, directive0, min, max, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.MatchExp = data
			} else if tmp == nil {
				it.MatchExp = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "typeCodename":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeCodename"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				min, err := ec.unmarshalNInt2int(ctx, 1)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				max, err := ec.unmarshalNInt2int(ctx, 64)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				if ec.directives.Length == nil {
					var zeroVal *string
					return zeroVal, errors.New("directive length is not implemented")
				}
				return ec.directives.Length(ctx, obj, directive0, min, max, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.TypeCodename = data
			} else if tmp == nil {
				it.TypeCodename = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "makerCodename":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("makerCodename"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				min, err := ec.unmarshalNInt2int(ctx, 1)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				max, err := ec.unmarshalNInt2int(ctx, 64)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				if ec.directives.Length == nil {
					var zeroVal *string
					return zeroVal, errors.New("directive length is not implemented")
				}
				return ec.directives.Length(ctx, obj, directive0, min, max, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.MakerCodename = data
			} else if tmp == nil {
				it.MakerCodename = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOActiveStatus2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐActiveStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDirectAccessTokenListFilter(ctx context.Context, obj any) (models1.DirectAccessTokenListFilter, error) {
	var it models1.DirectAccessTokenListFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "token", "userID", "accountID", "minExpiresAt", "maxExpiresAt"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			data, err := ec.unmarshalOID642ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "token":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Token = data
		case "userID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			data, err := ec.unmarshalOID642ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		case "accountID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountID"))
			data, err := ec.unmarshalOID642ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountID = data
		case "minExpiresAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minExpiresAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.MinExpiresAt = data
		case "maxExpiresAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxExpiresAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxExpiresAt = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDirectAccessTokenListOrder(ctx context.Context, obj any) (models1.DirectAccessTokenListOrder, error) {
	var it models1.DirectAccessTokenListOrder
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "token", "userID", "accountID", "createdAt", "expiresAt"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "token":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.Token = data
		case "userID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		case "accountID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountID"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountID = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "expiresAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiresAt"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiresAt = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputHistoryActionListFilter(ctx context.Context, obj any) (models1.HistoryActionListFilter, error) {
	var it models1.HistoryActionListFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "RequestID", "name", "userID", "accountID", "objectType", "objectID", "objectIDs"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			data, err := ec.unmarshalOUUID2ᚕgithubᚗcomᚋgoogleᚋuuidᚐUUIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "RequestID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("RequestID"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RequestID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "userID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			data, err := ec.unmarshalOID642ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		case "accountID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountID"))
			data, err := ec.unmarshalOID642ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountID = data
		case "objectType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objectType"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ObjectType = data
		case "objectID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objectID"))
			data, err := ec.unmarshalOID642ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ObjectID = data
		case "objectIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objectIDs"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ObjectIDs = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputHistoryActionListOrder(ctx context.Context, obj any) (models1.HistoryActionListOrder, error) {
	var it models1.HistoryActionListOrder
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "RequestID", "name", "userID", "accountID", "objectType", "objectID", "objectIDs", "actionAt"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "RequestID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("RequestID"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.RequestID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "userID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		case "accountID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountID"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountID = data
		case "objectType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objectType"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.ObjectType = data
		case "objectID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objectID"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.ObjectID = data
		case "objectIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objectIDs"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.ObjectIDs = data
		case "actionAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionAt"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionAt = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInviteMemberInput(ctx context.Context, obj any) (models1.InviteMemberInput, error) {
	var it models1.InviteMemberInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	if _, present := asMap["isAdmin"]; !present {
		asMap["isAdmin"] = false
	}

	fieldsInOrder := [...]string{"email", "roles", "isAdmin"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "roles":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roles"))
			data, err := ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Roles = data
		case "isAdmin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isAdmin"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsAdmin = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMemberInput(ctx context.Context, obj any) (models1.MemberInput, error) {
	var it models1.MemberInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	if _, present := asMap["isAdmin"]; !present {
		asMap["isAdmin"] = false
	}

	fieldsInOrder := [...]string{"roles", "isAdmin"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "roles":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roles"))
			data, err := ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Roles = data
		case "isAdmin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isAdmin"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsAdmin = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMemberListFilter(ctx context.Context, obj any) (models1.MemberListFilter, error) {
	var it models1.MemberListFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "status", "userID", "accountID", "isAdmin"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			data, err := ec.unmarshalOID642ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOApproveStatus2ᚕgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐApproveStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "userID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			data, err := ec.unmarshalOID642ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		case "accountID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountID"))
			data, err := ec.unmarshalOID642ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountID = data
		case "isAdmin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isAdmin"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsAdmin = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMemberListOrder(ctx context.Context, obj any) (models1.MemberListOrder, error) {
	var it models1.MemberListOrder
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "status", "userID", "accountID", "isAdmin", "createdAt", "updatedAt"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "userID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		case "accountID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountID"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountID = data
		case "isAdmin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isAdmin"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsAdmin = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOSCreateInput(ctx context.Context, obj any) (models.OSCreateInput, error) {
	var it models.OSCreateInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"parentID", "name", "version", "description", "active", "yearRelease", "yearEndSupport", "matchNameExp", "matchUserAgentExp", "matchVersionMinExp", "matchVersionMaxExp"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "parentID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentID"))
			data, err := ec.unmarshalOID642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ParentID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalNString2string(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				min, err := ec.unmarshalNInt2int(ctx, 1)
				if err != nil {
					var zeroVal string
					return zeroVal, err
				}
				max, err := ec.unmarshalNInt2int(ctx, 255)
				if err != nil {
					var zeroVal string
					return zeroVal, err
				}
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, false)
				if err != nil {
					var zeroVal string
					return zeroVal, err
				}
				if ec.directives.Length == nil {
					var zeroVal string
					return zeroVal, errors.New("directive length is not implemented")
				}
				return ec.directives.Length(ctx, obj, directive0, min, max, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Name = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "version":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				pattern, err := ec.unmarshalNString2string(ctx, "^[0-9]+\\.[0-9]+(\\.[0-9]+)?$")
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				if ec.directives.Regex == nil {
					var zeroVal *string
					return zeroVal, errors.New("directive regex is not implemented")
				}
				return ec.directives.Regex(ctx, obj, directive0, pattern, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Version = data
			} else if tmp == nil {
				it.Version = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				if ec.directives.Notempty == nil {
					var zeroVal *string
					return zeroVal, errors.New("directive notempty is not implemented")
				}
				return ec.directives.Notempty(ctx, obj, directive0, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Description = data
			} else if tmp == nil {
				it.Description = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOActiveStatus2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐActiveStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		case "yearRelease":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yearRelease"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.YearRelease = data
		case "yearEndSupport":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yearEndSupport"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.YearEndSupport = data
		case "matchNameExp":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("matchNameExp"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				if ec.directives.Notempty == nil {
					var zeroVal *string
					return zeroVal, errors.New("directive notempty is not implemented")
				}
				return ec.directives.Notempty(ctx, obj, directive0, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.MatchNameExp = data
			} else if tmp == nil {
				it.MatchNameExp = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "matchUserAgentExp":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("matchUserAgentExp"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				if ec.directives.Notempty == nil {
					var zeroVal *string
					return zeroVal, errors.New("directive notempty is not implemented")
				}
				return ec.directives.Notempty(ctx, obj, directive0, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.MatchUserAgentExp = data
			} else if tmp == nil {
				it.MatchUserAgentExp = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "matchVersionMinExp":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("matchVersionMinExp"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				if ec.directives.Notempty == nil {
					var zeroVal *string
					return zeroVal, errors.New("directive notempty is not implemented")
				}
				return ec.directives.Notempty(ctx, obj, directive0, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.MatchVersionMinExp = data
			} else if tmp == nil {
				it.MatchVersionMinExp = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "matchVersionMaxExp":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("matchVersionMaxExp"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				if ec.directives.Notempty == nil {
					var zeroVal *string
					return zeroVal, errors.New("directive notempty is not implemented")
				}
				return ec.directives.Notempty(ctx, obj, directive0, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.MatchVersionMaxExp = data
			} else if tmp == nil {
				it.MatchVersionMaxExp = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOSListFilter(ctx context.Context, obj any) (models.OSListFilter, error) {
	var it models.OSListFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "parentID", "name", "active"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			data, err := ec.unmarshalOID642ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "parentID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentID"))
			data, err := ec.unmarshalOID642ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ParentID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOActiveStatus2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐActiveStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOSListOrder(ctx context.Context, obj any) (models.OSListOrder, error) {
	var it models.OSListOrder
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "name", "active", "createdAt", "updatedAt", "yearRelease"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "yearRelease":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yearRelease"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.YearRelease = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOSUpdateInput(ctx context.Context, obj any) (models.OSUpdateInput, error) {
	var it models.OSUpdateInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "version", "description", "active", "yearRelease", "yearEndSupport", "matchNameExp", "matchUserAgentExp", "matchVersionMinExp", "matchVersionMaxExp"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				min, err := ec.unmarshalNInt2int(ctx, 1)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				max, err := ec.unmarshalNInt2int(ctx, 255)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				if ec.directives.Length == nil {
					var zeroVal *string
					return zeroVal, errors.New("directive length is not implemented")
				}
				return ec.directives.Length(ctx, obj, directive0, min, max, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Name = data
			} else if tmp == nil {
				it.Name = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "version":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				pattern, err := ec.unmarshalNString2string(ctx, "^[0-9]+\\.[0-9]+(\\.[0-9]+)?$")
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				if ec.directives.Regex == nil {
					var zeroVal *string
					return zeroVal, errors.New("directive regex is not implemented")
				}
				return ec.directives.Regex(ctx, obj, directive0, pattern, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Version = data
			} else if tmp == nil {
				it.Version = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				if ec.directives.Notempty == nil {
					var zeroVal *string
					return zeroVal, errors.New("directive notempty is not implemented")
				}
				return ec.directives.Notempty(ctx, obj, directive0, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Description = data
			} else if tmp == nil {
				it.Description = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOActiveStatus2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐActiveStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		case "yearRelease":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yearRelease"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.YearRelease = data
		case "yearEndSupport":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yearEndSupport"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.YearEndSupport = data
		case "matchNameExp":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("matchNameExp"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				if ec.directives.Notempty == nil {
					var zeroVal *string
					return zeroVal, errors.New("directive notempty is not implemented")
				}
				return ec.directives.Notempty(ctx, obj, directive0, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.MatchNameExp = data
			} else if tmp == nil {
				it.MatchNameExp = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "matchUserAgentExp":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("matchUserAgentExp"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				if ec.directives.Notempty == nil {
					var zeroVal *string
					return zeroVal, errors.New("directive notempty is not implemented")
				}
				return ec.directives.Notempty(ctx, obj, directive0, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.MatchUserAgentExp = data
			} else if tmp == nil {
				it.MatchUserAgentExp = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "matchVersionMinExp":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("matchVersionMinExp"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				if ec.directives.Notempty == nil {
					var zeroVal *string
					return zeroVal, errors.New("directive notempty is not implemented")
				}
				return ec.directives.Notempty(ctx, obj, directive0, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.MatchVersionMinExp = data
			} else if tmp == nil {
				it.MatchVersionMinExp = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "matchVersionMaxExp":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("matchVersionMaxExp"))
			directive0 := func(ctx context.Context) (any, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }

			directive1 := func(ctx context.Context) (any, error) {
				trim, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				ornil, err := ec.unmarshalNBoolean2bool(ctx, true)
				if err != nil {
					var zeroVal *string
					return zeroVal, err
				}
				if ec.directives.Notempty == nil {
					var zeroVal *string
					return zeroVal, errors.New("directive notempty is not implemented")
				}
				return ec.directives.Notempty(ctx, obj, directive0, trim, ornil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.MatchVersionMaxExp = data
			} else if tmp == nil {
				it.MatchVersionMaxExp = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOptionListFilter(ctx context.Context, obj any) (models1.OptionListFilter, error) {
	var it models1.OptionListFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"type", "targetID", "name", "namePattern"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalOOptionType2ᚕgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOptionTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "targetID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetID"))
			data, err := ec.unmarshalOID642ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "namePattern":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("namePattern"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NamePattern = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOptionListOrder(ctx context.Context, obj any) (models1.OptionListOrder, error) {
	var it models1.OptionListOrder
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"type", "targetID", "name", "value"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "targetID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetID"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "value":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.Value = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPage(ctx context.Context, obj any) (models1.Page, error) {
	var it models1.Page
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"after", "offset", "startPage", "size"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "after":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.After = data
		case "offset":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Offset = data
		case "startPage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startPage"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartPage = data
		case "size":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("size"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Size = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRBACRoleInput(ctx context.Context, obj any) (models1.RBACRoleInput, error) {
	var it models1.RBACRoleInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "title", "context", "permissions"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "context":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("context"))
			data, err := ec.unmarshalONullableJSON2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋtypesᚐNullableJSON(ctx, v)
			if err != nil {
				return it, err
			}
			it.Context = data
		case "permissions":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("permissions"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Permissions = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRBACRoleListFilter(ctx context.Context, obj any) (models1.RBACRoleListFilter, error) {
	var it models1.RBACRoleListFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			data, err := ec.unmarshalOID642ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRBACRoleListOrder(ctx context.Context, obj any) (models1.RBACRoleListOrder, error) {
	var it models1.RBACRoleListOrder
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "name", "title"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRTBSourceInput(ctx context.Context, obj any) (models.RTBSourceInput, error) {
	var it models.RTBSourceInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"accountID", "title", "description", "flags", "protocol", "minimalWeight", "URL", "method", "requestType", "headers", "RPS", "timeout", "accuracy", "priceCorrectionReduce", "auctionType", "minBid", "maxBid", "formats", "deviceTypes", "devices", "OS", "browsers", "carriers", "categories", "countries", "languages", "applications", "domains", "zones", "secure", "adBlock", "privateBrowsing", "IP", "config"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "accountID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountID"))
			data, err := ec.unmarshalOID642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountID = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "flags":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("flags"))
			data, err := ec.unmarshalONullableJSON2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋtypesᚐNullableJSON(ctx, v)
			if err != nil {
				return it, err
			}
			it.Flags = data
		case "protocol":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("protocol"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Protocol = data
		case "minimalWeight":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minimalWeight"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.MinimalWeight = data
		case "URL":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("URL"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URL = data
		case "method":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("method"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Method = data
		case "requestType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requestType"))
			data, err := ec.unmarshalORTBRequestFormatType2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐRTBRequestFormatType(ctx, v)
			if err != nil {
				return it, err
			}
			it.RequestType = data
		case "headers":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("headers"))
			data, err := ec.unmarshalONullableJSON2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋtypesᚐNullableJSON(ctx, v)
			if err != nil {
				return it, err
			}
			it.Headers = data
		case "RPS":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("RPS"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Rps = data
		case "timeout":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeout"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Timeout = data
		case "accuracy":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accuracy"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Accuracy = data
		case "priceCorrectionReduce":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceCorrectionReduce"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceCorrectionReduce = data
		case "auctionType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("auctionType"))
			data, err := ec.unmarshalOAuctionType2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐAuctionType(ctx, v)
			if err != nil {
				return it, err
			}
			it.AuctionType = data
		case "minBid":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minBid"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.MinBid = data
		case "maxBid":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxBid"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxBid = data
		case "formats":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("formats"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Formats = data
		case "deviceTypes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deviceTypes"))
			data, err := ec.unmarshalOInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeviceTypes = data
		case "devices":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("devices"))
			data, err := ec.unmarshalOInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Devices = data
		case "OS":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OS"))
			data, err := ec.unmarshalOInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Os = data
		case "browsers":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("browsers"))
			data, err := ec.unmarshalOInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Browsers = data
		case "carriers":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carriers"))
			data, err := ec.unmarshalOInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Carriers = data
		case "categories":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categories"))
			data, err := ec.unmarshalOInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Categories = data
		case "countries":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countries"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Countries = data
		case "languages":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("languages"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Languages = data
		case "applications":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("applications"))
			data, err := ec.unmarshalOInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Applications = data
		case "domains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domains"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Domains = data
		case "zones":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("zones"))
			data, err := ec.unmarshalOInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Zones = data
		case "secure":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("secure"))
			data, err := ec.unmarshalOAnyOnlyExclude2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐAnyOnlyExclude(ctx, v)
			if err != nil {
				return it, err
			}
			it.Secure = data
		case "adBlock":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adBlock"))
			data, err := ec.unmarshalOAnyOnlyExclude2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐAnyOnlyExclude(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdBlock = data
		case "privateBrowsing":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("privateBrowsing"))
			data, err := ec.unmarshalOAnyOnlyExclude2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐAnyOnlyExclude(ctx, v)
			if err != nil {
				return it, err
			}
			it.PrivateBrowsing = data
		case "IP":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("IP"))
			data, err := ec.unmarshalOAnyIPv4IPv62ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐAnyIPv4IPv6(ctx, v)
			if err != nil {
				return it, err
			}
			it.IP = data
		case "config":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("config"))
			data, err := ec.unmarshalONullableJSON2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋtypesᚐNullableJSON(ctx, v)
			if err != nil {
				return it, err
			}
			it.Config = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRTBSourceListFilter(ctx context.Context, obj any) (models.RTBSourceListFilter, error) {
	var it models.RTBSourceListFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "accountID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			data, err := ec.unmarshalOID642ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "accountID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountID"))
			data, err := ec.unmarshalOID642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRTBSourceListOrder(ctx context.Context, obj any) (models.RTBSourceListOrder, error) {
	var it models.RTBSourceListOrder
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "accountID", "title", "createdAt", "updatedAt", "deletedAt"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "accountID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountID"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountID = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "deletedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSocialAccountListFilter(ctx context.Context, obj any) (models1.SocialAccountListFilter, error) {
	var it models1.SocialAccountListFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "userID", "provider", "username", "email"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			data, err := ec.unmarshalOID642ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "userID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			data, err := ec.unmarshalOID642ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		case "provider":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provider"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Provider = data
		case "username":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Username = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSocialAccountListOrder(ctx context.Context, obj any) (models1.SocialAccountListOrder, error) {
	var it models1.SocialAccountListOrder
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "userID", "provider", "email", "username", "firstName", "lastName"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "userID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		case "provider":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provider"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.Provider = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "username":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.Username = data
		case "firstName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstName = data
		case "lastName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastName = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStatisticAdKeyCondition(ctx context.Context, obj any) (models.StatisticAdKeyCondition, error) {
	var it models.StatisticAdKeyCondition
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"key", "op", "value"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "key":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
			data, err := ec.unmarshalNStatisticKey2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐStatisticKey(ctx, v)
			if err != nil {
				return it, err
			}
			it.Key = data
		case "op":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("op"))
			data, err := ec.unmarshalNStatisticCondition2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐStatisticCondition(ctx, v)
			if err != nil {
				return it, err
			}
			it.Op = data
		case "value":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			data, err := ec.unmarshalNAny2ᚕinterfaceᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Value = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStatisticAdKeyOrder(ctx context.Context, obj any) (models.StatisticAdKeyOrder, error) {
	var it models.StatisticAdKeyOrder
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"key", "order"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "key":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
			data, err := ec.unmarshalNStatisticOrderingKey2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐStatisticOrderingKey(ctx, v)
			if err != nil {
				return it, err
			}
			it.Key = data
		case "order":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
			data, err := ec.unmarshalNOrdering2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.Order = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStatisticAdListFilter(ctx context.Context, obj any) (models.StatisticAdListFilter, error) {
	var it models.StatisticAdListFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"conditions", "startDate", "endDate"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "conditions":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conditions"))
			data, err := ec.unmarshalOStatisticAdKeyCondition2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐStatisticAdKeyConditionᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Conditions = data
		case "startDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDate"))
			data, err := ec.unmarshalODateTime2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋtypesᚐDateTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartDate = data
		case "endDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endDate"))
			data, err := ec.unmarshalODateTime2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋtypesᚐDateTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndDate = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserInput(ctx context.Context, obj any) (models1.UserInput, error) {
	var it models1.UserInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"username", "status"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "username":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Username = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOApproveStatus2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐApproveStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserListFilter(ctx context.Context, obj any) (models1.UserListFilter, error) {
	var it models1.UserListFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "accountID", "emails", "roles"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			data, err := ec.unmarshalOID642ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "accountID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountID"))
			data, err := ec.unmarshalOID642ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountID = data
		case "emails":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emails"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Emails = data
		case "roles":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roles"))
			data, err := ec.unmarshalOID642ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Roles = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserListOrder(ctx context.Context, obj any) (models1.UserListOrder, error) {
	var it models1.UserListOrder
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "email", "username", "status", "registrationDate", "country", "manager", "createdAt", "updatedAt"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "username":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.Username = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "registrationDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registrationDate"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.RegistrationDate = data
		case "country":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.Country = data
		case "manager":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("manager"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.Manager = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputZoneInput(ctx context.Context, obj any) (models.ZoneInput, error) {
	var it models.ZoneInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"accountID", "codename", "title", "description", "defaultCode", "context", "minECPM", "minECPMByGeo", "fixedPurchasePrice", "allowedFormats", "allowedTypes", "allowedSources", "disallowedSources", "campaigns"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "accountID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountID"))
			data, err := ec.unmarshalOID642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountID = data
		case "codename":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codename"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Codename = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "defaultCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("defaultCode"))
			data, err := ec.unmarshalOJSON2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋtypesᚐJSON(ctx, v)
			if err != nil {
				return it, err
			}
			it.DefaultCode = data
		case "context":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("context"))
			data, err := ec.unmarshalOJSON2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋtypesᚐJSON(ctx, v)
			if err != nil {
				return it, err
			}
			it.Context = data
		case "minECPM":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minECPM"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.MinEcpm = data
		case "minECPMByGeo":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minECPMByGeo"))
			data, err := ec.unmarshalOJSON2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋtypesᚐJSON(ctx, v)
			if err != nil {
				return it, err
			}
			it.MinECPMByGeo = data
		case "fixedPurchasePrice":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fixedPurchasePrice"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.FixedPurchasePrice = data
		case "allowedFormats":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("allowedFormats"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AllowedFormats = data
		case "allowedTypes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("allowedTypes"))
			data, err := ec.unmarshalOInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AllowedTypes = data
		case "allowedSources":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("allowedSources"))
			data, err := ec.unmarshalOInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AllowedSources = data
		case "disallowedSources":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disallowedSources"))
			data, err := ec.unmarshalOInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DisallowedSources = data
		case "campaigns":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("campaigns"))
			data, err := ec.unmarshalOInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Campaigns = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputZoneListFilter(ctx context.Context, obj any) (models.ZoneListFilter, error) {
	var it models.ZoneListFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "codename", "accountID", "status", "active", "minECPM", "maxECPM"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			data, err := ec.unmarshalOID642ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "codename":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codename"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Codename = data
		case "accountID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountID"))
			data, err := ec.unmarshalOID642ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountID = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOApproveStatus2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐApproveStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOActiveStatus2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐActiveStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		case "minECPM":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minECPM"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.MinEcpm = data
		case "maxECPM":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxECPM"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxEcpm = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputZoneListOrder(ctx context.Context, obj any) (models.ZoneListOrder, error) {
	var it models.ZoneListOrder
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "codename", "title", "accountID", "type", "status", "active", "minECPM", "createdAt", "updatedAt"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "codename":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codename"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.Codename = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "accountID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountID"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountID = data
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		case "minECPM":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minECPM"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.MinEcpm = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var accountImplementors = []string{"Account"}

func (ec *executionContext) _Account(ctx context.Context, sel ast.SelectionSet, obj *models1.Account) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accountImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Account")
		case "ID":
			out.Values[i] = ec._Account_ID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "status":
			out.Values[i] = ec._Account_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "statusMessage":
			out.Values[i] = ec._Account_statusMessage(ctx, field, obj)
		case "title":
			out.Values[i] = ec._Account_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._Account_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "logoURI":
			out.Values[i] = ec._Account_logoURI(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "policyURI":
			out.Values[i] = ec._Account_policyURI(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "termsOfServiceURI":
			out.Values[i] = ec._Account_termsOfServiceURI(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "clientURI":
			out.Values[i] = ec._Account_clientURI(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "contacts":
			out.Values[i] = ec._Account_contacts(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Account_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._Account_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var accountConnectionImplementors = []string{"AccountConnection"}

func (ec *executionContext) _AccountConnection(ctx context.Context, sel ast.SelectionSet, obj *connectors.CollectionConnection[models1.Account, models1.AccountEdge]) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accountConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccountConnection")
		case "totalCount":
			out.Values[i] = ec._AccountConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._AccountConnection_edges(ctx, field, obj)
		case "list":
			out.Values[i] = ec._AccountConnection_list(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._AccountConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var accountCreatePayloadImplementors = []string{"AccountCreatePayload"}

func (ec *executionContext) _AccountCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *models1.AccountCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accountCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccountCreatePayload")
		case "clientMutationID":
			out.Values[i] = ec._AccountCreatePayload_clientMutationID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "account":
			out.Values[i] = ec._AccountCreatePayload_account(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "owner":
			out.Values[i] = ec._AccountCreatePayload_owner(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var accountEdgeImplementors = []string{"AccountEdge"}

func (ec *executionContext) _AccountEdge(ctx context.Context, sel ast.SelectionSet, obj *models1.AccountEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accountEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccountEdge")
		case "cursor":
			out.Values[i] = ec._AccountEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "node":
			out.Values[i] = ec._AccountEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var accountPayloadImplementors = []string{"AccountPayload"}

func (ec *executionContext) _AccountPayload(ctx context.Context, sel ast.SelectionSet, obj *models1.AccountPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accountPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccountPayload")
		case "clientMutationID":
			out.Values[i] = ec._AccountPayload_clientMutationID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "accountID":
			out.Values[i] = ec._AccountPayload_accountID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "account":
			out.Values[i] = ec._AccountPayload_account(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var adFormatImplementors = []string{"AdFormat"}

func (ec *executionContext) _AdFormat(ctx context.Context, sel ast.SelectionSet, obj *models.AdFormat) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adFormatImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AdFormat")
		case "ID":
			out.Values[i] = ec._AdFormat_ID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "codename":
			out.Values[i] = ec._AdFormat_codename(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec._AdFormat_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._AdFormat_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._AdFormat_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "active":
			out.Values[i] = ec._AdFormat_active(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "width":
			out.Values[i] = ec._AdFormat_width(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "height":
			out.Values[i] = ec._AdFormat_height(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "minWidth":
			out.Values[i] = ec._AdFormat_minWidth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "minHeight":
			out.Values[i] = ec._AdFormat_minHeight(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "config":
			out.Values[i] = ec._AdFormat_config(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._AdFormat_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._AdFormat_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._AdFormat_deletedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var adFormatConnectionImplementors = []string{"AdFormatConnection"}

func (ec *executionContext) _AdFormatConnection(ctx context.Context, sel ast.SelectionSet, obj *connectors.CollectionConnection[models.AdFormat, models.AdFormatEdge]) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adFormatConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AdFormatConnection")
		case "totalCount":
			out.Values[i] = ec._AdFormatConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._AdFormatConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "list":
			out.Values[i] = ec._AdFormatConnection_list(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._AdFormatConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var adFormatEdgeImplementors = []string{"AdFormatEdge"}

func (ec *executionContext) _AdFormatEdge(ctx context.Context, sel ast.SelectionSet, obj *models.AdFormatEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adFormatEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AdFormatEdge")
		case "cursor":
			out.Values[i] = ec._AdFormatEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "node":
			out.Values[i] = ec._AdFormatEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var adFormatPayloadImplementors = []string{"AdFormatPayload"}

func (ec *executionContext) _AdFormatPayload(ctx context.Context, sel ast.SelectionSet, obj *models.AdFormatPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adFormatPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AdFormatPayload")
		case "clientMutationID":
			out.Values[i] = ec._AdFormatPayload_clientMutationID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "formatID":
			out.Values[i] = ec._AdFormatPayload_formatID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "format":
			out.Values[i] = ec._AdFormatPayload_format(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var applicationImplementors = []string{"Application"}

func (ec *executionContext) _Application(ctx context.Context, sel ast.SelectionSet, obj *models.Application) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, applicationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Application")
		case "ID":
			out.Values[i] = ec._Application_ID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "accountID":
			out.Values[i] = ec._Application_accountID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "creatorID":
			out.Values[i] = ec._Application_creatorID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._Application_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._Application_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "URI":
			out.Values[i] = ec._Application_URI(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec._Application_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "platform":
			out.Values[i] = ec._Application_platform(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "premium":
			out.Values[i] = ec._Application_premium(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "status":
			out.Values[i] = ec._Application_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "active":
			out.Values[i] = ec._Application_active(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "private":
			out.Values[i] = ec._Application_private(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "categories":
			out.Values[i] = ec._Application_categories(ctx, field, obj)
		case "revenueShare":
			out.Values[i] = ec._Application_revenueShare(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Application_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._Application_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._Application_deletedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var applicationConnectionImplementors = []string{"ApplicationConnection"}

func (ec *executionContext) _ApplicationConnection(ctx context.Context, sel ast.SelectionSet, obj *connectors.CollectionConnection[models.Application, models.ApplicationEdge]) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, applicationConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApplicationConnection")
		case "totalCount":
			out.Values[i] = ec._ApplicationConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._ApplicationConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "list":
			out.Values[i] = ec._ApplicationConnection_list(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._ApplicationConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var applicationEdgeImplementors = []string{"ApplicationEdge"}

func (ec *executionContext) _ApplicationEdge(ctx context.Context, sel ast.SelectionSet, obj *models.ApplicationEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, applicationEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApplicationEdge")
		case "cursor":
			out.Values[i] = ec._ApplicationEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "node":
			out.Values[i] = ec._ApplicationEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var applicationPayloadImplementors = []string{"ApplicationPayload"}

func (ec *executionContext) _ApplicationPayload(ctx context.Context, sel ast.SelectionSet, obj *models.ApplicationPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, applicationPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApplicationPayload")
		case "clientMutationID":
			out.Values[i] = ec._ApplicationPayload_clientMutationID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "applicationID":
			out.Values[i] = ec._ApplicationPayload_applicationID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "application":
			out.Values[i] = ec._ApplicationPayload_application(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var authClientImplementors = []string{"AuthClient"}

func (ec *executionContext) _AuthClient(ctx context.Context, sel ast.SelectionSet, obj *models1.AuthClient) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authClientImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthClient")
		case "ID":
			out.Values[i] = ec._AuthClient_ID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "accountID":
			out.Values[i] = ec._AuthClient_accountID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userID":
			out.Values[i] = ec._AuthClient_userID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._AuthClient_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "secret":
			out.Values[i] = ec._AuthClient_secret(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "redirectURIs":
			out.Values[i] = ec._AuthClient_redirectURIs(ctx, field, obj)
		case "grantTypes":
			out.Values[i] = ec._AuthClient_grantTypes(ctx, field, obj)
		case "responseTypes":
			out.Values[i] = ec._AuthClient_responseTypes(ctx, field, obj)
		case "scope":
			out.Values[i] = ec._AuthClient_scope(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "audience":
			out.Values[i] = ec._AuthClient_audience(ctx, field, obj)
		case "subjectType":
			out.Values[i] = ec._AuthClient_subjectType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "allowedCORSOrigins":
			out.Values[i] = ec._AuthClient_allowedCORSOrigins(ctx, field, obj)
		case "public":
			out.Values[i] = ec._AuthClient_public(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "expiresAt":
			out.Values[i] = ec._AuthClient_expiresAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._AuthClient_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._AuthClient_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._AuthClient_deletedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var authClientConnectionImplementors = []string{"AuthClientConnection"}

func (ec *executionContext) _AuthClientConnection(ctx context.Context, sel ast.SelectionSet, obj *connectors.CollectionConnection[models1.AuthClient, models1.AuthClientEdge]) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authClientConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthClientConnection")
		case "totalCount":
			out.Values[i] = ec._AuthClientConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._AuthClientConnection_edges(ctx, field, obj)
		case "list":
			out.Values[i] = ec._AuthClientConnection_list(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._AuthClientConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var authClientEdgeImplementors = []string{"AuthClientEdge"}

func (ec *executionContext) _AuthClientEdge(ctx context.Context, sel ast.SelectionSet, obj *models1.AuthClientEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authClientEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthClientEdge")
		case "cursor":
			out.Values[i] = ec._AuthClientEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "node":
			out.Values[i] = ec._AuthClientEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var authClientPayloadImplementors = []string{"AuthClientPayload"}

func (ec *executionContext) _AuthClientPayload(ctx context.Context, sel ast.SelectionSet, obj *models1.AuthClientPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authClientPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthClientPayload")
		case "clientMutationID":
			out.Values[i] = ec._AuthClientPayload_clientMutationID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "authClientID":
			out.Values[i] = ec._AuthClientPayload_authClientID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "authClient":
			out.Values[i] = ec._AuthClientPayload_authClient(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var browserImplementors = []string{"Browser"}

func (ec *executionContext) _Browser(ctx context.Context, sel ast.SelectionSet, obj *models.Browser) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, browserImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Browser")
		case "ID":
			out.Values[i] = ec._Browser_ID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Browser_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._Browser_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "version":
			out.Values[i] = ec._Browser_version(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "yearRelease":
			out.Values[i] = ec._Browser_yearRelease(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "yearEndSupport":
			out.Values[i] = ec._Browser_yearEndSupport(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "active":
			out.Values[i] = ec._Browser_active(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "matchNameExp":
			out.Values[i] = ec._Browser_matchNameExp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "matchUserAgentExp":
			out.Values[i] = ec._Browser_matchUserAgentExp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "matchVersionMinExp":
			out.Values[i] = ec._Browser_matchVersionMinExp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "matchVersionMaxExp":
			out.Values[i] = ec._Browser_matchVersionMaxExp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "parentID":
			out.Values[i] = ec._Browser_parentID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "parent":
			out.Values[i] = ec._Browser_parent(ctx, field, obj)
		case "versions":
			out.Values[i] = ec._Browser_versions(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Browser_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._Browser_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._Browser_deletedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var browserConnectionImplementors = []string{"BrowserConnection"}

func (ec *executionContext) _BrowserConnection(ctx context.Context, sel ast.SelectionSet, obj *connectors.CollectionConnection[models.Browser, models.BrowserEdge]) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, browserConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BrowserConnection")
		case "totalCount":
			out.Values[i] = ec._BrowserConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._BrowserConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "list":
			out.Values[i] = ec._BrowserConnection_list(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._BrowserConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var browserEdgeImplementors = []string{"BrowserEdge"}

func (ec *executionContext) _BrowserEdge(ctx context.Context, sel ast.SelectionSet, obj *models.BrowserEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, browserEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BrowserEdge")
		case "cursor":
			out.Values[i] = ec._BrowserEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "node":
			out.Values[i] = ec._BrowserEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var browserPayloadImplementors = []string{"BrowserPayload"}

func (ec *executionContext) _BrowserPayload(ctx context.Context, sel ast.SelectionSet, obj *models.BrowserPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, browserPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BrowserPayload")
		case "clientMutationID":
			out.Values[i] = ec._BrowserPayload_clientMutationID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "browserID":
			out.Values[i] = ec._BrowserPayload_browserID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "browser":
			out.Values[i] = ec._BrowserPayload_browser(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var categoryImplementors = []string{"Category"}

func (ec *executionContext) _Category(ctx context.Context, sel ast.SelectionSet, obj *models.Category) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, categoryImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Category")
		case "ID":
			out.Values[i] = ec._Category_ID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._Category_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "description":
			out.Values[i] = ec._Category_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "IABCode":
			out.Values[i] = ec._Category_IABCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "parentID":
			out.Values[i] = ec._Category_parentID(ctx, field, obj)
		case "parent":
			out.Values[i] = ec._Category_parent(ctx, field, obj)
		case "childrens":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Category_childrens(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "position":
			out.Values[i] = ec._Category_position(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "active":
			out.Values[i] = ec._Category_active(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Category_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Category_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "deletedAt":
			out.Values[i] = ec._Category_deletedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var categoryConnectionImplementors = []string{"CategoryConnection"}

func (ec *executionContext) _CategoryConnection(ctx context.Context, sel ast.SelectionSet, obj *connectors.CollectionConnection[models.Category, models.CategoryEdge]) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, categoryConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CategoryConnection")
		case "totalCount":
			out.Values[i] = ec._CategoryConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._CategoryConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "list":
			out.Values[i] = ec._CategoryConnection_list(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._CategoryConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var categoryEdgeImplementors = []string{"CategoryEdge"}

func (ec *executionContext) _CategoryEdge(ctx context.Context, sel ast.SelectionSet, obj *models.CategoryEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, categoryEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CategoryEdge")
		case "cursor":
			out.Values[i] = ec._CategoryEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "node":
			out.Values[i] = ec._CategoryEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var categoryPayloadImplementors = []string{"CategoryPayload"}

func (ec *executionContext) _CategoryPayload(ctx context.Context, sel ast.SelectionSet, obj *models.CategoryPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, categoryPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CategoryPayload")
		case "clientMutationID":
			out.Values[i] = ec._CategoryPayload_clientMutationID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "categoryID":
			out.Values[i] = ec._CategoryPayload_categoryID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "category":
			out.Values[i] = ec._CategoryPayload_category(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var continentImplementors = []string{"Continent"}

func (ec *executionContext) _Continent(ctx context.Context, sel ast.SelectionSet, obj *models.Continent) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, continentImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Continent")
		case "ID":
			out.Values[i] = ec._Continent_ID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "code2":
			out.Values[i] = ec._Continent_code2(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Continent_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "countries":
			out.Values[i] = ec._Continent_countries(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var coordinatesImplementors = []string{"Coordinates"}

func (ec *executionContext) _Coordinates(ctx context.Context, sel ast.SelectionSet, obj *models.Coordinates) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, coordinatesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Coordinates")
		case "lat":
			out.Values[i] = ec._Coordinates_lat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lon":
			out.Values[i] = ec._Coordinates_lon(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var countryImplementors = []string{"Country"}

func (ec *executionContext) _Country(ctx context.Context, sel ast.SelectionSet, obj *models.Country) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, countryImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Country")
		case "ID":
			out.Values[i] = ec._Country_ID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "code2":
			out.Values[i] = ec._Country_code2(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "code3":
			out.Values[i] = ec._Country_code3(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Country_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nativeName":
			out.Values[i] = ec._Country_nativeName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "continentCode":
			out.Values[i] = ec._Country_continentCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "continent":
			out.Values[i] = ec._Country_continent(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "capital":
			out.Values[i] = ec._Country_capital(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "languages":
			out.Values[i] = ec._Country_languages(ctx, field, obj)
		case "phoneCodes":
			out.Values[i] = ec._Country_phoneCodes(ctx, field, obj)
		case "timeZones":
			out.Values[i] = ec._Country_timeZones(ctx, field, obj)
		case "coordinates":
			out.Values[i] = ec._Country_coordinates(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "currency":
			out.Values[i] = ec._Country_currency(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deviceMakerImplementors = []string{"DeviceMaker"}

func (ec *executionContext) _DeviceMaker(ctx context.Context, sel ast.SelectionSet, obj *models.DeviceMaker) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deviceMakerImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeviceMaker")
		case "ID":
			out.Values[i] = ec._DeviceMaker_ID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "codename":
			out.Values[i] = ec._DeviceMaker_codename(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._DeviceMaker_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._DeviceMaker_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "matchExp":
			out.Values[i] = ec._DeviceMaker_matchExp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "models":
			out.Values[i] = ec._DeviceMaker_models(ctx, field, obj)
		case "active":
			out.Values[i] = ec._DeviceMaker_active(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._DeviceMaker_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._DeviceMaker_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._DeviceMaker_deletedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deviceMakerConnectionImplementors = []string{"DeviceMakerConnection"}

func (ec *executionContext) _DeviceMakerConnection(ctx context.Context, sel ast.SelectionSet, obj *connectors.CollectionConnection[models.DeviceMaker, models.DeviceMakerEdge]) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deviceMakerConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeviceMakerConnection")
		case "totalCount":
			out.Values[i] = ec._DeviceMakerConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._DeviceMakerConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "list":
			out.Values[i] = ec._DeviceMakerConnection_list(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._DeviceMakerConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deviceMakerEdgeImplementors = []string{"DeviceMakerEdge"}

func (ec *executionContext) _DeviceMakerEdge(ctx context.Context, sel ast.SelectionSet, obj *models.DeviceMakerEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deviceMakerEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeviceMakerEdge")
		case "cursor":
			out.Values[i] = ec._DeviceMakerEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "node":
			out.Values[i] = ec._DeviceMakerEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deviceMakerPayloadImplementors = []string{"DeviceMakerPayload"}

func (ec *executionContext) _DeviceMakerPayload(ctx context.Context, sel ast.SelectionSet, obj *models.DeviceMakerPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deviceMakerPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeviceMakerPayload")
		case "clientMutationID":
			out.Values[i] = ec._DeviceMakerPayload_clientMutationID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "makerID":
			out.Values[i] = ec._DeviceMakerPayload_makerID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "maker":
			out.Values[i] = ec._DeviceMakerPayload_maker(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deviceModelImplementors = []string{"DeviceModel"}

func (ec *executionContext) _DeviceModel(ctx context.Context, sel ast.SelectionSet, obj *models.DeviceModel) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deviceModelImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeviceModel")
		case "ID":
			out.Values[i] = ec._DeviceModel_ID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "codename":
			out.Values[i] = ec._DeviceModel_codename(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._DeviceModel_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "description":
			out.Values[i] = ec._DeviceModel_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "version":
			out.Values[i] = ec._DeviceModel_version(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "yearRelease":
			out.Values[i] = ec._DeviceModel_yearRelease(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "parentID":
			out.Values[i] = ec._DeviceModel_parentID(ctx, field, obj)
		case "parent":
			out.Values[i] = ec._DeviceModel_parent(ctx, field, obj)
		case "matchExp":
			out.Values[i] = ec._DeviceModel_matchExp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "typeCodename":
			out.Values[i] = ec._DeviceModel_typeCodename(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "type":
			out.Values[i] = ec._DeviceModel_type(ctx, field, obj)
		case "makerCodename":
			out.Values[i] = ec._DeviceModel_makerCodename(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "maker":
			out.Values[i] = ec._DeviceModel_maker(ctx, field, obj)
		case "versions":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._DeviceModel_versions(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "active":
			out.Values[i] = ec._DeviceModel_active(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._DeviceModel_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._DeviceModel_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "deletedAt":
			out.Values[i] = ec._DeviceModel_deletedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deviceModelConnectionImplementors = []string{"DeviceModelConnection"}

func (ec *executionContext) _DeviceModelConnection(ctx context.Context, sel ast.SelectionSet, obj *connectors.CollectionConnection[models.DeviceModel, models.DeviceModelEdge]) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deviceModelConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeviceModelConnection")
		case "totalCount":
			out.Values[i] = ec._DeviceModelConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._DeviceModelConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "list":
			out.Values[i] = ec._DeviceModelConnection_list(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._DeviceModelConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deviceModelEdgeImplementors = []string{"DeviceModelEdge"}

func (ec *executionContext) _DeviceModelEdge(ctx context.Context, sel ast.SelectionSet, obj *models.DeviceModelEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deviceModelEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeviceModelEdge")
		case "cursor":
			out.Values[i] = ec._DeviceModelEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "node":
			out.Values[i] = ec._DeviceModelEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deviceModelPayloadImplementors = []string{"DeviceModelPayload"}

func (ec *executionContext) _DeviceModelPayload(ctx context.Context, sel ast.SelectionSet, obj *models.DeviceModelPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deviceModelPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeviceModelPayload")
		case "clientMutationID":
			out.Values[i] = ec._DeviceModelPayload_clientMutationID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "modelID":
			out.Values[i] = ec._DeviceModelPayload_modelID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "model":
			out.Values[i] = ec._DeviceModelPayload_model(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deviceTypeImplementors = []string{"DeviceType"}

func (ec *executionContext) _DeviceType(ctx context.Context, sel ast.SelectionSet, obj *models.DeviceType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deviceTypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeviceType")
		case "ID":
			out.Values[i] = ec._DeviceType_ID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._DeviceType_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "codename":
			out.Values[i] = ec._DeviceType_codename(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._DeviceType_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "active":
			out.Values[i] = ec._DeviceType_active(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var directAccessTokenImplementors = []string{"DirectAccessToken"}

func (ec *executionContext) _DirectAccessToken(ctx context.Context, sel ast.SelectionSet, obj *models1.DirectAccessToken) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, directAccessTokenImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DirectAccessToken")
		case "ID":
			out.Values[i] = ec._DirectAccessToken_ID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "token":
			out.Values[i] = ec._DirectAccessToken_token(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._DirectAccessToken_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userID":
			out.Values[i] = ec._DirectAccessToken_userID(ctx, field, obj)
		case "accountID":
			out.Values[i] = ec._DirectAccessToken_accountID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._DirectAccessToken_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "expiresAt":
			out.Values[i] = ec._DirectAccessToken_expiresAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var directAccessTokenConnectionImplementors = []string{"DirectAccessTokenConnection"}

func (ec *executionContext) _DirectAccessTokenConnection(ctx context.Context, sel ast.SelectionSet, obj *connectors.CollectionConnection[models1.DirectAccessToken, models1.DirectAccessTokenEdge]) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, directAccessTokenConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DirectAccessTokenConnection")
		case "totalCount":
			out.Values[i] = ec._DirectAccessTokenConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._DirectAccessTokenConnection_edges(ctx, field, obj)
		case "list":
			out.Values[i] = ec._DirectAccessTokenConnection_list(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._DirectAccessTokenConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var directAccessTokenEdgeImplementors = []string{"DirectAccessTokenEdge"}

func (ec *executionContext) _DirectAccessTokenEdge(ctx context.Context, sel ast.SelectionSet, obj *models1.DirectAccessTokenEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, directAccessTokenEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DirectAccessTokenEdge")
		case "cursor":
			out.Values[i] = ec._DirectAccessTokenEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "node":
			out.Values[i] = ec._DirectAccessTokenEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var directAccessTokenPayloadImplementors = []string{"DirectAccessTokenPayload"}

func (ec *executionContext) _DirectAccessTokenPayload(ctx context.Context, sel ast.SelectionSet, obj *models1.DirectAccessTokenPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, directAccessTokenPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DirectAccessTokenPayload")
		case "clientMutationID":
			out.Values[i] = ec._DirectAccessTokenPayload_clientMutationID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "token":
			out.Values[i] = ec._DirectAccessTokenPayload_token(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var historyActionImplementors = []string{"HistoryAction"}

func (ec *executionContext) _HistoryAction(ctx context.Context, sel ast.SelectionSet, obj *models1.HistoryAction) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, historyActionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HistoryAction")
		case "ID":
			out.Values[i] = ec._HistoryAction_ID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "RequestID":
			out.Values[i] = ec._HistoryAction_RequestID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._HistoryAction_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._HistoryAction_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userID":
			out.Values[i] = ec._HistoryAction_userID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "accountID":
			out.Values[i] = ec._HistoryAction_accountID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "objectType":
			out.Values[i] = ec._HistoryAction_objectType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "objectID":
			out.Values[i] = ec._HistoryAction_objectID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "objectIDs":
			out.Values[i] = ec._HistoryAction_objectIDs(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._HistoryAction_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "actionAt":
			out.Values[i] = ec._HistoryAction_actionAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var historyActionConnectionImplementors = []string{"HistoryActionConnection"}

func (ec *executionContext) _HistoryActionConnection(ctx context.Context, sel ast.SelectionSet, obj *connectors.CollectionConnection[models1.HistoryAction, models1.HistoryActionEdge]) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, historyActionConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HistoryActionConnection")
		case "totalCount":
			out.Values[i] = ec._HistoryActionConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._HistoryActionConnection_edges(ctx, field, obj)
		case "list":
			out.Values[i] = ec._HistoryActionConnection_list(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._HistoryActionConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var historyActionEdgeImplementors = []string{"HistoryActionEdge"}

func (ec *executionContext) _HistoryActionEdge(ctx context.Context, sel ast.SelectionSet, obj *models1.HistoryActionEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, historyActionEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HistoryActionEdge")
		case "node":
			out.Values[i] = ec._HistoryActionEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cursor":
			out.Values[i] = ec._HistoryActionEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var historyActionPayloadImplementors = []string{"HistoryActionPayload"}

func (ec *executionContext) _HistoryActionPayload(ctx context.Context, sel ast.SelectionSet, obj *models1.HistoryActionPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, historyActionPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HistoryActionPayload")
		case "clientMutationId":
			out.Values[i] = ec._HistoryActionPayload_clientMutationId(ctx, field, obj)
		case "actionID":
			out.Values[i] = ec._HistoryActionPayload_actionID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "action":
			out.Values[i] = ec._HistoryActionPayload_action(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var memberImplementors = []string{"Member"}

func (ec *executionContext) _Member(ctx context.Context, sel ast.SelectionSet, obj *models1.Member) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, memberImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Member")
		case "ID":
			out.Values[i] = ec._Member_ID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "status":
			out.Values[i] = ec._Member_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "user":
			out.Values[i] = ec._Member_user(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "account":
			out.Values[i] = ec._Member_account(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isAdmin":
			out.Values[i] = ec._Member_isAdmin(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "roles":
			out.Values[i] = ec._Member_roles(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Member_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._Member_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._Member_deletedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var memberConnectionImplementors = []string{"MemberConnection"}

func (ec *executionContext) _MemberConnection(ctx context.Context, sel ast.SelectionSet, obj *connectors.CollectionConnection[models1.Member, models1.MemberEdge]) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, memberConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MemberConnection")
		case "totalCount":
			out.Values[i] = ec._MemberConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._MemberConnection_edges(ctx, field, obj)
		case "list":
			out.Values[i] = ec._MemberConnection_list(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._MemberConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var memberEdgeImplementors = []string{"MemberEdge"}

func (ec *executionContext) _MemberEdge(ctx context.Context, sel ast.SelectionSet, obj *models1.MemberEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, memberEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MemberEdge")
		case "cursor":
			out.Values[i] = ec._MemberEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "node":
			out.Values[i] = ec._MemberEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var memberPayloadImplementors = []string{"MemberPayload"}

func (ec *executionContext) _MemberPayload(ctx context.Context, sel ast.SelectionSet, obj *models1.MemberPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, memberPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MemberPayload")
		case "clientMutationID":
			out.Values[i] = ec._MemberPayload_clientMutationID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "memberID":
			out.Values[i] = ec._MemberPayload_memberID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "member":
			out.Values[i] = ec._MemberPayload_member(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "poke":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_poke(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "login":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_login(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "logout":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_logout(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "switchAccount":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_switchAccount(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "registerAccount":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_registerAccount(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateAccount":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateAccount(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "approveAccount":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_approveAccount(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "rejectAccount":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_rejectAccount(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "inviteAccountMember":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_inviteAccountMember(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateAccountMember":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateAccountMember(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "removeAccountMember":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_removeAccountMember(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "approveAccountMember":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_approveAccountMember(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "rejectAccountMember":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_rejectAccountMember(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "disconnectSocialAccount":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_disconnectSocialAccount(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createUser":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createUser(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateUser":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateUser(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "approveUser":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_approveUser(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "rejectUser":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_rejectUser(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "resetUserPassword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_resetUserPassword(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateUserPassword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateUserPassword(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createAuthClient":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createAuthClient(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateAuthClient":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateAuthClient(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteAuthClient":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteAuthClient(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "generateDirectAccessToken":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_generateDirectAccessToken(ctx, field)
			})
		case "revokeDirectAccessToken":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_revokeDirectAccessToken(ctx, field)
			})
		case "setOption":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_setOption(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createRole":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createRole(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateRole":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateRole(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteRole":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteRole(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createFormat":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createFormat(ctx, field)
			})
		case "updateFormat":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateFormat(ctx, field)
			})
		case "deleteFormat":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteFormat(ctx, field)
			})
		case "createApplication":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createApplication(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateApplication":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateApplication(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteApplication":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteApplication(ctx, field)
			})
		case "runApplication":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_runApplication(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pauseApplication":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_pauseApplication(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "approveApplication":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_approveApplication(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "rejectApplication":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_rejectApplication(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createBrowser":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createBrowser(ctx, field)
			})
		case "updateBrowser":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateBrowser(ctx, field)
			})
		case "deleteBrowser":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteBrowser(ctx, field)
			})
		case "createCategory":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createCategory(ctx, field)
			})
		case "updateCategory":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateCategory(ctx, field)
			})
		case "deleteCategory":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteCategory(ctx, field)
			})
		case "createDeviceMaker":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createDeviceMaker(ctx, field)
			})
		case "updateDeviceMaker":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateDeviceMaker(ctx, field)
			})
		case "deleteDeviceMaker":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteDeviceMaker(ctx, field)
			})
		case "createDeviceModel":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createDeviceModel(ctx, field)
			})
		case "updateDeviceModel":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateDeviceModel(ctx, field)
			})
		case "deleteDeviceModel":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteDeviceModel(ctx, field)
			})
		case "createOS":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createOS(ctx, field)
			})
		case "updateOS":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateOS(ctx, field)
			})
		case "deleteOS":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteOS(ctx, field)
			})
		case "createRTBSource":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createRTBSource(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateRTBSource":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateRTBSource(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteRTBSource":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteRTBSource(ctx, field)
			})
		case "runRTBSource":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_runRTBSource(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pauseRTBSource":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_pauseRTBSource(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "approveRTBSource":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_approveRTBSource(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "rejectRTBSource":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_rejectRTBSource(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createZone":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createZone(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateZone":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateZone(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteZone":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteZone(ctx, field)
			})
		case "activateZone":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_activateZone(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deactivateZone":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deactivateZone(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "approveZone":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_approveZone(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "rejectZone":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_rejectZone(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var oSImplementors = []string{"OS"}

func (ec *executionContext) _OS(ctx context.Context, sel ast.SelectionSet, obj *models.Os) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, oSImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OS")
		case "ID":
			out.Values[i] = ec._OS_ID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._OS_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "description":
			out.Values[i] = ec._OS_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "version":
			out.Values[i] = ec._OS_version(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "yearRelease":
			out.Values[i] = ec._OS_yearRelease(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "yearEndSupport":
			out.Values[i] = ec._OS_yearEndSupport(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "active":
			out.Values[i] = ec._OS_active(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "matchNameExp":
			out.Values[i] = ec._OS_matchNameExp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "matchUserAgentExp":
			out.Values[i] = ec._OS_matchUserAgentExp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "matchVersionMinExp":
			out.Values[i] = ec._OS_matchVersionMinExp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "matchVersionMaxExp":
			out.Values[i] = ec._OS_matchVersionMaxExp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "parentID":
			out.Values[i] = ec._OS_parentID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "parent":
			out.Values[i] = ec._OS_parent(ctx, field, obj)
		case "versions":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OS_versions(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "createdAt":
			out.Values[i] = ec._OS_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._OS_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "deletedAt":
			out.Values[i] = ec._OS_deletedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var oSConnectionImplementors = []string{"OSConnection"}

func (ec *executionContext) _OSConnection(ctx context.Context, sel ast.SelectionSet, obj *connectors.CollectionConnection[models.Os, models.OSEdge]) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, oSConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OSConnection")
		case "totalCount":
			out.Values[i] = ec._OSConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._OSConnection_edges(ctx, field, obj)
		case "list":
			out.Values[i] = ec._OSConnection_list(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._OSConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var oSEdgeImplementors = []string{"OSEdge"}

func (ec *executionContext) _OSEdge(ctx context.Context, sel ast.SelectionSet, obj *models.OSEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, oSEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OSEdge")
		case "cursor":
			out.Values[i] = ec._OSEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "node":
			out.Values[i] = ec._OSEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var oSPayloadImplementors = []string{"OSPayload"}

func (ec *executionContext) _OSPayload(ctx context.Context, sel ast.SelectionSet, obj *models.OSPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, oSPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OSPayload")
		case "clientMutationID":
			out.Values[i] = ec._OSPayload_clientMutationID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "OSID":
			out.Values[i] = ec._OSPayload_OSID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "OS":
			out.Values[i] = ec._OSPayload_OS(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var optionImplementors = []string{"Option"}

func (ec *executionContext) _Option(ctx context.Context, sel ast.SelectionSet, obj *models1.Option) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, optionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Option")
		case "type":
			out.Values[i] = ec._Option_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "targetID":
			out.Values[i] = ec._Option_targetID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Option_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec._Option_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var optionConnectionImplementors = []string{"OptionConnection"}

func (ec *executionContext) _OptionConnection(ctx context.Context, sel ast.SelectionSet, obj *connectors.CollectionConnection[models1.Option, models1.OptionEdge]) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, optionConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OptionConnection")
		case "totalCount":
			out.Values[i] = ec._OptionConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._OptionConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "list":
			out.Values[i] = ec._OptionConnection_list(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._OptionConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var optionEdgeImplementors = []string{"OptionEdge"}

func (ec *executionContext) _OptionEdge(ctx context.Context, sel ast.SelectionSet, obj *models1.OptionEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, optionEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OptionEdge")
		case "cursor":
			out.Values[i] = ec._OptionEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "node":
			out.Values[i] = ec._OptionEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var optionPayloadImplementors = []string{"OptionPayload"}

func (ec *executionContext) _OptionPayload(ctx context.Context, sel ast.SelectionSet, obj *models1.OptionPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, optionPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OptionPayload")
		case "clientMutationId":
			out.Values[i] = ec._OptionPayload_clientMutationId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._OptionPayload_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "option":
			out.Values[i] = ec._OptionPayload_option(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var pageInfoImplementors = []string{"PageInfo"}

func (ec *executionContext) _PageInfo(ctx context.Context, sel ast.SelectionSet, obj *models1.PageInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pageInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PageInfo")
		case "startCursor":
			out.Values[i] = ec._PageInfo_startCursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "endCursor":
			out.Values[i] = ec._PageInfo_endCursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hasPreviousPage":
			out.Values[i] = ec._PageInfo_hasPreviousPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hasNextPage":
			out.Values[i] = ec._PageInfo_hasNextPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total":
			out.Values[i] = ec._PageInfo_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "page":
			out.Values[i] = ec._PageInfo_page(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "count":
			out.Values[i] = ec._PageInfo_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var profileImplementors = []string{"Profile"}

func (ec *executionContext) _Profile(ctx context.Context, sel ast.SelectionSet, obj *models1.Profile) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, profileImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Profile")
		case "ID":
			out.Values[i] = ec._Profile_ID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "user":
			out.Values[i] = ec._Profile_user(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "firstName":
			out.Values[i] = ec._Profile_firstName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lastName":
			out.Values[i] = ec._Profile_lastName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "companyName":
			out.Values[i] = ec._Profile_companyName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "about":
			out.Values[i] = ec._Profile_about(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "email":
			out.Values[i] = ec._Profile_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "messgangers":
			out.Values[i] = ec._Profile_messgangers(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Profile_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._Profile_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var profileMessangerImplementors = []string{"ProfileMessanger"}

func (ec *executionContext) _ProfileMessanger(ctx context.Context, sel ast.SelectionSet, obj *models1.ProfileMessanger) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, profileMessangerImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProfileMessanger")
		case "mtype":
			out.Values[i] = ec._ProfileMessanger_mtype(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "address":
			out.Values[i] = ec._ProfileMessanger_address(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "serviceVersion":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_serviceVersion(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "currentSession":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_currentSession(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "currentAccount":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_currentAccount(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "account":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_account(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listAccounts":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listAccounts(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listAccountRolesAndPermissions":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listAccountRolesAndPermissions(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listMembers":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listMembers(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "socialAccount":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_socialAccount(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "currentSocialAccounts":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_currentSocialAccounts(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listSocialAccounts":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listSocialAccounts(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "currentUser":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_currentUser(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "user":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_user(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listUsers":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listUsers(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "authClient":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_authClient(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listAuthClients":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listAuthClients(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getDirectAccessToken":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getDirectAccessToken(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listDirectAccessTokens":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listDirectAccessTokens(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listHistory":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listHistory(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "option":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_option(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listOptions":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listOptions(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "role":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_role(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "checkPermission":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_checkPermission(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listRoles":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listRoles(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listPermissions":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listPermissions(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listMyPermissions":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listMyPermissions(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "format":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_format(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listFormats":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listFormats(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "application":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_application(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listApplications":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listApplications(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "browser":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_browser(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listBrowsers":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listBrowsers(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "category":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_category(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listCategories":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listCategories(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "continents":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_continents(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "countries":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_countries(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "deviceMaker":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_deviceMaker(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listDeviceMakers":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listDeviceMakers(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "deviceModel":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_deviceModel(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listDeviceModels":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listDeviceModels(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listDeviceTypes":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listDeviceTypes(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "OS":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_OS(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listOS":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listOS(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "RTBSource":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_RTBSource(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listRTBSources":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listRTBSources(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "statisticAdList":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_statisticAdList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "zone":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_zone(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listZones":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listZones(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "__type":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})
		case "__schema":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var rBACPermissionImplementors = []string{"RBACPermission"}

func (ec *executionContext) _RBACPermission(ctx context.Context, sel ast.SelectionSet, obj *models1.RBACPermission) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rBACPermissionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RBACPermission")
		case "name":
			out.Values[i] = ec._RBACPermission_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "object":
			out.Values[i] = ec._RBACPermission_object(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "access":
			out.Values[i] = ec._RBACPermission_access(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fullname":
			out.Values[i] = ec._RBACPermission_fullname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._RBACPermission_description(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var rBACRoleImplementors = []string{"RBACRole"}

func (ec *executionContext) _RBACRole(ctx context.Context, sel ast.SelectionSet, obj *models1.RBACRole) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rBACRoleImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RBACRole")
		case "ID":
			out.Values[i] = ec._RBACRole_ID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._RBACRole_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._RBACRole_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._RBACRole_description(ctx, field, obj)
		case "context":
			out.Values[i] = ec._RBACRole_context(ctx, field, obj)
		case "childRoles":
			out.Values[i] = ec._RBACRole_childRoles(ctx, field, obj)
		case "permissions":
			out.Values[i] = ec._RBACRole_permissions(ctx, field, obj)
		case "permissionPatterns":
			out.Values[i] = ec._RBACRole_permissionPatterns(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._RBACRole_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._RBACRole_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._RBACRole_deletedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var rBACRoleConnectionImplementors = []string{"RBACRoleConnection"}

func (ec *executionContext) _RBACRoleConnection(ctx context.Context, sel ast.SelectionSet, obj *connectors.CollectionConnection[models1.RBACRole, models1.RBACRoleEdge]) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rBACRoleConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RBACRoleConnection")
		case "totalCount":
			out.Values[i] = ec._RBACRoleConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._RBACRoleConnection_edges(ctx, field, obj)
		case "list":
			out.Values[i] = ec._RBACRoleConnection_list(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._RBACRoleConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var rBACRoleEdgeImplementors = []string{"RBACRoleEdge"}

func (ec *executionContext) _RBACRoleEdge(ctx context.Context, sel ast.SelectionSet, obj *models1.RBACRoleEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rBACRoleEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RBACRoleEdge")
		case "cursor":
			out.Values[i] = ec._RBACRoleEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "node":
			out.Values[i] = ec._RBACRoleEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var rBACRolePayloadImplementors = []string{"RBACRolePayload"}

func (ec *executionContext) _RBACRolePayload(ctx context.Context, sel ast.SelectionSet, obj *models1.RBACRolePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rBACRolePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RBACRolePayload")
		case "clientMutationID":
			out.Values[i] = ec._RBACRolePayload_clientMutationID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "roleID":
			out.Values[i] = ec._RBACRolePayload_roleID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "role":
			out.Values[i] = ec._RBACRolePayload_role(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var rTBSourceImplementors = []string{"RTBSource"}

func (ec *executionContext) _RTBSource(ctx context.Context, sel ast.SelectionSet, obj *models.RTBSource) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rTBSourceImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RTBSource")
		case "ID":
			out.Values[i] = ec._RTBSource_ID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "accountID":
			out.Values[i] = ec._RTBSource_accountID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._RTBSource_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._RTBSource_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "status":
			out.Values[i] = ec._RTBSource_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "active":
			out.Values[i] = ec._RTBSource_active(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "flags":
			out.Values[i] = ec._RTBSource_flags(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "protocol":
			out.Values[i] = ec._RTBSource_protocol(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "minimalWeight":
			out.Values[i] = ec._RTBSource_minimalWeight(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "URL":
			out.Values[i] = ec._RTBSource_URL(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "method":
			out.Values[i] = ec._RTBSource_method(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "requestType":
			out.Values[i] = ec._RTBSource_requestType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "headers":
			out.Values[i] = ec._RTBSource_headers(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "RPS":
			out.Values[i] = ec._RTBSource_RPS(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "timeout":
			out.Values[i] = ec._RTBSource_timeout(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "accuracy":
			out.Values[i] = ec._RTBSource_accuracy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "priceCorrectionReduce":
			out.Values[i] = ec._RTBSource_priceCorrectionReduce(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "auctionType":
			out.Values[i] = ec._RTBSource_auctionType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "minBid":
			out.Values[i] = ec._RTBSource_minBid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "maxBid":
			out.Values[i] = ec._RTBSource_maxBid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "formats":
			out.Values[i] = ec._RTBSource_formats(ctx, field, obj)
		case "deviceTypes":
			out.Values[i] = ec._RTBSource_deviceTypes(ctx, field, obj)
		case "devices":
			out.Values[i] = ec._RTBSource_devices(ctx, field, obj)
		case "OS":
			out.Values[i] = ec._RTBSource_OS(ctx, field, obj)
		case "browsers":
			out.Values[i] = ec._RTBSource_browsers(ctx, field, obj)
		case "carriers":
			out.Values[i] = ec._RTBSource_carriers(ctx, field, obj)
		case "categories":
			out.Values[i] = ec._RTBSource_categories(ctx, field, obj)
		case "countries":
			out.Values[i] = ec._RTBSource_countries(ctx, field, obj)
		case "languages":
			out.Values[i] = ec._RTBSource_languages(ctx, field, obj)
		case "applications":
			out.Values[i] = ec._RTBSource_applications(ctx, field, obj)
		case "domains":
			out.Values[i] = ec._RTBSource_domains(ctx, field, obj)
		case "zones":
			out.Values[i] = ec._RTBSource_zones(ctx, field, obj)
		case "secure":
			out.Values[i] = ec._RTBSource_secure(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "adBlock":
			out.Values[i] = ec._RTBSource_adBlock(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "privateBrowsing":
			out.Values[i] = ec._RTBSource_privateBrowsing(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "IP":
			out.Values[i] = ec._RTBSource_IP(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "config":
			out.Values[i] = ec._RTBSource_config(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._RTBSource_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._RTBSource_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._RTBSource_deletedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var rTBSourceConnectionImplementors = []string{"RTBSourceConnection"}

func (ec *executionContext) _RTBSourceConnection(ctx context.Context, sel ast.SelectionSet, obj *connectors.CollectionConnection[models.RTBSource, models.RTBSourceEdge]) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rTBSourceConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RTBSourceConnection")
		case "totalCount":
			out.Values[i] = ec._RTBSourceConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._RTBSourceConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "list":
			out.Values[i] = ec._RTBSourceConnection_list(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._RTBSourceConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var rTBSourceEdgeImplementors = []string{"RTBSourceEdge"}

func (ec *executionContext) _RTBSourceEdge(ctx context.Context, sel ast.SelectionSet, obj *models.RTBSourceEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rTBSourceEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RTBSourceEdge")
		case "cursor":
			out.Values[i] = ec._RTBSourceEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "node":
			out.Values[i] = ec._RTBSourceEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var rTBSourcePayloadImplementors = []string{"RTBSourcePayload"}

func (ec *executionContext) _RTBSourcePayload(ctx context.Context, sel ast.SelectionSet, obj *models.RTBSourcePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rTBSourcePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RTBSourcePayload")
		case "clientMutationID":
			out.Values[i] = ec._RTBSourcePayload_clientMutationID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sourceID":
			out.Values[i] = ec._RTBSourcePayload_sourceID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "source":
			out.Values[i] = ec._RTBSourcePayload_source(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var sessionTokenImplementors = []string{"SessionToken"}

func (ec *executionContext) _SessionToken(ctx context.Context, sel ast.SelectionSet, obj *models1.SessionToken) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sessionTokenImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SessionToken")
		case "token":
			out.Values[i] = ec._SessionToken_token(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "expiresAt":
			out.Values[i] = ec._SessionToken_expiresAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isAdmin":
			out.Values[i] = ec._SessionToken_isAdmin(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "roles":
			out.Values[i] = ec._SessionToken_roles(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var socialAccountImplementors = []string{"SocialAccount"}

func (ec *executionContext) _SocialAccount(ctx context.Context, sel ast.SelectionSet, obj *models1.SocialAccount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, socialAccountImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SocialAccount")
		case "ID":
			out.Values[i] = ec._SocialAccount_ID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userID":
			out.Values[i] = ec._SocialAccount_userID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "socialID":
			out.Values[i] = ec._SocialAccount_socialID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "provider":
			out.Values[i] = ec._SocialAccount_provider(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "email":
			out.Values[i] = ec._SocialAccount_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "username":
			out.Values[i] = ec._SocialAccount_username(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "firstName":
			out.Values[i] = ec._SocialAccount_firstName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lastName":
			out.Values[i] = ec._SocialAccount_lastName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "avatar":
			out.Values[i] = ec._SocialAccount_avatar(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "link":
			out.Values[i] = ec._SocialAccount_link(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._SocialAccount_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sessions":
			out.Values[i] = ec._SocialAccount_sessions(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._SocialAccount_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._SocialAccount_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._SocialAccount_deletedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var socialAccountConnectionImplementors = []string{"SocialAccountConnection"}

func (ec *executionContext) _SocialAccountConnection(ctx context.Context, sel ast.SelectionSet, obj *connectors.CollectionConnection[models1.SocialAccount, models1.SocialAccountEdge]) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, socialAccountConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SocialAccountConnection")
		case "totalCount":
			out.Values[i] = ec._SocialAccountConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._SocialAccountConnection_edges(ctx, field, obj)
		case "list":
			out.Values[i] = ec._SocialAccountConnection_list(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._SocialAccountConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var socialAccountEdgeImplementors = []string{"SocialAccountEdge"}

func (ec *executionContext) _SocialAccountEdge(ctx context.Context, sel ast.SelectionSet, obj *models1.SocialAccountEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, socialAccountEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SocialAccountEdge")
		case "cursor":
			out.Values[i] = ec._SocialAccountEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "node":
			out.Values[i] = ec._SocialAccountEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var socialAccountPayloadImplementors = []string{"SocialAccountPayload"}

func (ec *executionContext) _SocialAccountPayload(ctx context.Context, sel ast.SelectionSet, obj *models1.SocialAccountPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, socialAccountPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SocialAccountPayload")
		case "clientMutationID":
			out.Values[i] = ec._SocialAccountPayload_clientMutationID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "socialAccountID":
			out.Values[i] = ec._SocialAccountPayload_socialAccountID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "socialAccount":
			out.Values[i] = ec._SocialAccountPayload_socialAccount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var socialAccountSessionImplementors = []string{"SocialAccountSession"}

func (ec *executionContext) _SocialAccountSession(ctx context.Context, sel ast.SelectionSet, obj *models1.SocialAccountSession) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, socialAccountSessionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SocialAccountSession")
		case "name":
			out.Values[i] = ec._SocialAccountSession_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "socialAccountID":
			out.Values[i] = ec._SocialAccountSession_socialAccountID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "tokenType":
			out.Values[i] = ec._SocialAccountSession_tokenType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "accessToken":
			out.Values[i] = ec._SocialAccountSession_accessToken(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "refreshToken":
			out.Values[i] = ec._SocialAccountSession_refreshToken(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "scope":
			out.Values[i] = ec._SocialAccountSession_scope(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._SocialAccountSession_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._SocialAccountSession_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "expiresAt":
			out.Values[i] = ec._SocialAccountSession_expiresAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._SocialAccountSession_deletedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var statisticAdItemImplementors = []string{"StatisticAdItem"}

func (ec *executionContext) _StatisticAdItem(ctx context.Context, sel ast.SelectionSet, obj *models.StatisticAdItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, statisticAdItemImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StatisticAdItem")
		case "keys":
			out.Values[i] = ec._StatisticAdItem_keys(ctx, field, obj)
		case "profit":
			out.Values[i] = ec._StatisticAdItem_profit(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bidPrice":
			out.Values[i] = ec._StatisticAdItem_bidPrice(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "requests":
			out.Values[i] = ec._StatisticAdItem_requests(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "impressions":
			out.Values[i] = ec._StatisticAdItem_impressions(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "views":
			out.Values[i] = ec._StatisticAdItem_views(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "directs":
			out.Values[i] = ec._StatisticAdItem_directs(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "clicks":
			out.Values[i] = ec._StatisticAdItem_clicks(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bids":
			out.Values[i] = ec._StatisticAdItem_bids(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "wins":
			out.Values[i] = ec._StatisticAdItem_wins(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "skips":
			out.Values[i] = ec._StatisticAdItem_skips(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nobids":
			out.Values[i] = ec._StatisticAdItem_nobids(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "errors":
			out.Values[i] = ec._StatisticAdItem_errors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "CTR":
			out.Values[i] = ec._StatisticAdItem_CTR(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "eCPM":
			out.Values[i] = ec._StatisticAdItem_eCPM(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "eCPC":
			out.Values[i] = ec._StatisticAdItem_eCPC(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var statisticAdItemConnectionImplementors = []string{"StatisticAdItemConnection"}

func (ec *executionContext) _StatisticAdItemConnection(ctx context.Context, sel ast.SelectionSet, obj *connectors.CollectionConnection[models.StatisticAdItem, struct{}]) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, statisticAdItemConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StatisticAdItemConnection")
		case "totalCount":
			out.Values[i] = ec._StatisticAdItemConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "list":
			out.Values[i] = ec._StatisticAdItemConnection_list(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._StatisticAdItemConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var statisticItemKeyImplementors = []string{"StatisticItemKey"}

func (ec *executionContext) _StatisticItemKey(ctx context.Context, sel ast.SelectionSet, obj *models.StatisticItemKey) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, statisticItemKeyImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StatisticItemKey")
		case "key":
			out.Values[i] = ec._StatisticItemKey_key(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "value":
			out.Values[i] = ec._StatisticItemKey_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "text":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._StatisticItemKey_text(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var statusResponseImplementors = []string{"StatusResponse"}

func (ec *executionContext) _StatusResponse(ctx context.Context, sel ast.SelectionSet, obj *models1.StatusResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, statusResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StatusResponse")
		case "clientMutationID":
			out.Values[i] = ec._StatusResponse_clientMutationID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "status":
			out.Values[i] = ec._StatusResponse_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._StatusResponse_message(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var timeZoneImplementors = []string{"TimeZone"}

func (ec *executionContext) _TimeZone(ctx context.Context, sel ast.SelectionSet, obj *models.TimeZone) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, timeZoneImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TimeZone")
		case "name":
			out.Values[i] = ec._TimeZone_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lon":
			out.Values[i] = ec._TimeZone_lon(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var userImplementors = []string{"User"}

func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *models1.User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "ID":
			out.Values[i] = ec._User_ID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "username":
			out.Values[i] = ec._User_username(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "status":
			out.Values[i] = ec._User_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "statusMessage":
			out.Values[i] = ec._User_statusMessage(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._User_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._User_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var userConnectionImplementors = []string{"UserConnection"}

func (ec *executionContext) _UserConnection(ctx context.Context, sel ast.SelectionSet, obj *connectors.CollectionConnection[models1.User, models1.UserEdge]) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserConnection")
		case "totalCount":
			out.Values[i] = ec._UserConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._UserConnection_edges(ctx, field, obj)
		case "list":
			out.Values[i] = ec._UserConnection_list(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._UserConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var userEdgeImplementors = []string{"UserEdge"}

func (ec *executionContext) _UserEdge(ctx context.Context, sel ast.SelectionSet, obj *models1.UserEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserEdge")
		case "cursor":
			out.Values[i] = ec._UserEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "node":
			out.Values[i] = ec._UserEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var userPayloadImplementors = []string{"UserPayload"}

func (ec *executionContext) _UserPayload(ctx context.Context, sel ast.SelectionSet, obj *models1.UserPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserPayload")
		case "clientMutationID":
			out.Values[i] = ec._UserPayload_clientMutationID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userID":
			out.Values[i] = ec._UserPayload_userID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "user":
			out.Values[i] = ec._UserPayload_user(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var zoneImplementors = []string{"Zone"}

func (ec *executionContext) _Zone(ctx context.Context, sel ast.SelectionSet, obj *models.Zone) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, zoneImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Zone")
		case "ID":
			out.Values[i] = ec._Zone_ID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "codename":
			out.Values[i] = ec._Zone_codename(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "accountID":
			out.Values[i] = ec._Zone_accountID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._Zone_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._Zone_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "status":
			out.Values[i] = ec._Zone_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "active":
			out.Values[i] = ec._Zone_active(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultCode":
			out.Values[i] = ec._Zone_defaultCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "context":
			out.Values[i] = ec._Zone_context(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "minECPM":
			out.Values[i] = ec._Zone_minECPM(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fixedPurchasePrice":
			out.Values[i] = ec._Zone_fixedPurchasePrice(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "allowedFormats":
			out.Values[i] = ec._Zone_allowedFormats(ctx, field, obj)
		case "allowedTypes":
			out.Values[i] = ec._Zone_allowedTypes(ctx, field, obj)
		case "allowedSources":
			out.Values[i] = ec._Zone_allowedSources(ctx, field, obj)
		case "disallowedSources":
			out.Values[i] = ec._Zone_disallowedSources(ctx, field, obj)
		case "campaigns":
			out.Values[i] = ec._Zone_campaigns(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Zone_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._Zone_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._Zone_deletedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var zoneConnectionImplementors = []string{"ZoneConnection"}

func (ec *executionContext) _ZoneConnection(ctx context.Context, sel ast.SelectionSet, obj *connectors.CollectionConnection[models.Zone, models.ZoneEdge]) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, zoneConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ZoneConnection")
		case "totalCount":
			out.Values[i] = ec._ZoneConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._ZoneConnection_edges(ctx, field, obj)
		case "list":
			out.Values[i] = ec._ZoneConnection_list(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._ZoneConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var zoneEdgeImplementors = []string{"ZoneEdge"}

func (ec *executionContext) _ZoneEdge(ctx context.Context, sel ast.SelectionSet, obj *models.ZoneEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, zoneEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ZoneEdge")
		case "cursor":
			out.Values[i] = ec._ZoneEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "node":
			out.Values[i] = ec._ZoneEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var zonePayloadImplementors = []string{"ZonePayload"}

func (ec *executionContext) _ZonePayload(ctx context.Context, sel ast.SelectionSet, obj *models.ZonePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, zonePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ZonePayload")
		case "clientMutationID":
			out.Values[i] = ec._ZonePayload_clientMutationID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "zoneID":
			out.Values[i] = ec._ZonePayload_zoneID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "zone":
			out.Values[i] = ec._ZonePayload_zone(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___InputValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___InputValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			out.Values[i] = ec.___Schema_description(ctx, field, obj)
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		case "specifiedByURL":
			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)
		case "isOneOf":
			out.Values[i] = ec.___Type_isOneOf(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNAccount2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAccount(ctx context.Context, sel ast.SelectionSet, v *models1.Account) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Account(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAccountCreateInput2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAccountCreateInput(ctx context.Context, v any) (models1.AccountCreateInput, error) {
	res, err := ec.unmarshalInputAccountCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAccountCreatePayload2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAccountCreatePayload(ctx context.Context, sel ast.SelectionSet, v models1.AccountCreatePayload) graphql.Marshaler {
	return ec._AccountCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNAccountCreatePayload2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAccountCreatePayload(ctx context.Context, sel ast.SelectionSet, v *models1.AccountCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AccountCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNAccountEdge2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAccountEdge(ctx context.Context, sel ast.SelectionSet, v *models1.AccountEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AccountEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAccountInput2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAccountInput(ctx context.Context, v any) (models1.AccountInput, error) {
	res, err := ec.unmarshalInputAccountInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAccountInput2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAccountInput(ctx context.Context, v any) (*models1.AccountInput, error) {
	res, err := ec.unmarshalInputAccountInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAccountPayload2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAccountPayload(ctx context.Context, sel ast.SelectionSet, v models1.AccountPayload) graphql.Marshaler {
	return ec._AccountPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNAccountPayload2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAccountPayload(ctx context.Context, sel ast.SelectionSet, v *models1.AccountPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AccountPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNActiveStatus2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐActiveStatus(ctx context.Context, v any) (models1.ActiveStatus, error) {
	var res models1.ActiveStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNActiveStatus2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐActiveStatus(ctx context.Context, sel ast.SelectionSet, v models1.ActiveStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNAdFormat2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐAdFormatᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.AdFormat) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAdFormat2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐAdFormat(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAdFormat2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐAdFormat(ctx context.Context, sel ast.SelectionSet, v *models.AdFormat) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AdFormat(ctx, sel, v)
}

func (ec *executionContext) marshalNAdFormatEdge2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐAdFormatEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.AdFormatEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAdFormatEdge2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐAdFormatEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAdFormatEdge2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐAdFormatEdge(ctx context.Context, sel ast.SelectionSet, v *models.AdFormatEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AdFormatEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAdFormatInput2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐAdFormatInput(ctx context.Context, v any) (models.AdFormatInput, error) {
	res, err := ec.unmarshalInputAdFormatInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAny2interface(ctx context.Context, v any) (any, error) {
	res, err := graphql.UnmarshalAny(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAny2interface(ctx context.Context, sel ast.SelectionSet, v any) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	res := graphql.MarshalAny(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNAny2ᚕinterfaceᚄ(ctx context.Context, v any) ([]any, error) {
	var vSlice []any
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]any, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAny2interface(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNAny2ᚕinterfaceᚄ(ctx context.Context, sel ast.SelectionSet, v []any) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNAny2interface(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNAnyIPv4IPv62githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐAnyIPv4IPv6(ctx context.Context, v any) (models.AnyIPv4IPv6, error) {
	var res models.AnyIPv4IPv6
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAnyIPv4IPv62githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐAnyIPv4IPv6(ctx context.Context, sel ast.SelectionSet, v models.AnyIPv4IPv6) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNAnyOnlyExclude2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐAnyOnlyExclude(ctx context.Context, v any) (models.AnyOnlyExclude, error) {
	var res models.AnyOnlyExclude
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAnyOnlyExclude2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐAnyOnlyExclude(ctx context.Context, sel ast.SelectionSet, v models.AnyOnlyExclude) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNApplication2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐApplicationᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.Application) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNApplication2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐApplication(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNApplication2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐApplication(ctx context.Context, sel ast.SelectionSet, v *models.Application) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Application(ctx, sel, v)
}

func (ec *executionContext) unmarshalNApplicationCreateInput2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐApplicationCreateInput(ctx context.Context, v any) (models.ApplicationCreateInput, error) {
	res, err := ec.unmarshalInputApplicationCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNApplicationEdge2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐApplicationEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.ApplicationEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNApplicationEdge2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐApplicationEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNApplicationEdge2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐApplicationEdge(ctx context.Context, sel ast.SelectionSet, v *models.ApplicationEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ApplicationEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNApplicationPayload2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐApplicationPayload(ctx context.Context, sel ast.SelectionSet, v models.ApplicationPayload) graphql.Marshaler {
	return ec._ApplicationPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNApplicationPayload2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐApplicationPayload(ctx context.Context, sel ast.SelectionSet, v *models.ApplicationPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ApplicationPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNApplicationType2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐApplicationType(ctx context.Context, v any) (models.ApplicationType, error) {
	var res models.ApplicationType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNApplicationType2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐApplicationType(ctx context.Context, sel ast.SelectionSet, v models.ApplicationType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNApplicationUpdateInput2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐApplicationUpdateInput(ctx context.Context, v any) (models.ApplicationUpdateInput, error) {
	res, err := ec.unmarshalInputApplicationUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNApproveStatus2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐApproveStatus(ctx context.Context, v any) (models1.ApproveStatus, error) {
	var res models1.ApproveStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNApproveStatus2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐApproveStatus(ctx context.Context, sel ast.SelectionSet, v models1.ApproveStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNAuctionType2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐAuctionType(ctx context.Context, v any) (models.AuctionType, error) {
	var res models.AuctionType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAuctionType2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐAuctionType(ctx context.Context, sel ast.SelectionSet, v models.AuctionType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNAuthClient2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAuthClient(ctx context.Context, sel ast.SelectionSet, v *models1.AuthClient) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AuthClient(ctx, sel, v)
}

func (ec *executionContext) marshalNAuthClientEdge2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAuthClientEdge(ctx context.Context, sel ast.SelectionSet, v *models1.AuthClientEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AuthClientEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAuthClientInput2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAuthClientInput(ctx context.Context, v any) (models1.AuthClientInput, error) {
	res, err := ec.unmarshalInputAuthClientInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAuthClientPayload2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAuthClientPayload(ctx context.Context, sel ast.SelectionSet, v models1.AuthClientPayload) graphql.Marshaler {
	return ec._AuthClientPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNAuthClientPayload2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAuthClientPayload(ctx context.Context, sel ast.SelectionSet, v *models1.AuthClientPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AuthClientPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v any) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNBrowser2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐBrowserᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.Browser) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNBrowser2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐBrowser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNBrowser2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐBrowser(ctx context.Context, sel ast.SelectionSet, v *models.Browser) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Browser(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBrowserCreateInput2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐBrowserCreateInput(ctx context.Context, v any) (models.BrowserCreateInput, error) {
	res, err := ec.unmarshalInputBrowserCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBrowserEdge2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐBrowserEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.BrowserEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNBrowserEdge2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐBrowserEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNBrowserEdge2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐBrowserEdge(ctx context.Context, sel ast.SelectionSet, v *models.BrowserEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._BrowserEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBrowserListOrder2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐBrowserListOrder(ctx context.Context, v any) (*models.BrowserListOrder, error) {
	res, err := ec.unmarshalInputBrowserListOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNBrowserUpdateInput2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐBrowserUpdateInput(ctx context.Context, v any) (models.BrowserUpdateInput, error) {
	res, err := ec.unmarshalInputBrowserUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCategory2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐCategoryᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.Category) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCategory2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐCategory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCategory2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐCategory(ctx context.Context, sel ast.SelectionSet, v *models.Category) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Category(ctx, sel, v)
}

func (ec *executionContext) marshalNCategoryEdge2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐCategoryEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.CategoryEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCategoryEdge2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐCategoryEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCategoryEdge2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐCategoryEdge(ctx context.Context, sel ast.SelectionSet, v *models.CategoryEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CategoryEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCategoryInput2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐCategoryInput(ctx context.Context, v any) (models.CategoryInput, error) {
	res, err := ec.unmarshalInputCategoryInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNContinent2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐContinent(ctx context.Context, sel ast.SelectionSet, v *models.Continent) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Continent(ctx, sel, v)
}

func (ec *executionContext) marshalNCoordinates2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐCoordinates(ctx context.Context, sel ast.SelectionSet, v *models.Coordinates) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Coordinates(ctx, sel, v)
}

func (ec *executionContext) marshalNCountry2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐCountry(ctx context.Context, sel ast.SelectionSet, v *models.Country) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Country(ctx, sel, v)
}

func (ec *executionContext) marshalNDeviceMaker2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceMakerᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.DeviceMaker) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDeviceMaker2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceMaker(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNDeviceMaker2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceMaker(ctx context.Context, sel ast.SelectionSet, v *models.DeviceMaker) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeviceMaker(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDeviceMakerCreateInput2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceMakerCreateInput(ctx context.Context, v any) (models.DeviceMakerCreateInput, error) {
	res, err := ec.unmarshalInputDeviceMakerCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDeviceMakerEdge2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceMakerEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.DeviceMakerEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDeviceMakerEdge2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceMakerEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNDeviceMakerEdge2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceMakerEdge(ctx context.Context, sel ast.SelectionSet, v *models.DeviceMakerEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeviceMakerEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDeviceMakerListOrder2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceMakerListOrder(ctx context.Context, v any) (*models.DeviceMakerListOrder, error) {
	res, err := ec.unmarshalInputDeviceMakerListOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDeviceMakerUpdateInput2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceMakerUpdateInput(ctx context.Context, v any) (models.DeviceMakerUpdateInput, error) {
	res, err := ec.unmarshalInputDeviceMakerUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDeviceModel2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceModelᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.DeviceModel) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDeviceModel2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceModel(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNDeviceModel2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceModel(ctx context.Context, sel ast.SelectionSet, v *models.DeviceModel) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeviceModel(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDeviceModelCreateInput2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceModelCreateInput(ctx context.Context, v any) (models.DeviceModelCreateInput, error) {
	res, err := ec.unmarshalInputDeviceModelCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDeviceModelEdge2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceModelEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.DeviceModelEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDeviceModelEdge2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceModelEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNDeviceModelEdge2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceModelEdge(ctx context.Context, sel ast.SelectionSet, v *models.DeviceModelEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeviceModelEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDeviceModelListOrder2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceModelListOrder(ctx context.Context, v any) (*models.DeviceModelListOrder, error) {
	res, err := ec.unmarshalInputDeviceModelListOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDeviceModelUpdateInput2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceModelUpdateInput(ctx context.Context, v any) (models.DeviceModelUpdateInput, error) {
	res, err := ec.unmarshalInputDeviceModelUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDeviceType2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceType(ctx context.Context, sel ast.SelectionSet, v *models.DeviceType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeviceType(ctx, sel, v)
}

func (ec *executionContext) marshalNDirectAccessToken2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐDirectAccessToken(ctx context.Context, sel ast.SelectionSet, v *models1.DirectAccessToken) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DirectAccessToken(ctx, sel, v)
}

func (ec *executionContext) marshalNDirectAccessTokenEdge2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐDirectAccessTokenEdge(ctx context.Context, sel ast.SelectionSet, v *models1.DirectAccessTokenEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DirectAccessTokenEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDirectAccessTokenListFilter2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐDirectAccessTokenListFilter(ctx context.Context, v any) (models1.DirectAccessTokenListFilter, error) {
	res, err := ec.unmarshalInputDirectAccessTokenListFilter(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v any) (float64, error) {
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloatContext(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) marshalNHistoryAction2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐHistoryAction(ctx context.Context, sel ast.SelectionSet, v *models1.HistoryAction) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._HistoryAction(ctx, sel, v)
}

func (ec *executionContext) marshalNHistoryActionEdge2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐHistoryActionEdge(ctx context.Context, sel ast.SelectionSet, v *models1.HistoryActionEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._HistoryActionEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNID642uint64(ctx context.Context, v any) (uint64, error) {
	res, err := types.UnmarshalID64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID642uint64(ctx context.Context, sel ast.SelectionSet, v uint64) graphql.Marshaler {
	res := types.MarshalID64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v any) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt642int64(ctx context.Context, v any) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt642int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInviteMemberInput2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐInviteMemberInput(ctx context.Context, v any) (models1.InviteMemberInput, error) {
	res, err := ec.unmarshalInputInviteMemberInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMember2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐMember(ctx context.Context, sel ast.SelectionSet, v *models1.Member) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Member(ctx, sel, v)
}

func (ec *executionContext) marshalNMemberEdge2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐMemberEdge(ctx context.Context, sel ast.SelectionSet, v *models1.MemberEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MemberEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMemberInput2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐMemberInput(ctx context.Context, v any) (models1.MemberInput, error) {
	res, err := ec.unmarshalInputMemberInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMemberPayload2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐMemberPayload(ctx context.Context, sel ast.SelectionSet, v models1.MemberPayload) graphql.Marshaler {
	return ec._MemberPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNMemberPayload2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐMemberPayload(ctx context.Context, sel ast.SelectionSet, v *models1.MemberPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MemberPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMessangerType2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐMessangerType(ctx context.Context, v any) (models1.MessangerType, error) {
	var res models1.MessangerType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMessangerType2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐMessangerType(ctx context.Context, sel ast.SelectionSet, v models1.MessangerType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNNullableJSON2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋtypesᚐNullableJSON(ctx context.Context, v any) (types.NullableJSON, error) {
	var res types.NullableJSON
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNullableJSON2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋtypesᚐNullableJSON(ctx context.Context, sel ast.SelectionSet, v types.NullableJSON) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNOS2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐOs(ctx context.Context, sel ast.SelectionSet, v *models.Os) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._OS(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOSCreateInput2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐOSCreateInput(ctx context.Context, v any) (models.OSCreateInput, error) {
	res, err := ec.unmarshalInputOSCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOSEdge2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐOSEdge(ctx context.Context, sel ast.SelectionSet, v *models.OSEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._OSEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOSListOrder2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐOSListOrderᚄ(ctx context.Context, v any) ([]*models.OSListOrder, error) {
	var vSlice []any
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*models.OSListOrder, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNOSListOrder2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐOSListOrder(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNOSListOrder2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐOSListOrder(ctx context.Context, v any) (*models.OSListOrder, error) {
	res, err := ec.unmarshalInputOSListOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNOSUpdateInput2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐOSUpdateInput(ctx context.Context, v any) (models.OSUpdateInput, error) {
	res, err := ec.unmarshalInputOSUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOption2ᚕᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOptionᚄ(ctx context.Context, sel ast.SelectionSet, v []*models1.Option) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOption2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOption(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNOption2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOption(ctx context.Context, sel ast.SelectionSet, v *models1.Option) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Option(ctx, sel, v)
}

func (ec *executionContext) marshalNOptionEdge2ᚕᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOptionEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models1.OptionEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOptionEdge2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOptionEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNOptionEdge2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOptionEdge(ctx context.Context, sel ast.SelectionSet, v *models1.OptionEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._OptionEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNOptionPayload2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOptionPayload(ctx context.Context, sel ast.SelectionSet, v models1.OptionPayload) graphql.Marshaler {
	return ec._OptionPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNOptionPayload2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOptionPayload(ctx context.Context, sel ast.SelectionSet, v *models1.OptionPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._OptionPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOptionType2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOptionType(ctx context.Context, v any) (models1.OptionType, error) {
	var res models1.OptionType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOptionType2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOptionType(ctx context.Context, sel ast.SelectionSet, v models1.OptionType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNOrdering2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx context.Context, v any) (models1.Ordering, error) {
	var res models1.Ordering
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOrdering2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx context.Context, sel ast.SelectionSet, v models1.Ordering) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNPageInfo2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐPageInfo(ctx context.Context, sel ast.SelectionSet, v *models1.PageInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PageInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPlatformType2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐPlatformType(ctx context.Context, v any) (models.PlatformType, error) {
	var res models.PlatformType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPlatformType2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐPlatformType(ctx context.Context, sel ast.SelectionSet, v models.PlatformType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNPrivateStatus2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐPrivateStatus(ctx context.Context, v any) (models.PrivateStatus, error) {
	var res models.PrivateStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPrivateStatus2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐPrivateStatus(ctx context.Context, sel ast.SelectionSet, v models.PrivateStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNProfileMessanger2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐProfileMessanger(ctx context.Context, sel ast.SelectionSet, v *models1.ProfileMessanger) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ProfileMessanger(ctx, sel, v)
}

func (ec *executionContext) marshalNRBACPermission2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐRBACPermission(ctx context.Context, sel ast.SelectionSet, v *models1.RBACPermission) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RBACPermission(ctx, sel, v)
}

func (ec *executionContext) marshalNRBACRole2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐRBACRole(ctx context.Context, sel ast.SelectionSet, v *models1.RBACRole) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RBACRole(ctx, sel, v)
}

func (ec *executionContext) marshalNRBACRoleEdge2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐRBACRoleEdge(ctx context.Context, sel ast.SelectionSet, v *models1.RBACRoleEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RBACRoleEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRBACRoleInput2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐRBACRoleInput(ctx context.Context, v any) (models1.RBACRoleInput, error) {
	res, err := ec.unmarshalInputRBACRoleInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRBACRolePayload2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐRBACRolePayload(ctx context.Context, sel ast.SelectionSet, v models1.RBACRolePayload) graphql.Marshaler {
	return ec._RBACRolePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRBACRolePayload2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐRBACRolePayload(ctx context.Context, sel ast.SelectionSet, v *models1.RBACRolePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RBACRolePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRTBRequestFormatType2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐRTBRequestFormatType(ctx context.Context, v any) (models.RTBRequestFormatType, error) {
	var res models.RTBRequestFormatType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRTBRequestFormatType2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐRTBRequestFormatType(ctx context.Context, sel ast.SelectionSet, v models.RTBRequestFormatType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNRTBSource2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐRTBSourceᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.RTBSource) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRTBSource2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐRTBSource(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNRTBSource2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐRTBSource(ctx context.Context, sel ast.SelectionSet, v *models.RTBSource) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RTBSource(ctx, sel, v)
}

func (ec *executionContext) marshalNRTBSourceEdge2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐRTBSourceEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.RTBSourceEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRTBSourceEdge2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐRTBSourceEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNRTBSourceEdge2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐRTBSourceEdge(ctx context.Context, sel ast.SelectionSet, v *models.RTBSourceEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RTBSourceEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRTBSourceInput2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐRTBSourceInput(ctx context.Context, v any) (models.RTBSourceInput, error) {
	res, err := ec.unmarshalInputRTBSourceInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRTBSourcePayload2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐRTBSourcePayload(ctx context.Context, sel ast.SelectionSet, v models.RTBSourcePayload) graphql.Marshaler {
	return ec._RTBSourcePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRTBSourcePayload2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐRTBSourcePayload(ctx context.Context, sel ast.SelectionSet, v *models.RTBSourcePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RTBSourcePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNResponseStatus2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐResponseStatus(ctx context.Context, v any) (models1.ResponseStatus, error) {
	var res models1.ResponseStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNResponseStatus2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐResponseStatus(ctx context.Context, sel ast.SelectionSet, v models1.ResponseStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNSessionToken2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐSessionToken(ctx context.Context, sel ast.SelectionSet, v models1.SessionToken) graphql.Marshaler {
	return ec._SessionToken(ctx, sel, &v)
}

func (ec *executionContext) marshalNSessionToken2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐSessionToken(ctx context.Context, sel ast.SelectionSet, v *models1.SessionToken) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SessionToken(ctx, sel, v)
}

func (ec *executionContext) marshalNSocialAccount2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐSocialAccount(ctx context.Context, sel ast.SelectionSet, v *models1.SocialAccount) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SocialAccount(ctx, sel, v)
}

func (ec *executionContext) marshalNSocialAccountConnection2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋconnectorsᚐCollectionConnection(ctx context.Context, sel ast.SelectionSet, v connectors.CollectionConnection[models1.SocialAccount, models1.SocialAccountEdge]) graphql.Marshaler {
	return ec._SocialAccountConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNSocialAccountConnection2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋconnectorsᚐCollectionConnection(ctx context.Context, sel ast.SelectionSet, v *connectors.CollectionConnection[models1.SocialAccount, models1.SocialAccountEdge]) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SocialAccountConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNSocialAccountEdge2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐSocialAccountEdge(ctx context.Context, sel ast.SelectionSet, v *models1.SocialAccountEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SocialAccountEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNSocialAccountPayload2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐSocialAccountPayload(ctx context.Context, sel ast.SelectionSet, v models1.SocialAccountPayload) graphql.Marshaler {
	return ec._SocialAccountPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNSocialAccountPayload2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐSocialAccountPayload(ctx context.Context, sel ast.SelectionSet, v *models1.SocialAccountPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SocialAccountPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNSocialAccountSession2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐSocialAccountSession(ctx context.Context, sel ast.SelectionSet, v *models1.SocialAccountSession) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SocialAccountSession(ctx, sel, v)
}

func (ec *executionContext) marshalNStatisticAdItem2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐStatisticAdItem(ctx context.Context, sel ast.SelectionSet, v *models.StatisticAdItem) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._StatisticAdItem(ctx, sel, v)
}

func (ec *executionContext) marshalNStatisticAdItemConnection2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋconnectorsᚐCollectionConnection(ctx context.Context, sel ast.SelectionSet, v connectors.CollectionConnection[models.StatisticAdItem, struct{}]) graphql.Marshaler {
	return ec._StatisticAdItemConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNStatisticAdItemConnection2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋconnectorsᚐCollectionConnection(ctx context.Context, sel ast.SelectionSet, v *connectors.CollectionConnection[models.StatisticAdItem, struct{}]) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._StatisticAdItemConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNStatisticAdKeyCondition2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐStatisticAdKeyCondition(ctx context.Context, v any) (*models.StatisticAdKeyCondition, error) {
	res, err := ec.unmarshalInputStatisticAdKeyCondition(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNStatisticAdKeyOrder2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐStatisticAdKeyOrder(ctx context.Context, v any) (*models.StatisticAdKeyOrder, error) {
	res, err := ec.unmarshalInputStatisticAdKeyOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNStatisticCondition2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐStatisticCondition(ctx context.Context, v any) (models.StatisticCondition, error) {
	var res models.StatisticCondition
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNStatisticCondition2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐStatisticCondition(ctx context.Context, sel ast.SelectionSet, v models.StatisticCondition) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNStatisticItemKey2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐStatisticItemKey(ctx context.Context, sel ast.SelectionSet, v *models.StatisticItemKey) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._StatisticItemKey(ctx, sel, v)
}

func (ec *executionContext) unmarshalNStatisticKey2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐStatisticKey(ctx context.Context, v any) (models.StatisticKey, error) {
	var res models.StatisticKey
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNStatisticKey2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐStatisticKey(ctx context.Context, sel ast.SelectionSet, v models.StatisticKey) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNStatisticOrderingKey2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐStatisticOrderingKey(ctx context.Context, v any) (models.StatisticOrderingKey, error) {
	var res models.StatisticOrderingKey
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNStatisticOrderingKey2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐStatisticOrderingKey(ctx context.Context, sel ast.SelectionSet, v models.StatisticOrderingKey) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNStatusResponse2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐStatusResponse(ctx context.Context, sel ast.SelectionSet, v models1.StatusResponse) graphql.Marshaler {
	return ec._StatusResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNStatusResponse2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐStatusResponse(ctx context.Context, sel ast.SelectionSet, v *models1.StatusResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._StatusResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	var vSlice []any
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNTime2timeᚐTime(ctx context.Context, v any) (time.Time, error) {
	res, err := types.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := types.MarshalTime(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNTimeZone2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐTimeZone(ctx context.Context, sel ast.SelectionSet, v *models.TimeZone) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TimeZone(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx context.Context, v any) (uuid.UUID, error) {
	res, err := types.UnmarshalUUID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx context.Context, sel ast.SelectionSet, v uuid.UUID) graphql.Marshaler {
	res := types.MarshalUUID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNUint642uint64(ctx context.Context, v any) (uint64, error) {
	res, err := graphql.UnmarshalUint64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUint642uint64(ctx context.Context, sel ast.SelectionSet, v uint64) graphql.Marshaler {
	res := graphql.MarshalUint64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNUser2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐUser(ctx context.Context, sel ast.SelectionSet, v *models1.User) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalNUserEdge2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐUserEdge(ctx context.Context, sel ast.SelectionSet, v *models1.UserEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UserEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserInput2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐUserInput(ctx context.Context, v any) (models1.UserInput, error) {
	res, err := ec.unmarshalInputUserInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUserPayload2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐUserPayload(ctx context.Context, sel ast.SelectionSet, v models1.UserPayload) graphql.Marshaler {
	return ec._UserPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserPayload2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐUserPayload(ctx context.Context, sel ast.SelectionSet, v *models1.UserPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UserPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNZone2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐZone(ctx context.Context, sel ast.SelectionSet, v *models.Zone) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Zone(ctx, sel, v)
}

func (ec *executionContext) marshalNZoneEdge2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐZoneEdge(ctx context.Context, sel ast.SelectionSet, v *models.ZoneEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ZoneEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNZoneInput2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐZoneInput(ctx context.Context, v any) (models.ZoneInput, error) {
	res, err := ec.unmarshalInputZoneInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNZonePayload2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐZonePayload(ctx context.Context, sel ast.SelectionSet, v models.ZonePayload) graphql.Marshaler {
	return ec._ZonePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNZonePayload2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐZonePayload(ctx context.Context, sel ast.SelectionSet, v *models.ZonePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ZonePayload(ctx, sel, v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	var vSlice []any
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalOAccount2ᚕᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAccountᚄ(ctx context.Context, sel ast.SelectionSet, v []*models1.Account) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAccount2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAccount(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOAccount2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAccount(ctx context.Context, sel ast.SelectionSet, v *models1.Account) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Account(ctx, sel, v)
}

func (ec *executionContext) marshalOAccountConnection2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋconnectorsᚐCollectionConnection(ctx context.Context, sel ast.SelectionSet, v *connectors.CollectionConnection[models1.Account, models1.AccountEdge]) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AccountConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOAccountEdge2ᚕᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAccountEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models1.AccountEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAccountEdge2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAccountEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOAccountListFilter2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAccountListFilter(ctx context.Context, v any) (*models1.AccountListFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAccountListFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOAccountListOrder2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAccountListOrder(ctx context.Context, v any) (*models1.AccountListOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAccountListOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOActiveStatus2ᚕgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐActiveStatusᚄ(ctx context.Context, v any) ([]models1.ActiveStatus, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]models1.ActiveStatus, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNActiveStatus2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐActiveStatus(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOActiveStatus2ᚕgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐActiveStatusᚄ(ctx context.Context, sel ast.SelectionSet, v []models1.ActiveStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNActiveStatus2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐActiveStatus(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOActiveStatus2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐActiveStatus(ctx context.Context, v any) (*models1.ActiveStatus, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models1.ActiveStatus)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOActiveStatus2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐActiveStatus(ctx context.Context, sel ast.SelectionSet, v *models1.ActiveStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOAdFormatConnection2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋconnectorsᚐCollectionConnection(ctx context.Context, sel ast.SelectionSet, v *connectors.CollectionConnection[models.AdFormat, models.AdFormatEdge]) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AdFormatConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAdFormatListFilter2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐAdFormatListFilter(ctx context.Context, v any) (*models.AdFormatListFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAdFormatListFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOAdFormatListOrder2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐAdFormatListOrder(ctx context.Context, v any) (*models.AdFormatListOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAdFormatListOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAdFormatPayload2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐAdFormatPayload(ctx context.Context, sel ast.SelectionSet, v *models.AdFormatPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AdFormatPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAnyIPv4IPv62ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐAnyIPv4IPv6(ctx context.Context, v any) (*models.AnyIPv4IPv6, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models.AnyIPv4IPv6)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAnyIPv4IPv62ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐAnyIPv4IPv6(ctx context.Context, sel ast.SelectionSet, v *models.AnyIPv4IPv6) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOAnyOnlyExclude2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐAnyOnlyExclude(ctx context.Context, v any) (*models.AnyOnlyExclude, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models.AnyOnlyExclude)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAnyOnlyExclude2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐAnyOnlyExclude(ctx context.Context, sel ast.SelectionSet, v *models.AnyOnlyExclude) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOApplicationConnection2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋconnectorsᚐCollectionConnection(ctx context.Context, sel ast.SelectionSet, v *connectors.CollectionConnection[models.Application, models.ApplicationEdge]) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApplicationConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalOApplicationListFilter2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐApplicationListFilter(ctx context.Context, v any) (*models.ApplicationListFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputApplicationListFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOApplicationListOrder2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐApplicationListOrder(ctx context.Context, v any) (*models.ApplicationListOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputApplicationListOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOApplicationPayload2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐApplicationPayload(ctx context.Context, sel ast.SelectionSet, v *models.ApplicationPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApplicationPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalOApplicationType2ᚕgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐApplicationTypeᚄ(ctx context.Context, v any) ([]models.ApplicationType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]models.ApplicationType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNApplicationType2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐApplicationType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOApplicationType2ᚕgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐApplicationTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []models.ApplicationType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNApplicationType2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐApplicationType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOApplicationType2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐApplicationType(ctx context.Context, v any) (*models.ApplicationType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models.ApplicationType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOApplicationType2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐApplicationType(ctx context.Context, sel ast.SelectionSet, v *models.ApplicationType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOApproveStatus2ᚕgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐApproveStatusᚄ(ctx context.Context, v any) ([]models1.ApproveStatus, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]models1.ApproveStatus, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNApproveStatus2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐApproveStatus(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOApproveStatus2ᚕgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐApproveStatusᚄ(ctx context.Context, sel ast.SelectionSet, v []models1.ApproveStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNApproveStatus2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐApproveStatus(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOApproveStatus2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐApproveStatus(ctx context.Context, v any) (*models1.ApproveStatus, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models1.ApproveStatus)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOApproveStatus2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐApproveStatus(ctx context.Context, sel ast.SelectionSet, v *models1.ApproveStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOAuctionType2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐAuctionType(ctx context.Context, v any) (*models.AuctionType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models.AuctionType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAuctionType2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐAuctionType(ctx context.Context, sel ast.SelectionSet, v *models.AuctionType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOAuthClient2ᚕᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAuthClientᚄ(ctx context.Context, sel ast.SelectionSet, v []*models1.AuthClient) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAuthClient2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAuthClient(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOAuthClient2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAuthClient(ctx context.Context, sel ast.SelectionSet, v *models1.AuthClient) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AuthClient(ctx, sel, v)
}

func (ec *executionContext) marshalOAuthClientConnection2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋconnectorsᚐCollectionConnection(ctx context.Context, sel ast.SelectionSet, v *connectors.CollectionConnection[models1.AuthClient, models1.AuthClientEdge]) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AuthClientConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOAuthClientEdge2ᚕᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAuthClientEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models1.AuthClientEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAuthClientEdge2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAuthClientEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOAuthClientListFilter2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAuthClientListFilter(ctx context.Context, v any) (*models1.AuthClientListFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAuthClientListFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOAuthClientListOrder2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐAuthClientListOrder(ctx context.Context, v any) (*models1.AuthClientListOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAuthClientListOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v any) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v any) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) marshalOBrowser2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐBrowserᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.Browser) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNBrowser2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐBrowser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOBrowser2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐBrowser(ctx context.Context, sel ast.SelectionSet, v *models.Browser) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Browser(ctx, sel, v)
}

func (ec *executionContext) marshalOBrowserConnection2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋconnectorsᚐCollectionConnection(ctx context.Context, sel ast.SelectionSet, v *connectors.CollectionConnection[models.Browser, models.BrowserEdge]) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BrowserConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBrowserListFilter2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐBrowserListFilter(ctx context.Context, v any) (*models.BrowserListFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBrowserListFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBrowserListOrder2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐBrowserListOrderᚄ(ctx context.Context, v any) ([]*models.BrowserListOrder, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*models.BrowserListOrder, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBrowserListOrder2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐBrowserListOrder(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBrowserPayload2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐBrowserPayload(ctx context.Context, sel ast.SelectionSet, v *models.BrowserPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BrowserPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOCategory2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐCategory(ctx context.Context, sel ast.SelectionSet, v *models.Category) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Category(ctx, sel, v)
}

func (ec *executionContext) marshalOCategoryConnection2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋconnectorsᚐCollectionConnection(ctx context.Context, sel ast.SelectionSet, v *connectors.CollectionConnection[models.Category, models.CategoryEdge]) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CategoryConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCategoryListFilter2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐCategoryListFilter(ctx context.Context, v any) (*models.CategoryListFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCategoryListFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCategoryListOrder2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐCategoryListOrder(ctx context.Context, v any) (*models.CategoryListOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCategoryListOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCategoryPayload2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐCategoryPayload(ctx context.Context, sel ast.SelectionSet, v *models.CategoryPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CategoryPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOContinent2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐContinentᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.Continent) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNContinent2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐContinent(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCountry2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐCountryᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.Country) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCountry2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐCountry(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalODateTime2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋtypesᚐDateTime(ctx context.Context, v any) (*types.DateTime, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(types.DateTime)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODateTime2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋtypesᚐDateTime(ctx context.Context, sel ast.SelectionSet, v *types.DateTime) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalODeviceMaker2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceMaker(ctx context.Context, sel ast.SelectionSet, v *models.DeviceMaker) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeviceMaker(ctx, sel, v)
}

func (ec *executionContext) marshalODeviceMakerConnection2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋconnectorsᚐCollectionConnection(ctx context.Context, sel ast.SelectionSet, v *connectors.CollectionConnection[models.DeviceMaker, models.DeviceMakerEdge]) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeviceMakerConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalODeviceMakerListFilter2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceMakerListFilter(ctx context.Context, v any) (*models.DeviceMakerListFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDeviceMakerListFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODeviceMakerListOrder2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceMakerListOrderᚄ(ctx context.Context, v any) ([]*models.DeviceMakerListOrder, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*models.DeviceMakerListOrder, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDeviceMakerListOrder2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceMakerListOrder(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalODeviceMakerPayload2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceMakerPayload(ctx context.Context, sel ast.SelectionSet, v *models.DeviceMakerPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeviceMakerPayload(ctx, sel, v)
}

func (ec *executionContext) marshalODeviceModel2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceModelᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.DeviceModel) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDeviceModel2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceModel(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalODeviceModel2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceModel(ctx context.Context, sel ast.SelectionSet, v *models.DeviceModel) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeviceModel(ctx, sel, v)
}

func (ec *executionContext) marshalODeviceModelConnection2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋconnectorsᚐCollectionConnection(ctx context.Context, sel ast.SelectionSet, v *connectors.CollectionConnection[models.DeviceModel, models.DeviceModelEdge]) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeviceModelConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalODeviceModelListFilter2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceModelListFilter(ctx context.Context, v any) (*models.DeviceModelListFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDeviceModelListFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODeviceModelListOrder2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceModelListOrderᚄ(ctx context.Context, v any) ([]*models.DeviceModelListOrder, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*models.DeviceModelListOrder, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDeviceModelListOrder2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceModelListOrder(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalODeviceModelPayload2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceModelPayload(ctx context.Context, sel ast.SelectionSet, v *models.DeviceModelPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeviceModelPayload(ctx, sel, v)
}

func (ec *executionContext) marshalODeviceType2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.DeviceType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDeviceType2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalODeviceType2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐDeviceType(ctx context.Context, sel ast.SelectionSet, v *models.DeviceType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeviceType(ctx, sel, v)
}

func (ec *executionContext) marshalODirectAccessToken2ᚕᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐDirectAccessTokenᚄ(ctx context.Context, sel ast.SelectionSet, v []*models1.DirectAccessToken) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDirectAccessToken2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐDirectAccessToken(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalODirectAccessToken2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐDirectAccessToken(ctx context.Context, sel ast.SelectionSet, v *models1.DirectAccessToken) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DirectAccessToken(ctx, sel, v)
}

func (ec *executionContext) marshalODirectAccessTokenConnection2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋconnectorsᚐCollectionConnection(ctx context.Context, sel ast.SelectionSet, v *connectors.CollectionConnection[models1.DirectAccessToken, models1.DirectAccessTokenEdge]) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DirectAccessTokenConnection(ctx, sel, v)
}

func (ec *executionContext) marshalODirectAccessTokenEdge2ᚕᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐDirectAccessTokenEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models1.DirectAccessTokenEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDirectAccessTokenEdge2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐDirectAccessTokenEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalODirectAccessTokenListFilter2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐDirectAccessTokenListFilter(ctx context.Context, v any) (*models1.DirectAccessTokenListFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDirectAccessTokenListFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODirectAccessTokenListOrder2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐDirectAccessTokenListOrder(ctx context.Context, v any) (*models1.DirectAccessTokenListOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDirectAccessTokenListOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODirectAccessTokenPayload2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐDirectAccessTokenPayload(ctx context.Context, sel ast.SelectionSet, v *models1.DirectAccessTokenPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DirectAccessTokenPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v any) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalFloatContext(*v)
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) marshalOHistoryAction2ᚕᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐHistoryActionᚄ(ctx context.Context, sel ast.SelectionSet, v []*models1.HistoryAction) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNHistoryAction2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐHistoryAction(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOHistoryActionConnection2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋconnectorsᚐCollectionConnection(ctx context.Context, sel ast.SelectionSet, v *connectors.CollectionConnection[models1.HistoryAction, models1.HistoryActionEdge]) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._HistoryActionConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOHistoryActionEdge2ᚕᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐHistoryActionEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models1.HistoryActionEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNHistoryActionEdge2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐHistoryActionEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOHistoryActionListFilter2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐHistoryActionListFilter(ctx context.Context, v any) (*models1.HistoryActionListFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputHistoryActionListFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOHistoryActionListOrder2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐHistoryActionListOrder(ctx context.Context, v any) (*models1.HistoryActionListOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputHistoryActionListOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOID642ᚕuint64ᚄ(ctx context.Context, v any) ([]uint64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]uint64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID642uint64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOID642ᚕuint64ᚄ(ctx context.Context, sel ast.SelectionSet, v []uint64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID642uint64(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOID642ᚖuint64(ctx context.Context, v any) (*uint64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := types.UnmarshalID64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID642ᚖuint64(ctx context.Context, sel ast.SelectionSet, v *uint64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := types.MarshalID64(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚕintᚄ(ctx context.Context, v any) ([]int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v any) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) unmarshalOInt642ᚕint64ᚄ(ctx context.Context, v any) ([]int64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]int64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt642int64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt642ᚕint64ᚄ(ctx context.Context, sel ast.SelectionSet, v []int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt642int64(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOJSON2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋtypesᚐJSON(ctx context.Context, v any) (*types.JSON, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(types.JSON)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJSON2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋtypesᚐJSON(ctx context.Context, sel ast.SelectionSet, v *types.JSON) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOMember2ᚕᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐMemberᚄ(ctx context.Context, sel ast.SelectionSet, v []*models1.Member) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMember2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐMember(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOMember2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐMember(ctx context.Context, sel ast.SelectionSet, v *models1.Member) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Member(ctx, sel, v)
}

func (ec *executionContext) marshalOMemberConnection2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋconnectorsᚐCollectionConnection(ctx context.Context, sel ast.SelectionSet, v *connectors.CollectionConnection[models1.Member, models1.MemberEdge]) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MemberConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOMemberEdge2ᚕᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐMemberEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models1.MemberEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMemberEdge2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐMemberEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOMemberListFilter2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐMemberListFilter(ctx context.Context, v any) (*models1.MemberListFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMemberListFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOMemberListOrder2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐMemberListOrder(ctx context.Context, v any) (*models1.MemberListOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMemberListOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalONullableJSON2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋtypesᚐNullableJSON(ctx context.Context, v any) (*types.NullableJSON, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(types.NullableJSON)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONullableJSON2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋtypesᚐNullableJSON(ctx context.Context, sel ast.SelectionSet, v *types.NullableJSON) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOOS2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐOsᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.Os) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOS2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐOs(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOOS2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐOs(ctx context.Context, sel ast.SelectionSet, v *models.Os) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OS(ctx, sel, v)
}

func (ec *executionContext) marshalOOSConnection2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋconnectorsᚐCollectionConnection(ctx context.Context, sel ast.SelectionSet, v *connectors.CollectionConnection[models.Os, models.OSEdge]) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OSConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOOSEdge2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐOSEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.OSEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOSEdge2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐOSEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOOSListFilter2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐOSListFilter(ctx context.Context, v any) (*models.OSListFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputOSListFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOSPayload2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐOSPayload(ctx context.Context, sel ast.SelectionSet, v *models.OSPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OSPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOOption2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOption(ctx context.Context, sel ast.SelectionSet, v *models1.Option) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Option(ctx, sel, v)
}

func (ec *executionContext) marshalOOptionConnection2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋconnectorsᚐCollectionConnection(ctx context.Context, sel ast.SelectionSet, v *connectors.CollectionConnection[models1.Option, models1.OptionEdge]) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OptionConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalOOptionListFilter2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOptionListFilter(ctx context.Context, v any) (*models1.OptionListFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputOptionListFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOOptionListOrder2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOptionListOrder(ctx context.Context, v any) (*models1.OptionListOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputOptionListOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOOptionType2ᚕgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOptionTypeᚄ(ctx context.Context, v any) ([]models1.OptionType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]models1.OptionType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNOptionType2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOptionType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOOptionType2ᚕgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOptionTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []models1.OptionType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOptionType2githubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOptionType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx context.Context, v any) (*models1.Ordering, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models1.Ordering)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOrdering2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐOrdering(ctx context.Context, sel ast.SelectionSet, v *models1.Ordering) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOPage2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐPage(ctx context.Context, v any) (*models1.Page, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPage(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPlatformType2ᚕgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐPlatformTypeᚄ(ctx context.Context, v any) ([]models.PlatformType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]models.PlatformType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPlatformType2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐPlatformType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOPlatformType2ᚕgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐPlatformTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []models.PlatformType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPlatformType2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐPlatformType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOPlatformType2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐPlatformType(ctx context.Context, v any) (*models.PlatformType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models.PlatformType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPlatformType2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐPlatformType(ctx context.Context, sel ast.SelectionSet, v *models.PlatformType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOPrivateStatus2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐPrivateStatus(ctx context.Context, v any) (*models.PrivateStatus, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models.PrivateStatus)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPrivateStatus2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐPrivateStatus(ctx context.Context, sel ast.SelectionSet, v *models.PrivateStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOProfileMessanger2ᚕᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐProfileMessangerᚄ(ctx context.Context, sel ast.SelectionSet, v []*models1.ProfileMessanger) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProfileMessanger2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐProfileMessanger(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalORBACPermission2ᚕᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐRBACPermissionᚄ(ctx context.Context, sel ast.SelectionSet, v []*models1.RBACPermission) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRBACPermission2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐRBACPermission(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalORBACRole2ᚕᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐRBACRoleᚄ(ctx context.Context, sel ast.SelectionSet, v []*models1.RBACRole) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRBACRole2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐRBACRole(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalORBACRole2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐRBACRole(ctx context.Context, sel ast.SelectionSet, v *models1.RBACRole) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RBACRole(ctx, sel, v)
}

func (ec *executionContext) marshalORBACRoleConnection2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋconnectorsᚐCollectionConnection(ctx context.Context, sel ast.SelectionSet, v *connectors.CollectionConnection[models1.RBACRole, models1.RBACRoleEdge]) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RBACRoleConnection(ctx, sel, v)
}

func (ec *executionContext) marshalORBACRoleEdge2ᚕᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐRBACRoleEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models1.RBACRoleEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRBACRoleEdge2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐRBACRoleEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalORBACRoleListFilter2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐRBACRoleListFilter(ctx context.Context, v any) (*models1.RBACRoleListFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRBACRoleListFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalORBACRoleListOrder2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐRBACRoleListOrder(ctx context.Context, v any) (*models1.RBACRoleListOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRBACRoleListOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalORTBRequestFormatType2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐRTBRequestFormatType(ctx context.Context, v any) (*models.RTBRequestFormatType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models.RTBRequestFormatType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORTBRequestFormatType2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐRTBRequestFormatType(ctx context.Context, sel ast.SelectionSet, v *models.RTBRequestFormatType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalORTBSourceConnection2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋconnectorsᚐCollectionConnection(ctx context.Context, sel ast.SelectionSet, v *connectors.CollectionConnection[models.RTBSource, models.RTBSourceEdge]) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RTBSourceConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalORTBSourceListFilter2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐRTBSourceListFilter(ctx context.Context, v any) (*models.RTBSourceListFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRTBSourceListFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalORTBSourceListOrder2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐRTBSourceListOrder(ctx context.Context, v any) (*models.RTBSourceListOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRTBSourceListOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORTBSourcePayload2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐRTBSourcePayload(ctx context.Context, sel ast.SelectionSet, v *models.RTBSourcePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RTBSourcePayload(ctx, sel, v)
}

func (ec *executionContext) marshalOSocialAccount2ᚕᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐSocialAccountᚄ(ctx context.Context, sel ast.SelectionSet, v []*models1.SocialAccount) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSocialAccount2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐSocialAccount(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOSocialAccount2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐSocialAccount(ctx context.Context, sel ast.SelectionSet, v *models1.SocialAccount) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SocialAccount(ctx, sel, v)
}

func (ec *executionContext) marshalOSocialAccountEdge2ᚕᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐSocialAccountEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models1.SocialAccountEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSocialAccountEdge2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐSocialAccountEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOSocialAccountListFilter2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐSocialAccountListFilter(ctx context.Context, v any) (*models1.SocialAccountListFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSocialAccountListFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSocialAccountListOrder2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐSocialAccountListOrder(ctx context.Context, v any) (*models1.SocialAccountListOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSocialAccountListOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSocialAccountSession2ᚕᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐSocialAccountSessionᚄ(ctx context.Context, sel ast.SelectionSet, v []*models1.SocialAccountSession) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSocialAccountSession2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐSocialAccountSession(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOStatisticAdItem2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐStatisticAdItemᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.StatisticAdItem) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNStatisticAdItem2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐStatisticAdItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOStatisticAdKeyCondition2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐStatisticAdKeyConditionᚄ(ctx context.Context, v any) ([]*models.StatisticAdKeyCondition, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*models.StatisticAdKeyCondition, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNStatisticAdKeyCondition2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐStatisticAdKeyCondition(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOStatisticAdKeyOrder2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐStatisticAdKeyOrderᚄ(ctx context.Context, v any) ([]*models.StatisticAdKeyOrder, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*models.StatisticAdKeyOrder, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNStatisticAdKeyOrder2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐStatisticAdKeyOrder(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOStatisticAdListFilter2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐStatisticAdListFilter(ctx context.Context, v any) (*models.StatisticAdListFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputStatisticAdListFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOStatisticItemKey2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐStatisticItemKeyᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.StatisticItemKey) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNStatisticItemKey2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐStatisticItemKey(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOStatisticKey2ᚕgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐStatisticKeyᚄ(ctx context.Context, v any) ([]models.StatisticKey, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]models.StatisticKey, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNStatisticKey2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐStatisticKey(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOStatisticKey2ᚕgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐStatisticKeyᚄ(ctx context.Context, sel ast.SelectionSet, v []models.StatisticKey) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNStatisticKey2githubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐStatisticKey(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOStatusResponse2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐStatusResponse(ctx context.Context, sel ast.SelectionSet, v *models1.StatusResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._StatusResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v any) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := types.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := types.MarshalTime(*v)
	return res
}

func (ec *executionContext) marshalOTimeZone2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐTimeZoneᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.TimeZone) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTimeZone2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐTimeZone(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOUUID2ᚕgithubᚗcomᚋgoogleᚋuuidᚐUUIDᚄ(ctx context.Context, v any) ([]uuid.UUID, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]uuid.UUID, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOUUID2ᚕgithubᚗcomᚋgoogleᚋuuidᚐUUIDᚄ(ctx context.Context, sel ast.SelectionSet, v []uuid.UUID) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOUser2ᚕᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐUserᚄ(ctx context.Context, sel ast.SelectionSet, v []*models1.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUser2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOUser2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐUser(ctx context.Context, sel ast.SelectionSet, v *models1.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalOUserConnection2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋconnectorsᚐCollectionConnection(ctx context.Context, sel ast.SelectionSet, v *connectors.CollectionConnection[models1.User, models1.UserEdge]) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOUserEdge2ᚕᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐUserEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models1.UserEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserEdge2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐUserEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOUserInput2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐUserInput(ctx context.Context, v any) (*models1.UserInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUserListFilter2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐUserListFilter(ctx context.Context, v any) (*models1.UserListFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserListFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUserListOrder2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋmodelsᚐUserListOrder(ctx context.Context, v any) (*models1.UserListOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserListOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOZone2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐZoneᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.Zone) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNZone2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐZone(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOZoneConnection2ᚖgithubᚗcomᚋgeniusrabbitᚋblazeᚑapiᚋserverᚋgraphqlᚋconnectorsᚐCollectionConnection(ctx context.Context, sel ast.SelectionSet, v *connectors.CollectionConnection[models.Zone, models.ZoneEdge]) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ZoneConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOZoneEdge2ᚕᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐZoneEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.ZoneEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNZoneEdge2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐZoneEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOZoneListFilter2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐZoneListFilter(ctx context.Context, v any) (*models.ZoneListFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputZoneListFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOZoneListOrder2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐZoneListOrder(ctx context.Context, v any) (*models.ZoneListOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputZoneListOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOZonePayload2ᚖgithubᚗcomᚋsspserverᚋapiᚋinternalᚋserverᚋgraphqlᚋmodelsᚐZonePayload(ctx context.Context, sel ast.SelectionSet, v *models.ZonePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ZonePayload(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
