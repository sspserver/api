package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"

	"github.com/geniusrabbit/blaze-api/server/graphql/connectors"
	"github.com/geniusrabbit/blaze-api/server/graphql/models"
)

// CreateRole is the resolver for the createRole field.
func (r *mutationResolver) CreateRole(ctx context.Context, input models.RBACRoleInput) (*models.RBACRolePayload, error) {
	return r.roles.CreateRole(ctx, &input)
}

// UpdateRole is the resolver for the updateRole field.
func (r *mutationResolver) UpdateRole(ctx context.Context, id uint64, input models.RBACRoleInput) (*models.RBACRolePayload, error) {
	return r.roles.UpdateRole(ctx, uint64(id), &input)
}

// DeleteRole is the resolver for the deleteRole field.
func (r *mutationResolver) DeleteRole(ctx context.Context, id uint64, msg *string) (*models.RBACRolePayload, error) {
	return r.roles.DeleteRole(ctx, uint64(id), msg)
}

// Role is the resolver for the Role field.
func (r *queryResolver) Role(ctx context.Context, id uint64) (*models.RBACRolePayload, error) {
	return r.roles.Role(ctx, uint64(id))
}

// CheckPermission is the resolver for the checkPermission field.
func (r *queryResolver) CheckPermission(ctx context.Context, name string, key *string, targetID *string, idKey *string) (*string, error) {
	return r.roles.Check(ctx, name, key, targetID, idKey)
}

// ListRoles is the resolver for the listRoles field.
func (r *queryResolver) ListRoles(ctx context.Context, filter *models.RBACRoleListFilter, order *models.RBACRoleListOrder, page *models.Page) (*connectors.CollectionConnection[models.RBACRole, models.RBACRoleEdge], error) {
	return r.roles.ListRoles(ctx, filter, order, page)
}

// ListPermissions is the resolver for the listPermissions field.
func (r *queryResolver) ListPermissions(ctx context.Context, patterns []string) ([]*models.RBACPermission, error) {
	return r.roles.ListPermissions(ctx, patterns)
}

// ListMyPermissions is the resolver for the listMyPermissions field.
func (r *queryResolver) ListMyPermissions(ctx context.Context, patterns []string) ([]*models.RBACPermission, error) {
	return r.roles.ListMyPermissions(ctx, patterns)
}
