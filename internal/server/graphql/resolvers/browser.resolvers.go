package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"

	"github.com/geniusrabbit/blaze-api/server/graphql/connectors"
	models1 "github.com/geniusrabbit/blaze-api/server/graphql/models"
	"github.com/sspserver/api/internal/server/graphql/models"
)

// CreateBrowser is the resolver for the createBrowser field.
func (r *mutationResolver) CreateBrowser(ctx context.Context, input models.BrowserCreateInput) (*models.BrowserPayload, error) {
	return r.browsers.Create(ctx, input)
}

// UpdateBrowser is the resolver for the updateBrowser field.
func (r *mutationResolver) UpdateBrowser(ctx context.Context, id uint64, input models.BrowserUpdateInput) (*models.BrowserPayload, error) {
	return r.browsers.Update(ctx, id, input)
}

// DeleteBrowser is the resolver for the deleteBrowser field.
func (r *mutationResolver) DeleteBrowser(ctx context.Context, id uint64, msg *string) (*models.BrowserPayload, error) {
	return r.browsers.Delete(ctx, id, msg)
}

// Browser is the resolver for the browser field.
func (r *queryResolver) Browser(ctx context.Context, id uint64) (*models.BrowserPayload, error) {
	return r.browsers.Get(ctx, id)
}

// ListBrowsers is the resolver for the listBrowsers field.
func (r *queryResolver) ListBrowsers(ctx context.Context, filter *models.BrowserListFilter, order []*models.BrowserListOrder, page *models1.Page) (*connectors.CollectionConnection[models.Browser, models.BrowserEdge], error) {
	return r.browsers.List(ctx, filter, order, page)
}
