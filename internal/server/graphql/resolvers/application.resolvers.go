package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"

	"github.com/geniusrabbit/blaze-api/server/graphql/connectors"
	models1 "github.com/geniusrabbit/blaze-api/server/graphql/models"
	"github.com/sspserver/api/internal/server/graphql/models"
)

// CreateApplication is the resolver for the createApplication field.
func (r *mutationResolver) CreateApplication(ctx context.Context, input models.ApplicationCreateInput) (*models.ApplicationPayload, error) {
	return r.app.Create(ctx, input)
}

// UpdateApplication is the resolver for the updateApplication field.
func (r *mutationResolver) UpdateApplication(ctx context.Context, id uint64, input models.ApplicationUpdateInput) (*models.ApplicationPayload, error) {
	return r.app.Update(ctx, id, input)
}

// DeleteApplication is the resolver for the deleteApplication field.
func (r *mutationResolver) DeleteApplication(ctx context.Context, id uint64, msg *string) (*models.ApplicationPayload, error) {
	return r.app.Delete(ctx, id, msg)
}

// RunApplication is the resolver for the runApplication field.
func (r *mutationResolver) RunApplication(ctx context.Context, id uint64, msg *string) (*models1.StatusResponse, error) {
	return r.app.Run(ctx, id, msg)
}

// PauseApplication is the resolver for the pauseApplication field.
func (r *mutationResolver) PauseApplication(ctx context.Context, id uint64, msg *string) (*models1.StatusResponse, error) {
	return r.app.Pause(ctx, id, msg)
}

// ApproveApplication is the resolver for the approveApplication field.
func (r *mutationResolver) ApproveApplication(ctx context.Context, id uint64, msg *string) (*models1.StatusResponse, error) {
	return r.app.Approve(ctx, id, msg)
}

// RejectApplication is the resolver for the rejectApplication field.
func (r *mutationResolver) RejectApplication(ctx context.Context, id uint64, msg *string) (*models1.StatusResponse, error) {
	return r.app.Reject(ctx, id, msg)
}

// Application is the resolver for the application field.
func (r *queryResolver) Application(ctx context.Context, id uint64) (*models.ApplicationPayload, error) {
	return r.app.Get(ctx, id)
}

// ListApplications is the resolver for the listApplications field.
func (r *queryResolver) ListApplications(ctx context.Context, filter *models.ApplicationListFilter, order *models.ApplicationListOrder, page *models1.Page) (*connectors.CollectionConnection[models.Application, models.ApplicationEdge], error) {
	return r.app.List(ctx, filter, order, page)
}
