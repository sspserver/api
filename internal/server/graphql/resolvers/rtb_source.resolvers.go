package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"

	"github.com/geniusrabbit/blaze-api/server/graphql/connectors"
	models1 "github.com/geniusrabbit/blaze-api/server/graphql/models"
	"github.com/sspserver/api/internal/server/graphql/models"
)

// CreateRTBSource is the resolver for the createRTBSource field.
func (r *mutationResolver) CreateRTBSource(ctx context.Context, input models.RTBSourceInput) (*models.RTBSourcePayload, error) {
	return r.rtbsource.Create(ctx, input)
}

// UpdateRTBSource is the resolver for the updateRTBSource field.
func (r *mutationResolver) UpdateRTBSource(ctx context.Context, id uint64, input models.RTBSourceInput) (*models.RTBSourcePayload, error) {
	return r.rtbsource.Update(ctx, id, input)
}

// DeleteRTBSource is the resolver for the deleteRTBSource field.
func (r *mutationResolver) DeleteRTBSource(ctx context.Context, id uint64, msg *string) (*models.RTBSourcePayload, error) {
	return r.rtbsource.Delete(ctx, id, msg)
}

// RunRTBSource is the resolver for the runRTBSource field.
func (r *mutationResolver) RunRTBSource(ctx context.Context, id uint64) (*models1.StatusResponse, error) {
	return r.rtbsource.Run(ctx, id)
}

// PauseRTBSource is the resolver for the pauseRTBSource field.
func (r *mutationResolver) PauseRTBSource(ctx context.Context, id uint64) (*models1.StatusResponse, error) {
	return r.rtbsource.Pause(ctx, id)
}

// ApproveRTBSource is the resolver for the approveRTBSource field.
func (r *mutationResolver) ApproveRTBSource(ctx context.Context, id uint64, msg *string) (*models1.StatusResponse, error) {
	return r.rtbsource.Approve(ctx, id, msg)
}

// RejectRTBSource is the resolver for the rejectRTBSource field.
func (r *mutationResolver) RejectRTBSource(ctx context.Context, id uint64, msg *string) (*models1.StatusResponse, error) {
	return r.rtbsource.Reject(ctx, id, msg)
}

// RTBSource is the resolver for the RTBSource field.
func (r *queryResolver) RTBSource(ctx context.Context, id uint64) (*models.RTBSourcePayload, error) {
	return r.rtbsource.Get(ctx, id)
}

// ListRTBSources is the resolver for the listRTBSources field.
func (r *queryResolver) ListRTBSources(ctx context.Context, filter *models.RTBSourceListFilter, order *models.RTBSourceListOrder, page *models1.Page) (*connectors.CollectionConnection[models.RTBSource, models.RTBSourceEdge], error) {
	return r.rtbsource.List(ctx, filter, order, page)
}
