package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.63

import (
	"context"

	"github.com/geniusrabbit/blaze-api/server/graphql/connectors"
	models1 "github.com/geniusrabbit/blaze-api/server/graphql/models"
	"github.com/sspserver/api/internal/server/graphql/models"
)

// CreateFormat is the resolver for the createFormat field.
func (r *mutationResolver) CreateFormat(ctx context.Context, input models.AdFormatInput) (*models.AdFormatPayload, error) {
	return r.adformat.Create(ctx, input)
}

// UpdateFormat is the resolver for the updateFormat field.
func (r *mutationResolver) UpdateFormat(ctx context.Context, id uint64, input models.AdFormatInput) (*models.AdFormatPayload, error) {
	return r.adformat.Update(ctx, id, input)
}

// DeleteFormat is the resolver for the deleteFormat field.
func (r *mutationResolver) DeleteFormat(ctx context.Context, id uint64, codename string, msg *string) (*models.AdFormatPayload, error) {
	return r.adformat.Delete(ctx, id, codename, msg)
}

// Format is the resolver for the format field.
func (r *queryResolver) Format(ctx context.Context, id uint64, codename string) (*models.AdFormatPayload, error) {
	return r.adformat.Get(ctx, id, codename)
}

// ListFormats is the resolver for the listFormats field.
func (r *queryResolver) ListFormats(ctx context.Context, filter *models.AdFormatListFilter, order *models.AdFormatListOrder, page *models1.Page) (*connectors.CollectionConnection[models.AdFormat, models.AdFormatEdge], error) {
	return r.adformat.List(ctx, filter, order, page)
}
