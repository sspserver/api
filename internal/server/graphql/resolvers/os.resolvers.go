package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.63

import (
	"context"

	"github.com/geniusrabbit/blaze-api/server/graphql/connectors"
	models1 "github.com/geniusrabbit/blaze-api/server/graphql/models"
	"github.com/sspserver/api/internal/server/graphql/models"
)

// CreateOs is the resolver for the createOS field.
func (r *mutationResolver) CreateOs(ctx context.Context, input models.OSInput) (*models.OSPayload, error) {
	return r.os.Create(ctx, input)
}

// UpdateOs is the resolver for the updateOS field.
func (r *mutationResolver) UpdateOs(ctx context.Context, id uint64, input models.OSInput) (*models.OSPayload, error) {
	return r.os.Update(ctx, id, input)
}

// DeleteOs is the resolver for the deleteOS field.
func (r *mutationResolver) DeleteOs(ctx context.Context, id uint64, msg *string) (*models.OSPayload, error) {
	return r.os.Delete(ctx, id, msg)
}

// Os is the resolver for the OS field.
func (r *queryResolver) Os(ctx context.Context, id uint64) (*models.OSPayload, error) {
	return r.os.Get(ctx, id)
}

// ListOs is the resolver for the listOS field.
func (r *queryResolver) ListOs(ctx context.Context, filter *models.OSListFilter, order *models.OSListOrder, page *models1.Page) (*connectors.CollectionConnection[models.Os, models.OSEdge], error) {
	return r.os.List(ctx, filter, order, page)
}
