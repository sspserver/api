package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"

	"github.com/geniusrabbit/blaze-api/server/graphql/connectors"
	models1 "github.com/geniusrabbit/blaze-api/server/graphql/models"
	"github.com/sspserver/api/internal/server/graphql/models"
)

// CreateZone is the resolver for the createZone field.
func (r *mutationResolver) CreateZone(ctx context.Context, input models.ZoneInput) (*models.ZonePayload, error) {
	return r.zone.Create(ctx, input)
}

// UpdateZone is the resolver for the updateZone field.
func (r *mutationResolver) UpdateZone(ctx context.Context, id uint64, input models.ZoneInput) (*models.ZonePayload, error) {
	return r.zone.Update(ctx, id, input)
}

// DeleteZone is the resolver for the deleteZone field.
func (r *mutationResolver) DeleteZone(ctx context.Context, id uint64, msg *string) (*models.ZonePayload, error) {
	return r.zone.Delete(ctx, id, msg)
}

// ActivateZone is the resolver for the activateZone field.
func (r *mutationResolver) ActivateZone(ctx context.Context, id uint64, msg *string) (*models1.StatusResponse, error) {
	return r.zone.Run(ctx, id, msg)
}

// DeactivateZone is the resolver for the deactivateZone field.
func (r *mutationResolver) DeactivateZone(ctx context.Context, id uint64, msg *string) (*models1.StatusResponse, error) {
	return r.zone.Pause(ctx, id, msg)
}

// ApproveZone is the resolver for the approveZone field.
func (r *mutationResolver) ApproveZone(ctx context.Context, id uint64, msg *string) (*models1.StatusResponse, error) {
	return r.zone.Approve(ctx, id, msg)
}

// RejectZone is the resolver for the rejectZone field.
func (r *mutationResolver) RejectZone(ctx context.Context, id uint64, msg *string) (*models1.StatusResponse, error) {
	return r.zone.Reject(ctx, id, msg)
}

// Zone is the resolver for the zone field.
func (r *queryResolver) Zone(ctx context.Context, id uint64) (*models.ZonePayload, error) {
	return r.zone.Get(ctx, id)
}

// ListZones is the resolver for the listZones field.
func (r *queryResolver) ListZones(ctx context.Context, filter *models.ZoneListFilter, order *models.ZoneListOrder, page *models1.Page) (*connectors.CollectionConnection[models.Zone, models.ZoneEdge], error) {
	return r.zone.List(ctx, filter, order, page)
}
