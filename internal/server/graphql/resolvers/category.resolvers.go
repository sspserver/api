package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.63

import (
	"context"

	"github.com/geniusrabbit/blaze-api/server/graphql/connectors"
	models1 "github.com/geniusrabbit/blaze-api/server/graphql/models"
	"github.com/sspserver/api/internal/server/graphql/models"
)

// CreateCategory is the resolver for the createCategory field.
func (r *mutationResolver) CreateCategory(ctx context.Context, input models.CategoryInput) (*models.CategoryPayload, error) {
	return r.catergories.Create(ctx, input)
}

// UpdateCategory is the resolver for the updateCategory field.
func (r *mutationResolver) UpdateCategory(ctx context.Context, id uint64, input models.CategoryInput) (*models.CategoryPayload, error) {
	return r.catergories.Update(ctx, id, input)
}

// DeleteCategory is the resolver for the deleteCategory field.
func (r *mutationResolver) DeleteCategory(ctx context.Context, id uint64, msg *string) (*models.CategoryPayload, error) {
	return r.catergories.Delete(ctx, id, msg)
}

// Category is the resolver for the category field.
func (r *queryResolver) Category(ctx context.Context, id uint64) (*models.CategoryPayload, error) {
	return r.catergories.Get(ctx, id)
}

// ListCategories is the resolver for the listCategories field.
func (r *queryResolver) ListCategories(ctx context.Context, filter *models.CategoryListFilter, order *models.CategoryListOrder, page *models1.Page) (*connectors.CollectionConnection[models.Category, models.CategoryEdge], error) {
	return r.catergories.List(ctx, filter, order, page)
}
