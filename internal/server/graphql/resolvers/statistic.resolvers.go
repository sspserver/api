package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.63

import (
	"context"
	"fmt"

	gocast "github.com/demdxx/gocast/v2"
	"github.com/geniusrabbit/blaze-api/server/graphql/connectors"
	models1 "github.com/geniusrabbit/blaze-api/server/graphql/models"
	"github.com/sspserver/api/internal/server/graphql/generated"
	models2 "github.com/sspserver/api/internal/server/graphql/models"
)

// StatisticAdList is the resolver for the statisticAdList field.
func (r *queryResolver) StatisticAdList(ctx context.Context, filter *models2.StatisticAdListFilter, group []models2.StatisticKey, order []*models2.StatisticAdKeyOrder, page *models1.Page) (*connectors.CollectionConnection[models2.StatisticAdItem, struct{}], error) {
	return r.statistic.Statistic(ctx, filter, group, order, page)
}

// Text is the resolver for the text field.
func (r *statisticItemKeyResolver) Text(ctx context.Context, obj *models2.StatisticItemKey) (string, error) {
	if obj == nil || gocast.IsEmpty(obj.Value) {
		return "", nil
	}
	if obj.Text != "" {
		return obj.Text, nil
	}

	switch obj.Key {
	case models2.StatisticKeySourceID:
		src, err := r.Resolver.rtbsource.Get(ctx, gocast.Uint64(obj.Value))
		if err != nil {
			return "", err
		}
		if src == nil || src.Source == nil || src.Source.Title == "" {
			return fmt.Sprintf("Source #%d", gocast.Uint64(obj.Value)), err
		}
		return src.Source.Title, nil
	case models2.StatisticKeyAppID:
		app, err := r.Resolver.app.Get(ctx, gocast.Uint64(obj.Value))
		if err != nil {
			return "", err
		}
		if app == nil || app.Application == nil || app.Application.Title == "" {
			return fmt.Sprintf("App #%d", gocast.Uint64(obj.Value)), nil
		}
		return app.Application.Title, nil
	case models2.StatisticKeyZoneID:
		zone, err := r.Resolver.zone.Get(ctx, gocast.Uint64(obj.Value))
		if err != nil {
			return "", err
		}
		if zone == nil || zone.Zone == nil || zone.Zone.Title == "" {
			return fmt.Sprintf("Zone #%d", gocast.Uint64(obj.Value)), nil
		}
		return zone.Zone.Title, nil
	case models2.StatisticKeyFormatID:
		format, err := r.Resolver.adformat.Get(ctx, gocast.Uint64(obj.Value), "")
		if err != nil {
			return "", err
		}
		if format == nil || format.Format == nil || format.Format.Title == "" {
			return fmt.Sprintf("Format #%d", gocast.Uint64(obj.Value)), nil
		}
		return format.Format.Title, nil
	}
	return obj.Text, nil
}

// StatisticItemKey returns generated.StatisticItemKeyResolver implementation.
func (r *Resolver) StatisticItemKey() generated.StatisticItemKeyResolver {
	return &statisticItemKeyResolver{r}
}

type statisticItemKeyResolver struct{ *Resolver }
