// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	model "github.com/geniusrabbit/blaze-api/model"
	gomock "github.com/golang/mock/gomock"
)

// Mockcacher is a mock of cacher interface.
type Mockcacher struct {
	ctrl     *gomock.Controller
	recorder *MockcacherMockRecorder
}

// MockcacherMockRecorder is the mock recorder for Mockcacher.
type MockcacherMockRecorder struct {
	mock *Mockcacher
}

// NewMockcacher creates a new mock instance.
func NewMockcacher(ctrl *gomock.Controller) *Mockcacher {
	mock := &Mockcacher{ctrl: ctrl}
	mock.recorder = &MockcacherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockcacher) EXPECT() *MockcacherMockRecorder {
	return m.recorder
}

// Del mocks base method.
func (m *Mockcacher) Del(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockcacherMockRecorder) Del(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*Mockcacher)(nil).Del), ctx, key)
}

// Get mocks base method.
func (m *Mockcacher) Get(ctx context.Context, key string, target any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key, target)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockcacherMockRecorder) Get(ctx, key, target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*Mockcacher)(nil).Get), ctx, key, target)
}

// Set mocks base method.
func (m *Mockcacher) Set(ctx context.Context, key string, value any, lifetime time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, lifetime)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockcacherMockRecorder) Set(ctx, key, value, lifetime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*Mockcacher)(nil).Set), ctx, key, value, lifetime)
}

// MockuserAccessor is a mock of userAccessor interface.
type MockuserAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockuserAccessorMockRecorder
}

// MockuserAccessorMockRecorder is the mock recorder for MockuserAccessor.
type MockuserAccessorMockRecorder struct {
	mock *MockuserAccessor
}

// NewMockuserAccessor creates a new mock instance.
func NewMockuserAccessor(ctrl *gomock.Controller) *MockuserAccessor {
	mock := &MockuserAccessor{ctrl: ctrl}
	mock.recorder = &MockuserAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserAccessor) EXPECT() *MockuserAccessorMockRecorder {
	return m.recorder
}

// GetByPassword mocks base method.
func (m *MockuserAccessor) GetByPassword(ctx context.Context, email, password string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPassword", ctx, email, password)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPassword indicates an expected call of GetByPassword.
func (mr *MockuserAccessorMockRecorder) GetByPassword(ctx, email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPassword", reflect.TypeOf((*MockuserAccessor)(nil).GetByPassword), ctx, email, password)
}
