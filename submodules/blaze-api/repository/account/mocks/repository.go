// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/geniusrabbit/blaze-api/model"
	repository "github.com/geniusrabbit/blaze-api/repository"
	account "github.com/geniusrabbit/blaze-api/repository/account"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockRepository) Count(ctx context.Context, filter *account.Filter) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, filter)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockRepositoryMockRecorder) Count(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockRepository)(nil).Count), ctx, filter)
}

// CountMembers mocks base method.
func (m *MockRepository) CountMembers(ctx context.Context, filter *account.MemberFilter) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountMembers", ctx, filter)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountMembers indicates an expected call of CountMembers.
func (mr *MockRepositoryMockRecorder) CountMembers(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountMembers", reflect.TypeOf((*MockRepository)(nil).CountMembers), ctx, filter)
}

// Create mocks base method.
func (m *MockRepository) Create(ctx context.Context, account *model.Account) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, account)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(ctx, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), ctx, account)
}

// Delete mocks base method.
func (m *MockRepository) Delete(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), ctx, id)
}

// FetchList mocks base method.
func (m *MockRepository) FetchList(ctx context.Context, filter *account.Filter, order *account.ListOrder, pagination *repository.Pagination) ([]*model.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchList", ctx, filter, order, pagination)
	ret0, _ := ret[0].([]*model.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchList indicates an expected call of FetchList.
func (mr *MockRepositoryMockRecorder) FetchList(ctx, filter, order, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchList", reflect.TypeOf((*MockRepository)(nil).FetchList), ctx, filter, order, pagination)
}

// FetchListMembers mocks base method.
func (m *MockRepository) FetchListMembers(ctx context.Context, filter *account.MemberFilter, order *account.MemberListOrder, pagination *repository.Pagination) ([]*model.AccountMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchListMembers", ctx, filter, order, pagination)
	ret0, _ := ret[0].([]*model.AccountMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchListMembers indicates an expected call of FetchListMembers.
func (mr *MockRepositoryMockRecorder) FetchListMembers(ctx, filter, order, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchListMembers", reflect.TypeOf((*MockRepository)(nil).FetchListMembers), ctx, filter, order, pagination)
}

// Get mocks base method.
func (m *MockRepository) Get(ctx context.Context, id uint64) (*model.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*model.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepositoryMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), ctx, id)
}

// GetByTitle mocks base method.
func (m *MockRepository) GetByTitle(ctx context.Context, title string) (*model.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTitle", ctx, title)
	ret0, _ := ret[0].(*model.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTitle indicates an expected call of GetByTitle.
func (mr *MockRepositoryMockRecorder) GetByTitle(ctx, title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTitle", reflect.TypeOf((*MockRepository)(nil).GetByTitle), ctx, title)
}

// IsAdmin mocks base method.
func (m *MockRepository) IsAdmin(ctx context.Context, userID, accountID uint64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAdmin", ctx, userID, accountID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAdmin indicates an expected call of IsAdmin.
func (mr *MockRepositoryMockRecorder) IsAdmin(ctx, userID, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAdmin", reflect.TypeOf((*MockRepository)(nil).IsAdmin), ctx, userID, accountID)
}

// IsMember mocks base method.
func (m *MockRepository) IsMember(ctx context.Context, userID, accountID uint64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMember", ctx, userID, accountID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsMember indicates an expected call of IsMember.
func (mr *MockRepositoryMockRecorder) IsMember(ctx, userID, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMember", reflect.TypeOf((*MockRepository)(nil).IsMember), ctx, userID, accountID)
}

// LinkMember mocks base method.
func (m *MockRepository) LinkMember(ctx context.Context, account *model.Account, isAdmin bool, members ...*model.User) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, account, isAdmin}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LinkMember", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// LinkMember indicates an expected call of LinkMember.
func (mr *MockRepositoryMockRecorder) LinkMember(ctx, account, isAdmin interface{}, members ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, account, isAdmin}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkMember", reflect.TypeOf((*MockRepository)(nil).LinkMember), varargs...)
}

// LoadPermissions mocks base method.
func (m *MockRepository) LoadPermissions(ctx context.Context, account *model.Account, user *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadPermissions", ctx, account, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadPermissions indicates an expected call of LoadPermissions.
func (mr *MockRepositoryMockRecorder) LoadPermissions(ctx, account, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadPermissions", reflect.TypeOf((*MockRepository)(nil).LoadPermissions), ctx, account, user)
}

// Member mocks base method.
func (m *MockRepository) Member(ctx context.Context, userID, accountID uint64) (*model.AccountMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Member", ctx, userID, accountID)
	ret0, _ := ret[0].(*model.AccountMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Member indicates an expected call of Member.
func (mr *MockRepositoryMockRecorder) Member(ctx, userID, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Member", reflect.TypeOf((*MockRepository)(nil).Member), ctx, userID, accountID)
}

// MemberByID mocks base method.
func (m *MockRepository) MemberByID(ctx context.Context, id uint64) (*model.AccountMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemberByID", ctx, id)
	ret0, _ := ret[0].(*model.AccountMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemberByID indicates an expected call of MemberByID.
func (mr *MockRepositoryMockRecorder) MemberByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemberByID", reflect.TypeOf((*MockRepository)(nil).MemberByID), ctx, id)
}

// SetMemberRoles mocks base method.
func (m *MockRepository) SetMemberRoles(ctx context.Context, account *model.Account, member *model.User, roles ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, account, member}
	for _, a := range roles {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetMemberRoles", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMemberRoles indicates an expected call of SetMemberRoles.
func (mr *MockRepositoryMockRecorder) SetMemberRoles(ctx, account, member interface{}, roles ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, account, member}, roles...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMemberRoles", reflect.TypeOf((*MockRepository)(nil).SetMemberRoles), varargs...)
}

// UnlinkMember mocks base method.
func (m *MockRepository) UnlinkMember(ctx context.Context, account *model.Account, members ...*model.User) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, account}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnlinkMember", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlinkMember indicates an expected call of UnlinkMember.
func (mr *MockRepositoryMockRecorder) UnlinkMember(ctx, account interface{}, members ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, account}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlinkMember", reflect.TypeOf((*MockRepository)(nil).UnlinkMember), varargs...)
}

// Update mocks base method.
func (m *MockRepository) Update(ctx context.Context, id uint64, account *model.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(ctx, id, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), ctx, id, account)
}
