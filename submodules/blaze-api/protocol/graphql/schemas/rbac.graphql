type RBACPermission {
  name:   String!
  object: String!
  access: String!
  fullname: String!
  description: String
}

"""
A role is a collection of permissions. A role can be a child of another role.
"""
type RBACRole {
	ID:       ID64!
	name:     String!
	title:    String!

  description: String

  """
  Context is a JSON object that defines the context of the role.
  The context is used to determine whether the role is applicable to the object.
  The context is a JSON object with the following structure:

	{"cover": "system", "object": "role"}

  where:
	"cover" - is a name of the cover area of the object type
	"object" - is a name of the object type <module>:<object-name>
  """
	context:  NullableJSON

	childRoles: [RBACRole!]
  permissions: [RBACPermission!]
  permissionPatterns: [String!]

  createdAt: Time!
  updatedAt: Time!
	deletedAt: Time
}

"""
RBACRoleEdge is a connection edge type for RBACRole.
"""
type RBACRoleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RBACRole
}

"""
RBACRoleConnection implements collection accessor interface with pagination.
"""
type RBACRoleConnection {
  """
  The total number of campaigns
  """
  totalCount: Int!

  """
  The edges for each of the RBACRoles's lists
  """
  edges: [RBACRoleEdge!]

  """
  A list of the RBACRoles, as a convenience when edges are not needed.
  """
  list: [RBACRole!]

  """
  Information for paginating this connection
  """
  pageInfo: PageInfo!
}

"""
RBACRolePayload wrapper to access of RBACRole oprtation results
"""
type RBACRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationID: String!

  """
  Role ID operation result
  """
  roleID: ID64!

  """
  Role object accessor
  """
  role: RBACRole
}

###############################################################################
# Query
###############################################################################

input RBACRoleListFilter {
  ID:   [ID64!]
  name: [String!]
}

input RBACRoleListOrder {
  ID:    Ordering
  name:  Ordering
  title: Ordering
}

###############################################################################
# Mutations
###############################################################################

input RBACRoleInput {
  name:        String
  title:       String
  context:     NullableJSON
  permissions: [String!]
}

###############################################################################
# Query declarations
###############################################################################

extend type Query {
  """
  Get RBAC role object by ID
  """
  role(id: ID64!): RBACRolePayload! @hasPermissions(permissions: ["role.view.*"])

  """
  Check if the user has access to the particular role or permission.
  Returns the area of the access or null if access is denied.
  """
  checkPermission(name: String!, key: String = null, targetID: String = null, idKey: String = null): String @hasPermissions(permissions: ["role.check"])

  """
  List of the RBAC role objects which can be filtered and ordered by some fields
  """
  listRoles(
    filter: RBACRoleListFilter = null,
    order: RBACRoleListOrder = null,
    page: Page = null
  ): RBACRoleConnection @hasPermissions(permissions: ["role.list.*"])

  """
  List of the RBAC permissions
  """
  listPermissions(patterns: [String!] = null): [RBACPermission!] @hasPermissions(permissions: ["permission.list"])

  """
  List of the RBAC permissions for the current user
  """
  listMyPermissions(patterns: [String!] = null): [RBACPermission!] @hasPermissions(permissions: ["permission.list"])
}

extend type Mutation {
  """
  Create the new RBAC role
  """
  createRole(input: RBACRoleInput!): RBACRolePayload! @hasPermissions(permissions: ["role.create.*"])

  """
  Update RBAC role info
  """
  updateRole(id: ID64!, input: RBACRoleInput!): RBACRolePayload! @hasPermissions(permissions: ["role.update.*"])

  """
  Delete RBAC role
  """
  deleteRole(id: ID64!, msg: String = null): RBACRolePayload! @hasPermissions(permissions: ["role.delete.*"])
}
