"""
AuthClient object represents an OAuth 2.0 client
"""
type AuthClient {
  """
  ClientID is the client ID which represents unique connection indentificator
  """
	ID: ID!

	# Owner and creator of the auth client
	accountID: ID64!
	userID: ID64!

  """
	Title of the AuthClient as himan readable name
  """
	title: String!

  """
	Secret is the client's secret. The secret will be included in the create request as cleartext, and then
	never again. The secret is stored using BCrypt so it is impossible to recover it. Tell your users
	that they need to write the secret down as it will not be made available again.
  """
	secret: String!

  """
	RedirectURIs is an array of allowed redirect urls for the client, for example http://mydomain/oauth/callback .
  """
	redirectURIs: [String!]

  """
	GrantTypes is an array of grant types the client is allowed to use.

	Pattern: client_credentials|authorization_code|implicit|refresh_token
  """
	grantTypes: [String!]

  """
	ResponseTypes is an array of the OAuth 2.0 response type strings that the client can
	use at the authorization endpoint.
	
	Pattern: id_token|code|token
  """
	responseTypes: [String!]

  """
	Scope is a string containing a space-separated list of scope values (as
	described in Section 3.3 of OAuth 2.0 [RFC6749]) that the client
	can use when requesting access tokens.
	
	Pattern: ([a-zA-Z0-9\.\*]+\s?)+
  """
	scope: String!

  """
	Audience is a whitelist defining the audiences this client is allowed to request tokens for. An audience limits
	the applicability of an OAuth 2.0 Access Token to, for example, certain API endpoints. The value is a list
	of URLs. URLs MUST NOT contain whitespaces.
  """
	audience: [String!]

  """
	SubjectType requested for responses to this Client. The subject_types_supported Discovery parameter contains a
	list of the supported subject_type values for this server. Valid types include `pairwise` and `public`.
  """
	subjectType: String!

  """
	AllowedCORSOrigins are one or more URLs (scheme://host[:port]) which are allowed to make CORS requests
	to the /oauth/token endpoint. If this array is empty, the sever's CORS origin configuration (`CORS_ALLOWED_ORIGINS`)
	will be used instead. If this array is set, the allowed origins are appended to the server's CORS origin configuration.
	Be aware that environment variable `CORS_ENABLED` MUST be set to `true` for this to work.
  """
	allowedCORSOrigins: [String!]

  """
	Public flag tells that the client is public
  """
	public: Boolean!

  """
	ExpiresAt contins the time of expiration of the client
  """
	expiresAt: Time!

  createdAt: Time!
  updatedAt: Time!
	deletedAt: Time
}

type AuthClientEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: AuthClient
}

"""
AuthClientConnection implements collection accessor interface with pagination.
"""
type AuthClientConnection {
  """
  The total number of campaigns
  """
  totalCount: Int!

  """
  The edges for each of the AuthClient's lists
  """
  edges: [AuthClientEdge!]

  """
  A list of the AuthClient's, as a convenience when edges are not needed.
  """
  list: [AuthClient!]

  """
  Information for paginating this connection
  """
  pageInfo: PageInfo!
}

"""
AuthClientPayload wrapper to access of AuthClient oprtation results
"""
type AuthClientPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationID: String!

  """
  AuthClient ID operation result
  """
  authClientID: ID!

  """
  AuthClient object accessor
  """
  authClient: AuthClient
}

"""
SessionToken object represents an OAuth 2.0 / JWT session token
"""
type SessionToken {
  token: String!
  expiresAt: Time!
  isAdmin: Boolean!
  roles: [String!]
}

###############################################################################
# Query
###############################################################################

input AuthClientListFilter {
  ID: [String!]
  userID: [ID64!]
  accountID: [ID64!]
  public: Boolean
}

input AuthClientListOrder {
  ID:                 Ordering
  userID:             Ordering
  accountID:          Ordering
  title:              Ordering
  public:             Ordering
  lastUpdate:         Ordering
}

###############################################################################
# Mutations
###############################################################################

input AuthClientInput {
	accountID: ID64
	userID: ID64
	title: String
	secret: String
	redirectURIs: [String!]
	grantTypes: [String!]
	responseTypes: [String!]
	scope: String
	audience: [String!]
	subjectType: String!
	allowedCORSOrigins: [String!]
	public: Boolean
	expiresAt: Time
}

###############################################################################
# Query and Mutations
###############################################################################

extend type Query {
  """
  Get auth client object by ID
  """
  authClient(id: ID!): AuthClientPayload! @hasPermissions(permissions: ["auth_client.view.*"])

  """
  List of the auth client objects which can be filtered and ordered by some fields
  """
  listAuthClients(
    filter: AuthClientListFilter = null,
    order: AuthClientListOrder = null,
    page: Page = null
  ): AuthClientConnection @hasPermissions(permissions: ["auth_client.list.*"])
}

extend type Mutation {
  """
  Create the new auth client
  """
  createAuthClient(input: AuthClientInput!): AuthClientPayload! @hasPermissions(permissions: ["auth_client.create.*"])

  """
  Update auth client info
  """
  updateAuthClient(id: ID!, input: AuthClientInput!): AuthClientPayload! @hasPermissions(permissions: ["auth_client.update.*"])

  """
  Delete auth client
  """
  deleteAuthClient(id: ID!, msg: String = null): AuthClientPayload! @hasPermissions(permissions: ["auth_client.delete.*"])
}
