"""
Account is a company account that can be used to login to the system.
"""
type Account {
  """
  The primary key of the Account
  """
  ID: ID64!

  """
  Status of Account active
  """
  status: ApproveStatus!

  """
  Message which defined during user approve/rejection process
  """
  statusMessage: String

  title: String!
  description: String!

  """
	logoURI is an URL string that references a logo for the client.
  """
	logoURI: String!

  """
	policyURI is a URL string that points to a human-readable privacy policy document
	that describes how the deployment organization collects, uses,
	retains, and discloses personal data.
  """
	policyURI: String!

  """
	termsOfServiceURI is a URL string that points to a human-readable terms of service
	document for the client that describes a contractual relationship
	between the end-user and the client that the end-user accepts when
	authorizing the client.
  """
	termsOfServiceURI: String!

  """
	clientURI is an URL string of a web page providing information about the client.
	If present, the server SHOULD display this URL to the end-user in
	a clickable fashion.
  """
	clientURI: String!

  """
	contacts is a array of strings representing ways to contact people responsible
	for this client, typically email addresses.
  """
	contacts: [String!]

  createdAt: Time!
  updatedAt: Time!
}

type AccountEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Account
}

"""
AccountConnection implements collection accessor interface with pagination.
"""
type AccountConnection {
  """
  The total number of campaigns
  """
  totalCount: Int!

  """
  The edges for each of the account's lists
  """
  edges: [AccountEdge!]

  """
  A list of the accounts, as a convenience when edges are not needed.
  """
  list: [Account!]

  """
  Information for paginating this connection
  """
  pageInfo: PageInfo!
}

"""
AccountPayload wrapper to access of Account oprtation results
"""
type AccountPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationID: String!

  """
  Account ID operation result
  """
  accountID: ID64!

  """
  Account object accessor
  """
  account: Account
}

###############################################################################
# Query
###############################################################################

input AccountListFilter {
  ID: [ID64!]
  UserID: [ID64!]
  title: [String!]
  status: [ApproveStatus!]
}

input AccountListOrder {
  ID: Ordering
  title: Ordering
  status: Ordering
}

###############################################################################
# Mutations
###############################################################################

input AccountInput {
  status: ApproveStatus
  title: String
  description: String
	logoURI: String
	policyURI: String
	termsOfServiceURI: String
	clientURI: String
	contacts: [String!]
}

input AccountCreateInput {
  ownerID:  ID64
  owner:    UserInput
  account:  AccountInput!
  password: String!
}

type AccountCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationID: String!

  """
  The account object
  """
  account: Account!

  """
  The user object
  """
  owner: User!
}

###############################################################################
# Query declarations
###############################################################################

extend type Query {
  """
  Current session from the token
  """
  currentSession: SessionToken! @hasPermissions(permissions: ["account.view.*"])

  """
  Current account from the session
  """
  currentAccount: AccountPayload! @hasPermissions(permissions: ["account.view.*"])

  """
  Get account object by ID
  """
  account(id: ID64!): AccountPayload! @hasPermissions(permissions: ["account.view.*"])

  """
  List of the account objects which can be filtered and ordered by some fields
  """
  listAccounts(
    filter: AccountListFilter = null,
    order: AccountListOrder = null,
    page: Page = null
  ): AccountConnection @hasPermissions(permissions: ["account.list.*"])

  """
  List of the account roles/permissions
  """
  listAccountRolesAndPermissions(accountID: ID64!, order: RBACRoleListOrder = null): RBACRoleConnection @hasPermissions(permissions: ["account.view.*"])
}

extend type Mutation {
  """
  Login to the system and get the token as JWT session
  """
  login(login: String!, password: String!): SessionToken!

  """
  Logout from the system
  """
  logout: Boolean!

  """
  Switch the account by ID
  """
  switchAccount(id: ID64!): SessionToken!

  """
  Register the new account
  """
  registerAccount(input: AccountCreateInput!): AccountCreatePayload! @hasPermissions(permissions: ["account.register"])

  """
  Update account info
  """
  updateAccount(id: ID64!, input: AccountInput!): AccountPayload! @hasPermissions(permissions: ["account.update.*"])

  """
  Approve account and leave the comment
  """
  approveAccount(id: ID64!, msg: String!): AccountPayload! @hasPermissions(permissions: ["account.approve.*"])

  """
  Reject account and leave the comment
  """
  rejectAccount(id: ID64!, msg: String!): AccountPayload! @hasPermissions(permissions: ["account.reject.*"])
}
