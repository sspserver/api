type SocialAccountSession {
  """
  The unique name of the session to destinguish between different sessions with different scopes
  """
  name: String!
  socialAccountID: ID64!

  tokenType: String!
  accessToken: String!
  refreshToken: String!
  scope: [String!]

  createdAt: Time!
  updatedAt: Time!
  expiresAt: Time
  deletedAt: Time
}

type SocialAccount {
  ID: ID64!
  userID: ID64!

  socialID: String!
  provider: String!
  email: String!
  username: String!

  firstName: String!
  lastName: String!
  avatar: String!
  link: String!

  data: NullableJSON!

  """
  Social Account session object accessor
  """
  sessions: [SocialAccountSession!]

  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
}

type SocialAccountEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SocialAccount
}

"""
SocialAccountConnection implements collection accessor interface with pagination
"""
type SocialAccountConnection {
  """
  The total number of records
  """
  totalCount: Int!

  """
  The edges for each of the social account's lists
  """
  edges: [SocialAccountEdge!]

  """
  A list of the social accounts, as a convenience when edges are not needed.
  """
  list: [SocialAccount!]

  """
  Information for paginating this connection
  """
  pageInfo: PageInfo!
}

"""
SocialAccountPayload wrapper to access of SocialAccount oprtation results
"""
type SocialAccountPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationID: String!

  """
  Social Account ID operation result
  """
  socialAccountID: ID64!

  """
  Social Account object accessor
  """
  socialAccount: SocialAccount
}

###############################################################################
# Query
###############################################################################

input SocialAccountListFilter {
  ID: [ID64!]
  userID: [ID64!]
  provider: [String!]
  username: [String!]
  email: [String!]
}

input SocialAccountListOrder {
  ID: Ordering
  userID: Ordering
  provider: Ordering
  email: Ordering
  username: Ordering
  firstName: Ordering
  lastName: Ordering
}

extend type Query {
  """
  Get a social account by its unique identifier
  """
  socialAccount(
    """
    The unique identifier of the social account
    """
    id: ID64!
  ): SocialAccountPayload! @hasPermissions(permissions: ["account_social.view.*"])

  """
  Get the current user's social accounts
  """
  currentSocialAccounts(
    filter: SocialAccountListFilter = null,
    order: SocialAccountListOrder = null
  ): SocialAccountConnection! @hasPermissions(permissions: ["account_social.list.*"])

  """
  List all social accounts
  """
  listSocialAccounts(
    filter: SocialAccountListFilter = null,
    order: SocialAccountListOrder = null,
    page: Page = null
  ): SocialAccountConnection! @hasPermissions(permissions: ["account_social.list.*"])
}

extend type Mutation {
  """
  Disconnect a social account
  """
  disconnectSocialAccount(
    """
    The unique identifier of the social account to disconnect
    """
    id: ID64!
  ): SocialAccountPayload! @hasPermissions(permissions: ["account_social.disconnect.*"])
}
