syntax = "proto3";

import "google/protobuf/timestamp.proto";

package archivarius;

option go_package = "grpc/";

enum OrderingKey {
  UNKNOWN_ORDERING_KEY          = 0;
  ORDERING_KEY_DATEMARK         = 1;
  ORDERING_KEY_TIMEMARK         = 2;
  ORDERING_KEY_CLUSTER          = 3;
  ORDERING_KEY_PROJECT_ID       = 4;
  ORDERING_KEY_PUB_ACCOUNT_ID   = 5;
  ORDERING_KEY_ADV_ACCOUNT_ID   = 6;
  ORDERING_KEY_SOURCE_ID        = 7;
  ORDERING_KEY_ACCESS_POINT_ID  = 8;
  ORDERING_KEY_PLATFORM         = 9;
  ORDERING_KEY_DOMAIN           = 10;
  ORDERING_KEY_APP_ID           = 11;
  ORDERING_KEY_ZONE_ID          = 12;
  ORDERING_KEY_CAMPAIGN_ID      = 13;
  ORDERING_KEY_AD_ID            = 14;
  ORDERING_KEY_FORMAT_ID        = 15;
  ORDERING_KEY_JUMPER_ID        = 16;
  ORDERING_KEY_CARRIER_ID       = 17;
  ORDERING_KEY_COUNTRY          = 18;
  ORDERING_KEY_CITY             = 19;
  ORDERING_KEY_LANGUAGE         = 20;
  ORDERING_KEY_IP               = 21;
  ORDERING_KEY_DEVICE_TYPE      = 22;
  ORDERING_KEY_DEVICE_ID        = 23;
  ORDERING_KEY_OS_ID            = 24;
  ORDERING_KEY_BROWSER_ID       = 25;
  ORDERING_KEY_SPENT            = 26;
  ORDERING_KEY_PROFIT           = 27;
  ORDERING_KEY_BID_PRICE        = 28;
  ORDERING_KEY_REQUESTS         = 29;
  ORDERING_KEY_IMPRESSIONS      = 30;
  ORDERING_KEY_VIEWS            = 31;
  ORDERING_KEY_DIRECTS          = 32;
  ORDERING_KEY_CLICKS           = 33;
  ORDERING_KEY_LEADS            = 34;
  ORDERING_KEY_BIDS             = 35;
  ORDERING_KEY_WINS             = 36;
  ORDERING_KEY_SKIPS            = 37;
  ORDERING_KEY_NOBIDS           = 38;
  ORDERING_KEY_ERRORS           = 39;
  ORDERING_KEY_CTR              = 40;
  ORDERING_KEY_ECPM             = 41;
  ORDERING_KEY_ECPC             = 42;
  ORDERING_KEY_ECPA             = 43;
}

enum Key {
  UNKNOWN_KEY         = 0;
  KEY_DATEMARK        = 1;
  KEY_TIMEMARK        = 2;
  KEY_CLUSTER         = 3;
  KEY_PROJECT_ID      = 4;
  KEY_ACCOUNT_ID      = 5;
  KEY_PUB_ACCOUNT_ID  = 6;
  KEY_ADV_ACCOUNT_ID  = 7;
  KEY_SOURCE_ID       = 8;
  KEY_ACCESS_POINT_ID = 9;
  KEY_PLATFORM        = 10;
  KEY_DOMAIN          = 11;
  KEY_APP_ID          = 12;
  KEY_ZONE_ID         = 13;
  KEY_CAMPAIGN_ID     = 14;
  KEY_AD_ID           = 15;
  KEY_FORMAT_ID       = 16;
  KEY_JUMPER_ID       = 17;
  KEY_CARRIER_ID      = 18;
  KEY_COUNTRY         = 19;
  KEY_CITY            = 20;
  KEY_LANGUAGE        = 21;
  KEY_IP              = 22;
  KEY_DEVICE_TYPE     = 23;
  KEY_DEVICE_ID       = 24;
  KEY_OS_ID           = 25;
  KEY_BROWSER_ID      = 26;
}

message ItemKey {
  Key key = 1;
  Value value = 2;
}

message Value {
  oneof value {
    string string_value                   = 1;
    int64 int_value                       = 2;
    uint64 uint_value                     = 3;
    double float_value                    = 4;
    google.protobuf.Timestamp time_value  = 5;
    string ip_value                       = 6;
  }
}

message Item {
  repeated ItemKey keys = 1;
  double spent = 2;
  double  profit = 3;
  double  bid_price = 4;
  uint64 requests = 5;
  uint64 impressions = 6;
  uint64 views = 7;
  uint64 directs = 8;
  uint64 clicks = 9;
  uint64 leads = 10;
  uint64 bids = 11;
  uint64 wins = 12;
  uint64 skips = 13;
  uint64 nobids = 14;
  uint64 errors = 15;
  double  ctr = 16;
  double  ecpm = 17;
  double  ecpc = 18;
  double  ecpa = 19;
}

enum Condition {
  UNKNOWN = 0;
  EQ = 1;
  NE = 2;
  GT = 3;
  GE = 4;
  LT = 5;
  LE = 6;
  IN = 7;
  NI = 8;
  BT = 9;
  NB = 10;
  LI = 11;
  NL = 12;
}

message FilterCondition {
  Key key = 1;
  Condition op = 2;
  repeated Value value = 3;
}

message Filter {
  repeated FilterCondition conditions = 2;
  google.protobuf.Timestamp start_date = 3;
  google.protobuf.Timestamp end_date = 4;
}

message Order {
  OrderingKey key = 1;
  bool asc = 2;
}

// Request message for fetching statistics.
message StatisticRequest {
  optional Filter filter = 1;
  repeated Order order = 2;
  repeated Key group = 3;
  uint64 page_offset = 4;
  uint64 page_limit = 5;
}

// Response message containing statistics.
message StatisticResponse {
  repeated Item items = 1;
  uint64 total_count = 2;
}

// Service defining the Archivarius API.
service ArchivariusService {
  // Fetches statistical data based on the provided request.
  rpc Statistic(StatisticRequest) returns (StatisticResponse) {};
}
