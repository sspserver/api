// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.3
// source: protocol/archivarius.proto

package grpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OrderingKey int32

const (
	OrderingKey_UNKNOWN_ORDERING_KEY         OrderingKey = 0
	OrderingKey_ORDERING_KEY_DATEMARK        OrderingKey = 1
	OrderingKey_ORDERING_KEY_TIMEMARK        OrderingKey = 2
	OrderingKey_ORDERING_KEY_CLUSTER         OrderingKey = 3
	OrderingKey_ORDERING_KEY_PROJECT_ID      OrderingKey = 4
	OrderingKey_ORDERING_KEY_PUB_ACCOUNT_ID  OrderingKey = 5
	OrderingKey_ORDERING_KEY_ADV_ACCOUNT_ID  OrderingKey = 6
	OrderingKey_ORDERING_KEY_SOURCE_ID       OrderingKey = 7
	OrderingKey_ORDERING_KEY_ACCESS_POINT_ID OrderingKey = 8
	OrderingKey_ORDERING_KEY_PLATFORM        OrderingKey = 9
	OrderingKey_ORDERING_KEY_DOMAIN          OrderingKey = 10
	OrderingKey_ORDERING_KEY_APP_ID          OrderingKey = 11
	OrderingKey_ORDERING_KEY_ZONE_ID         OrderingKey = 12
	OrderingKey_ORDERING_KEY_CAMPAIGN_ID     OrderingKey = 13
	OrderingKey_ORDERING_KEY_AD_ID           OrderingKey = 14
	OrderingKey_ORDERING_KEY_FORMAT_ID       OrderingKey = 15
	OrderingKey_ORDERING_KEY_JUMPER_ID       OrderingKey = 16
	OrderingKey_ORDERING_KEY_CARRIER_ID      OrderingKey = 17
	OrderingKey_ORDERING_KEY_COUNTRY         OrderingKey = 18
	OrderingKey_ORDERING_KEY_CITY            OrderingKey = 19
	OrderingKey_ORDERING_KEY_LANGUAGE        OrderingKey = 20
	OrderingKey_ORDERING_KEY_IP              OrderingKey = 21
	OrderingKey_ORDERING_KEY_DEVICE_TYPE     OrderingKey = 22
	OrderingKey_ORDERING_KEY_DEVICE_ID       OrderingKey = 23
	OrderingKey_ORDERING_KEY_OS_ID           OrderingKey = 24
	OrderingKey_ORDERING_KEY_BROWSER_ID      OrderingKey = 25
	OrderingKey_ORDERING_KEY_SPENT           OrderingKey = 26
	OrderingKey_ORDERING_KEY_PROFIT          OrderingKey = 27
	OrderingKey_ORDERING_KEY_BID_PRICE       OrderingKey = 28
	OrderingKey_ORDERING_KEY_REQUESTS        OrderingKey = 29
	OrderingKey_ORDERING_KEY_IMPRESSIONS     OrderingKey = 30
	OrderingKey_ORDERING_KEY_VIEWS           OrderingKey = 31
	OrderingKey_ORDERING_KEY_DIRECTS         OrderingKey = 32
	OrderingKey_ORDERING_KEY_CLICKS          OrderingKey = 33
	OrderingKey_ORDERING_KEY_LEADS           OrderingKey = 34
	OrderingKey_ORDERING_KEY_BIDS            OrderingKey = 35
	OrderingKey_ORDERING_KEY_WINS            OrderingKey = 36
	OrderingKey_ORDERING_KEY_SKIPS           OrderingKey = 37
	OrderingKey_ORDERING_KEY_NOBIDS          OrderingKey = 38
	OrderingKey_ORDERING_KEY_ERRORS          OrderingKey = 39
	OrderingKey_ORDERING_KEY_CTR             OrderingKey = 40
	OrderingKey_ORDERING_KEY_ECPM            OrderingKey = 41
	OrderingKey_ORDERING_KEY_ECPC            OrderingKey = 42
	OrderingKey_ORDERING_KEY_ECPA            OrderingKey = 43
)

// Enum value maps for OrderingKey.
var (
	OrderingKey_name = map[int32]string{
		0:  "UNKNOWN_ORDERING_KEY",
		1:  "ORDERING_KEY_DATEMARK",
		2:  "ORDERING_KEY_TIMEMARK",
		3:  "ORDERING_KEY_CLUSTER",
		4:  "ORDERING_KEY_PROJECT_ID",
		5:  "ORDERING_KEY_PUB_ACCOUNT_ID",
		6:  "ORDERING_KEY_ADV_ACCOUNT_ID",
		7:  "ORDERING_KEY_SOURCE_ID",
		8:  "ORDERING_KEY_ACCESS_POINT_ID",
		9:  "ORDERING_KEY_PLATFORM",
		10: "ORDERING_KEY_DOMAIN",
		11: "ORDERING_KEY_APP_ID",
		12: "ORDERING_KEY_ZONE_ID",
		13: "ORDERING_KEY_CAMPAIGN_ID",
		14: "ORDERING_KEY_AD_ID",
		15: "ORDERING_KEY_FORMAT_ID",
		16: "ORDERING_KEY_JUMPER_ID",
		17: "ORDERING_KEY_CARRIER_ID",
		18: "ORDERING_KEY_COUNTRY",
		19: "ORDERING_KEY_CITY",
		20: "ORDERING_KEY_LANGUAGE",
		21: "ORDERING_KEY_IP",
		22: "ORDERING_KEY_DEVICE_TYPE",
		23: "ORDERING_KEY_DEVICE_ID",
		24: "ORDERING_KEY_OS_ID",
		25: "ORDERING_KEY_BROWSER_ID",
		26: "ORDERING_KEY_SPENT",
		27: "ORDERING_KEY_PROFIT",
		28: "ORDERING_KEY_BID_PRICE",
		29: "ORDERING_KEY_REQUESTS",
		30: "ORDERING_KEY_IMPRESSIONS",
		31: "ORDERING_KEY_VIEWS",
		32: "ORDERING_KEY_DIRECTS",
		33: "ORDERING_KEY_CLICKS",
		34: "ORDERING_KEY_LEADS",
		35: "ORDERING_KEY_BIDS",
		36: "ORDERING_KEY_WINS",
		37: "ORDERING_KEY_SKIPS",
		38: "ORDERING_KEY_NOBIDS",
		39: "ORDERING_KEY_ERRORS",
		40: "ORDERING_KEY_CTR",
		41: "ORDERING_KEY_ECPM",
		42: "ORDERING_KEY_ECPC",
		43: "ORDERING_KEY_ECPA",
	}
	OrderingKey_value = map[string]int32{
		"UNKNOWN_ORDERING_KEY":         0,
		"ORDERING_KEY_DATEMARK":        1,
		"ORDERING_KEY_TIMEMARK":        2,
		"ORDERING_KEY_CLUSTER":         3,
		"ORDERING_KEY_PROJECT_ID":      4,
		"ORDERING_KEY_PUB_ACCOUNT_ID":  5,
		"ORDERING_KEY_ADV_ACCOUNT_ID":  6,
		"ORDERING_KEY_SOURCE_ID":       7,
		"ORDERING_KEY_ACCESS_POINT_ID": 8,
		"ORDERING_KEY_PLATFORM":        9,
		"ORDERING_KEY_DOMAIN":          10,
		"ORDERING_KEY_APP_ID":          11,
		"ORDERING_KEY_ZONE_ID":         12,
		"ORDERING_KEY_CAMPAIGN_ID":     13,
		"ORDERING_KEY_AD_ID":           14,
		"ORDERING_KEY_FORMAT_ID":       15,
		"ORDERING_KEY_JUMPER_ID":       16,
		"ORDERING_KEY_CARRIER_ID":      17,
		"ORDERING_KEY_COUNTRY":         18,
		"ORDERING_KEY_CITY":            19,
		"ORDERING_KEY_LANGUAGE":        20,
		"ORDERING_KEY_IP":              21,
		"ORDERING_KEY_DEVICE_TYPE":     22,
		"ORDERING_KEY_DEVICE_ID":       23,
		"ORDERING_KEY_OS_ID":           24,
		"ORDERING_KEY_BROWSER_ID":      25,
		"ORDERING_KEY_SPENT":           26,
		"ORDERING_KEY_PROFIT":          27,
		"ORDERING_KEY_BID_PRICE":       28,
		"ORDERING_KEY_REQUESTS":        29,
		"ORDERING_KEY_IMPRESSIONS":     30,
		"ORDERING_KEY_VIEWS":           31,
		"ORDERING_KEY_DIRECTS":         32,
		"ORDERING_KEY_CLICKS":          33,
		"ORDERING_KEY_LEADS":           34,
		"ORDERING_KEY_BIDS":            35,
		"ORDERING_KEY_WINS":            36,
		"ORDERING_KEY_SKIPS":           37,
		"ORDERING_KEY_NOBIDS":          38,
		"ORDERING_KEY_ERRORS":          39,
		"ORDERING_KEY_CTR":             40,
		"ORDERING_KEY_ECPM":            41,
		"ORDERING_KEY_ECPC":            42,
		"ORDERING_KEY_ECPA":            43,
	}
)

func (x OrderingKey) Enum() *OrderingKey {
	p := new(OrderingKey)
	*p = x
	return p
}

func (x OrderingKey) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderingKey) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_archivarius_proto_enumTypes[0].Descriptor()
}

func (OrderingKey) Type() protoreflect.EnumType {
	return &file_protocol_archivarius_proto_enumTypes[0]
}

func (x OrderingKey) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderingKey.Descriptor instead.
func (OrderingKey) EnumDescriptor() ([]byte, []int) {
	return file_protocol_archivarius_proto_rawDescGZIP(), []int{0}
}

type Key int32

const (
	Key_UNKNOWN_KEY         Key = 0
	Key_KEY_DATEMARK        Key = 1
	Key_KEY_TIMEMARK        Key = 2
	Key_KEY_CLUSTER         Key = 3
	Key_KEY_PROJECT_ID      Key = 4
	Key_KEY_ACCOUNT_ID      Key = 5
	Key_KEY_PUB_ACCOUNT_ID  Key = 6
	Key_KEY_ADV_ACCOUNT_ID  Key = 7
	Key_KEY_SOURCE_ID       Key = 8
	Key_KEY_ACCESS_POINT_ID Key = 9
	Key_KEY_PLATFORM        Key = 10
	Key_KEY_DOMAIN          Key = 11
	Key_KEY_APP_ID          Key = 12
	Key_KEY_ZONE_ID         Key = 13
	Key_KEY_CAMPAIGN_ID     Key = 14
	Key_KEY_AD_ID           Key = 15
	Key_KEY_FORMAT_ID       Key = 16
	Key_KEY_JUMPER_ID       Key = 17
	Key_KEY_CARRIER_ID      Key = 18
	Key_KEY_COUNTRY         Key = 19
	Key_KEY_CITY            Key = 20
	Key_KEY_LANGUAGE        Key = 21
	Key_KEY_IP              Key = 22
	Key_KEY_DEVICE_TYPE     Key = 23
	Key_KEY_DEVICE_ID       Key = 24
	Key_KEY_OS_ID           Key = 25
	Key_KEY_BROWSER_ID      Key = 26
)

// Enum value maps for Key.
var (
	Key_name = map[int32]string{
		0:  "UNKNOWN_KEY",
		1:  "KEY_DATEMARK",
		2:  "KEY_TIMEMARK",
		3:  "KEY_CLUSTER",
		4:  "KEY_PROJECT_ID",
		5:  "KEY_ACCOUNT_ID",
		6:  "KEY_PUB_ACCOUNT_ID",
		7:  "KEY_ADV_ACCOUNT_ID",
		8:  "KEY_SOURCE_ID",
		9:  "KEY_ACCESS_POINT_ID",
		10: "KEY_PLATFORM",
		11: "KEY_DOMAIN",
		12: "KEY_APP_ID",
		13: "KEY_ZONE_ID",
		14: "KEY_CAMPAIGN_ID",
		15: "KEY_AD_ID",
		16: "KEY_FORMAT_ID",
		17: "KEY_JUMPER_ID",
		18: "KEY_CARRIER_ID",
		19: "KEY_COUNTRY",
		20: "KEY_CITY",
		21: "KEY_LANGUAGE",
		22: "KEY_IP",
		23: "KEY_DEVICE_TYPE",
		24: "KEY_DEVICE_ID",
		25: "KEY_OS_ID",
		26: "KEY_BROWSER_ID",
	}
	Key_value = map[string]int32{
		"UNKNOWN_KEY":         0,
		"KEY_DATEMARK":        1,
		"KEY_TIMEMARK":        2,
		"KEY_CLUSTER":         3,
		"KEY_PROJECT_ID":      4,
		"KEY_ACCOUNT_ID":      5,
		"KEY_PUB_ACCOUNT_ID":  6,
		"KEY_ADV_ACCOUNT_ID":  7,
		"KEY_SOURCE_ID":       8,
		"KEY_ACCESS_POINT_ID": 9,
		"KEY_PLATFORM":        10,
		"KEY_DOMAIN":          11,
		"KEY_APP_ID":          12,
		"KEY_ZONE_ID":         13,
		"KEY_CAMPAIGN_ID":     14,
		"KEY_AD_ID":           15,
		"KEY_FORMAT_ID":       16,
		"KEY_JUMPER_ID":       17,
		"KEY_CARRIER_ID":      18,
		"KEY_COUNTRY":         19,
		"KEY_CITY":            20,
		"KEY_LANGUAGE":        21,
		"KEY_IP":              22,
		"KEY_DEVICE_TYPE":     23,
		"KEY_DEVICE_ID":       24,
		"KEY_OS_ID":           25,
		"KEY_BROWSER_ID":      26,
	}
)

func (x Key) Enum() *Key {
	p := new(Key)
	*p = x
	return p
}

func (x Key) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Key) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_archivarius_proto_enumTypes[1].Descriptor()
}

func (Key) Type() protoreflect.EnumType {
	return &file_protocol_archivarius_proto_enumTypes[1]
}

func (x Key) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Key.Descriptor instead.
func (Key) EnumDescriptor() ([]byte, []int) {
	return file_protocol_archivarius_proto_rawDescGZIP(), []int{1}
}

type Condition int32

const (
	Condition_UNKNOWN Condition = 0
	Condition_EQ      Condition = 1
	Condition_NE      Condition = 2
	Condition_GT      Condition = 3
	Condition_GE      Condition = 4
	Condition_LT      Condition = 5
	Condition_LE      Condition = 6
	Condition_IN      Condition = 7
	Condition_NI      Condition = 8
	Condition_BT      Condition = 9
	Condition_NB      Condition = 10
	Condition_LI      Condition = 11
	Condition_NL      Condition = 12
)

// Enum value maps for Condition.
var (
	Condition_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "EQ",
		2:  "NE",
		3:  "GT",
		4:  "GE",
		5:  "LT",
		6:  "LE",
		7:  "IN",
		8:  "NI",
		9:  "BT",
		10: "NB",
		11: "LI",
		12: "NL",
	}
	Condition_value = map[string]int32{
		"UNKNOWN": 0,
		"EQ":      1,
		"NE":      2,
		"GT":      3,
		"GE":      4,
		"LT":      5,
		"LE":      6,
		"IN":      7,
		"NI":      8,
		"BT":      9,
		"NB":      10,
		"LI":      11,
		"NL":      12,
	}
)

func (x Condition) Enum() *Condition {
	p := new(Condition)
	*p = x
	return p
}

func (x Condition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Condition) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_archivarius_proto_enumTypes[2].Descriptor()
}

func (Condition) Type() protoreflect.EnumType {
	return &file_protocol_archivarius_proto_enumTypes[2]
}

func (x Condition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Condition.Descriptor instead.
func (Condition) EnumDescriptor() ([]byte, []int) {
	return file_protocol_archivarius_proto_rawDescGZIP(), []int{2}
}

type ItemKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   Key    `protobuf:"varint,1,opt,name=key,proto3,enum=archivarius.Key" json:"key,omitempty"`
	Value *Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ItemKey) Reset() {
	*x = ItemKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_archivarius_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemKey) ProtoMessage() {}

func (x *ItemKey) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_archivarius_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemKey.ProtoReflect.Descriptor instead.
func (*ItemKey) Descriptor() ([]byte, []int) {
	return file_protocol_archivarius_proto_rawDescGZIP(), []int{0}
}

func (x *ItemKey) GetKey() Key {
	if x != nil {
		return x.Key
	}
	return Key_UNKNOWN_KEY
}

func (x *ItemKey) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Value_StringValue
	//	*Value_IntValue
	//	*Value_UintValue
	//	*Value_FloatValue
	//	*Value_TimeValue
	//	*Value_IpValue
	Value isValue_Value `protobuf_oneof:"value"`
}

func (x *Value) Reset() {
	*x = Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_archivarius_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_archivarius_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_protocol_archivarius_proto_rawDescGZIP(), []int{1}
}

func (m *Value) GetValue() isValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Value) GetStringValue() string {
	if x, ok := x.GetValue().(*Value_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *Value) GetIntValue() int64 {
	if x, ok := x.GetValue().(*Value_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (x *Value) GetUintValue() uint64 {
	if x, ok := x.GetValue().(*Value_UintValue); ok {
		return x.UintValue
	}
	return 0
}

func (x *Value) GetFloatValue() float64 {
	if x, ok := x.GetValue().(*Value_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (x *Value) GetTimeValue() *timestamppb.Timestamp {
	if x, ok := x.GetValue().(*Value_TimeValue); ok {
		return x.TimeValue
	}
	return nil
}

func (x *Value) GetIpValue() string {
	if x, ok := x.GetValue().(*Value_IpValue); ok {
		return x.IpValue
	}
	return ""
}

type isValue_Value interface {
	isValue_Value()
}

type Value_StringValue struct {
	StringValue string `protobuf:"bytes,1,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type Value_IntValue struct {
	IntValue int64 `protobuf:"varint,2,opt,name=int_value,json=intValue,proto3,oneof"`
}

type Value_UintValue struct {
	UintValue uint64 `protobuf:"varint,3,opt,name=uint_value,json=uintValue,proto3,oneof"`
}

type Value_FloatValue struct {
	FloatValue float64 `protobuf:"fixed64,4,opt,name=float_value,json=floatValue,proto3,oneof"`
}

type Value_TimeValue struct {
	TimeValue *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=time_value,json=timeValue,proto3,oneof"`
}

type Value_IpValue struct {
	IpValue string `protobuf:"bytes,6,opt,name=ip_value,json=ipValue,proto3,oneof"`
}

func (*Value_StringValue) isValue_Value() {}

func (*Value_IntValue) isValue_Value() {}

func (*Value_UintValue) isValue_Value() {}

func (*Value_FloatValue) isValue_Value() {}

func (*Value_TimeValue) isValue_Value() {}

func (*Value_IpValue) isValue_Value() {}

type Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys        []*ItemKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	Spent       float64    `protobuf:"fixed64,2,opt,name=spent,proto3" json:"spent,omitempty"`
	Profit      float64    `protobuf:"fixed64,3,opt,name=profit,proto3" json:"profit,omitempty"`
	BidPrice    float64    `protobuf:"fixed64,4,opt,name=bid_price,json=bidPrice,proto3" json:"bid_price,omitempty"`
	Requests    uint64     `protobuf:"varint,5,opt,name=requests,proto3" json:"requests,omitempty"`
	Impressions uint64     `protobuf:"varint,6,opt,name=impressions,proto3" json:"impressions,omitempty"`
	Views       uint64     `protobuf:"varint,7,opt,name=views,proto3" json:"views,omitempty"`
	Directs     uint64     `protobuf:"varint,8,opt,name=directs,proto3" json:"directs,omitempty"`
	Clicks      uint64     `protobuf:"varint,9,opt,name=clicks,proto3" json:"clicks,omitempty"`
	Leads       uint64     `protobuf:"varint,10,opt,name=leads,proto3" json:"leads,omitempty"`
	Bids        uint64     `protobuf:"varint,11,opt,name=bids,proto3" json:"bids,omitempty"`
	Wins        uint64     `protobuf:"varint,12,opt,name=wins,proto3" json:"wins,omitempty"`
	Skips       uint64     `protobuf:"varint,13,opt,name=skips,proto3" json:"skips,omitempty"`
	Nobids      uint64     `protobuf:"varint,14,opt,name=nobids,proto3" json:"nobids,omitempty"`
	Errors      uint64     `protobuf:"varint,15,opt,name=errors,proto3" json:"errors,omitempty"`
	Ctr         float64    `protobuf:"fixed64,16,opt,name=ctr,proto3" json:"ctr,omitempty"`
	Ecpm        float64    `protobuf:"fixed64,17,opt,name=ecpm,proto3" json:"ecpm,omitempty"`
	Ecpc        float64    `protobuf:"fixed64,18,opt,name=ecpc,proto3" json:"ecpc,omitempty"`
	Ecpa        float64    `protobuf:"fixed64,19,opt,name=ecpa,proto3" json:"ecpa,omitempty"`
}

func (x *Item) Reset() {
	*x = Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_archivarius_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Item) ProtoMessage() {}

func (x *Item) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_archivarius_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Item.ProtoReflect.Descriptor instead.
func (*Item) Descriptor() ([]byte, []int) {
	return file_protocol_archivarius_proto_rawDescGZIP(), []int{2}
}

func (x *Item) GetKeys() []*ItemKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *Item) GetSpent() float64 {
	if x != nil {
		return x.Spent
	}
	return 0
}

func (x *Item) GetProfit() float64 {
	if x != nil {
		return x.Profit
	}
	return 0
}

func (x *Item) GetBidPrice() float64 {
	if x != nil {
		return x.BidPrice
	}
	return 0
}

func (x *Item) GetRequests() uint64 {
	if x != nil {
		return x.Requests
	}
	return 0
}

func (x *Item) GetImpressions() uint64 {
	if x != nil {
		return x.Impressions
	}
	return 0
}

func (x *Item) GetViews() uint64 {
	if x != nil {
		return x.Views
	}
	return 0
}

func (x *Item) GetDirects() uint64 {
	if x != nil {
		return x.Directs
	}
	return 0
}

func (x *Item) GetClicks() uint64 {
	if x != nil {
		return x.Clicks
	}
	return 0
}

func (x *Item) GetLeads() uint64 {
	if x != nil {
		return x.Leads
	}
	return 0
}

func (x *Item) GetBids() uint64 {
	if x != nil {
		return x.Bids
	}
	return 0
}

func (x *Item) GetWins() uint64 {
	if x != nil {
		return x.Wins
	}
	return 0
}

func (x *Item) GetSkips() uint64 {
	if x != nil {
		return x.Skips
	}
	return 0
}

func (x *Item) GetNobids() uint64 {
	if x != nil {
		return x.Nobids
	}
	return 0
}

func (x *Item) GetErrors() uint64 {
	if x != nil {
		return x.Errors
	}
	return 0
}

func (x *Item) GetCtr() float64 {
	if x != nil {
		return x.Ctr
	}
	return 0
}

func (x *Item) GetEcpm() float64 {
	if x != nil {
		return x.Ecpm
	}
	return 0
}

func (x *Item) GetEcpc() float64 {
	if x != nil {
		return x.Ecpc
	}
	return 0
}

func (x *Item) GetEcpa() float64 {
	if x != nil {
		return x.Ecpa
	}
	return 0
}

type FilterCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   Key       `protobuf:"varint,1,opt,name=key,proto3,enum=archivarius.Key" json:"key,omitempty"`
	Op    Condition `protobuf:"varint,2,opt,name=op,proto3,enum=archivarius.Condition" json:"op,omitempty"`
	Value []*Value  `protobuf:"bytes,3,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *FilterCondition) Reset() {
	*x = FilterCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_archivarius_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterCondition) ProtoMessage() {}

func (x *FilterCondition) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_archivarius_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterCondition.ProtoReflect.Descriptor instead.
func (*FilterCondition) Descriptor() ([]byte, []int) {
	return file_protocol_archivarius_proto_rawDescGZIP(), []int{3}
}

func (x *FilterCondition) GetKey() Key {
	if x != nil {
		return x.Key
	}
	return Key_UNKNOWN_KEY
}

func (x *FilterCondition) GetOp() Condition {
	if x != nil {
		return x.Op
	}
	return Condition_UNKNOWN
}

func (x *FilterCondition) GetValue() []*Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conditions []*FilterCondition     `protobuf:"bytes,2,rep,name=conditions,proto3" json:"conditions,omitempty"`
	StartDate  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_archivarius_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_archivarius_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_protocol_archivarius_proto_rawDescGZIP(), []int{4}
}

func (x *Filter) GetConditions() []*FilterCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *Filter) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *Filter) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key OrderingKey `protobuf:"varint,1,opt,name=key,proto3,enum=archivarius.OrderingKey" json:"key,omitempty"`
	Asc bool        `protobuf:"varint,2,opt,name=asc,proto3" json:"asc,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_archivarius_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_archivarius_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_protocol_archivarius_proto_rawDescGZIP(), []int{5}
}

func (x *Order) GetKey() OrderingKey {
	if x != nil {
		return x.Key
	}
	return OrderingKey_UNKNOWN_ORDERING_KEY
}

func (x *Order) GetAsc() bool {
	if x != nil {
		return x.Asc
	}
	return false
}

// Request message for fetching statistics.
type StatisticRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter     *Filter  `protobuf:"bytes,1,opt,name=filter,proto3,oneof" json:"filter,omitempty"`
	Order      []*Order `protobuf:"bytes,2,rep,name=order,proto3" json:"order,omitempty"`
	Group      []Key    `protobuf:"varint,3,rep,packed,name=group,proto3,enum=archivarius.Key" json:"group,omitempty"`
	PageOffset uint64   `protobuf:"varint,4,opt,name=page_offset,json=pageOffset,proto3" json:"page_offset,omitempty"`
	PageLimit  uint64   `protobuf:"varint,5,opt,name=page_limit,json=pageLimit,proto3" json:"page_limit,omitempty"`
}

func (x *StatisticRequest) Reset() {
	*x = StatisticRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_archivarius_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatisticRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticRequest) ProtoMessage() {}

func (x *StatisticRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_archivarius_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticRequest.ProtoReflect.Descriptor instead.
func (*StatisticRequest) Descriptor() ([]byte, []int) {
	return file_protocol_archivarius_proto_rawDescGZIP(), []int{6}
}

func (x *StatisticRequest) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *StatisticRequest) GetOrder() []*Order {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *StatisticRequest) GetGroup() []Key {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *StatisticRequest) GetPageOffset() uint64 {
	if x != nil {
		return x.PageOffset
	}
	return 0
}

func (x *StatisticRequest) GetPageLimit() uint64 {
	if x != nil {
		return x.PageLimit
	}
	return 0
}

// Response message containing statistics.
type StatisticResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items      []*Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	TotalCount uint64  `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *StatisticResponse) Reset() {
	*x = StatisticResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_archivarius_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatisticResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticResponse) ProtoMessage() {}

func (x *StatisticResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_archivarius_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticResponse.ProtoReflect.Descriptor instead.
func (*StatisticResponse) Descriptor() ([]byte, []int) {
	return file_protocol_archivarius_proto_rawDescGZIP(), []int{7}
}

func (x *StatisticResponse) GetItems() []*Item {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *StatisticResponse) GetTotalCount() uint64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

var File_protocol_archivarius_proto protoreflect.FileDescriptor

var file_protocol_archivarius_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x61, 0x72, 0x69, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x61, 0x72, 0x69, 0x75, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x57, 0x0a, 0x07, 0x49, 0x74,
	0x65, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x61, 0x72, 0x69, 0x75, 0x73,
	0x2e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x61, 0x72, 0x69, 0x75, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xf2, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a,
	0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x09, 0x75, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x69, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x69, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd3, 0x03, 0x0a, 0x04, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x28, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x61, 0x72, 0x69, 0x75, 0x73, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x70, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x70, 0x65, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x64,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x62, 0x69,
	0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x65, 0x61, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x65, 0x61,
	0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x69, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x62, 0x69, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x69, 0x6e, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x77, 0x69, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6b,
	0x69, 0x70, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x6b, 0x69, 0x70, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x62, 0x69, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x6e, 0x6f, 0x62, 0x69, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x63, 0x74, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x63,
	0x74, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x63, 0x70, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x04, 0x65, 0x63, 0x70, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x63, 0x70, 0x63, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x65, 0x63, 0x70, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x63,
	0x70, 0x61, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x65, 0x63, 0x70, 0x61, 0x22, 0x87,
	0x01, 0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x61, 0x72, 0x69, 0x75, 0x73, 0x2e, 0x4b, 0x65,
	0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x61, 0x72, 0x69, 0x75, 0x73,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x28,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x61, 0x72, 0x69, 0x75, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x61, 0x72, 0x69, 0x75, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x22, 0x45, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x61, 0x72, 0x69, 0x75, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x73, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x73, 0x63, 0x22, 0xe1, 0x01, 0x0a, 0x10, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x30, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x61, 0x72, 0x69, 0x75, 0x73, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x61, 0x72, 0x69, 0x75, 0x73, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x61, 0x72, 0x69, 0x75, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x5d,
	0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x61, 0x72, 0x69, 0x75, 0x73,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x2a, 0x92, 0x09,
	0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a,
	0x14, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x49, 0x4e,
	0x47, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x49, 0x4e, 0x47, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x4d, 0x41, 0x52, 0x4b,
	0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4b,
	0x45, 0x59, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4d, 0x41, 0x52, 0x4b, 0x10, 0x02, 0x12, 0x18, 0x0a,
	0x14, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x43, 0x4c,
	0x55, 0x53, 0x54, 0x45, 0x52, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x49, 0x4e, 0x47, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f,
	0x49, 0x44, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x49, 0x4e, 0x47,
	0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x50, 0x55, 0x42, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x5f, 0x49, 0x44, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x49, 0x4e,
	0x47, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x44, 0x56, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x49, 0x44, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x49,
	0x4e, 0x47, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x49, 0x44,
	0x10, 0x07, 0x12, 0x20, 0x0a, 0x1c, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4b,
	0x45, 0x59, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f,
	0x49, 0x44, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x49, 0x4e, 0x47,
	0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x09, 0x12,
	0x17, 0x0a, 0x13, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4b, 0x45, 0x59, 0x5f,
	0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x49, 0x44, 0x10,
	0x0b, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4b, 0x45,
	0x59, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x0c, 0x12, 0x1c, 0x0a, 0x18, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x43, 0x41, 0x4d, 0x50,
	0x41, 0x49, 0x47, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x0d, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x44, 0x5f, 0x49, 0x44, 0x10,
	0x0e, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4b, 0x45,
	0x59, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x0f, 0x12, 0x1a, 0x0a,
	0x16, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4a, 0x55,
	0x4d, 0x50, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x10, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x43, 0x41, 0x52, 0x52, 0x49, 0x45,
	0x52, 0x5f, 0x49, 0x44, 0x10, 0x11, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x49,
	0x4e, 0x47, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x12,
	0x12, 0x15, 0x0a, 0x11, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4b, 0x45, 0x59,
	0x5f, 0x43, 0x49, 0x54, 0x59, 0x10, 0x13, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x49, 0x4e, 0x47, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45,
	0x10, 0x14, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4b,
	0x45, 0x59, 0x5f, 0x49, 0x50, 0x10, 0x15, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x49, 0x4e, 0x47, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x16, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x49, 0x4e,
	0x47, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x10,
	0x17, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4b, 0x45,
	0x59, 0x5f, 0x4f, 0x53, 0x5f, 0x49, 0x44, 0x10, 0x18, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x42, 0x52, 0x4f, 0x57, 0x53, 0x45,
	0x52, 0x5f, 0x49, 0x44, 0x10, 0x19, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x49,
	0x4e, 0x47, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x53, 0x50, 0x45, 0x4e, 0x54, 0x10, 0x1a, 0x12, 0x17,
	0x0a, 0x13, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x50,
	0x52, 0x4f, 0x46, 0x49, 0x54, 0x10, 0x1b, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x49, 0x4e, 0x47, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x42, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x49, 0x43,
	0x45, 0x10, 0x1c, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f,
	0x4b, 0x45, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x10, 0x1d, 0x12, 0x1c,
	0x0a, 0x18, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49,
	0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x1e, 0x12, 0x16, 0x0a, 0x12,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x56, 0x49, 0x45,
	0x57, 0x53, 0x10, 0x1f, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x49, 0x4e, 0x47,
	0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x53, 0x10, 0x20, 0x12, 0x17,
	0x0a, 0x13, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x43,
	0x4c, 0x49, 0x43, 0x4b, 0x53, 0x10, 0x21, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x49, 0x4e, 0x47, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4c, 0x45, 0x41, 0x44, 0x53, 0x10, 0x22, 0x12,
	0x15, 0x0a, 0x11, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4b, 0x45, 0x59, 0x5f,
	0x42, 0x49, 0x44, 0x53, 0x10, 0x23, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x49,
	0x4e, 0x47, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x57, 0x49, 0x4e, 0x53, 0x10, 0x24, 0x12, 0x16, 0x0a,
	0x12, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x53, 0x4b,
	0x49, 0x50, 0x53, 0x10, 0x25, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x49, 0x4e,
	0x47, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4e, 0x4f, 0x42, 0x49, 0x44, 0x53, 0x10, 0x26, 0x12, 0x17,
	0x0a, 0x13, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x53, 0x10, 0x27, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x49, 0x4e, 0x47, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x43, 0x54, 0x52, 0x10, 0x28, 0x12, 0x15, 0x0a,
	0x11, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x45, 0x43,
	0x50, 0x4d, 0x10, 0x29, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x49, 0x4e, 0x47,
	0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x45, 0x43, 0x50, 0x43, 0x10, 0x2a, 0x12, 0x15, 0x0a, 0x11, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x45, 0x43, 0x50, 0x41,
	0x10, 0x2b, 0x2a, 0xf8, 0x03, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4b,
	0x45, 0x59, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x4d, 0x41, 0x52, 0x4b, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x4b, 0x45, 0x59, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4d, 0x41, 0x52, 0x4b, 0x10, 0x02, 0x12,
	0x0f, 0x0a, 0x0b, 0x4b, 0x45, 0x59, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x10, 0x03,
	0x12, 0x12, 0x0a, 0x0e, 0x4b, 0x45, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f,
	0x49, 0x44, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x4b, 0x45, 0x59, 0x5f,
	0x50, 0x55, 0x42, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x06,
	0x12, 0x16, 0x0a, 0x12, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x44, 0x56, 0x5f, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x4b, 0x45, 0x59, 0x5f,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x4b,
	0x45, 0x59, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f,
	0x49, 0x44, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x4b, 0x45, 0x59, 0x5f, 0x50, 0x4c, 0x41, 0x54,
	0x46, 0x4f, 0x52, 0x4d, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x4b, 0x45, 0x59, 0x5f, 0x44, 0x4f,
	0x4d, 0x41, 0x49, 0x4e, 0x10, 0x0b, 0x12, 0x0e, 0x0a, 0x0a, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x50,
	0x50, 0x5f, 0x49, 0x44, 0x10, 0x0c, 0x12, 0x0f, 0x0a, 0x0b, 0x4b, 0x45, 0x59, 0x5f, 0x5a, 0x4f,
	0x4e, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x0d, 0x12, 0x13, 0x0a, 0x0f, 0x4b, 0x45, 0x59, 0x5f, 0x43,
	0x41, 0x4d, 0x50, 0x41, 0x49, 0x47, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x0e, 0x12, 0x0d, 0x0a, 0x09,
	0x4b, 0x45, 0x59, 0x5f, 0x41, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x0f, 0x12, 0x11, 0x0a, 0x0d, 0x4b,
	0x45, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x10, 0x12, 0x11,
	0x0a, 0x0d, 0x4b, 0x45, 0x59, 0x5f, 0x4a, 0x55, 0x4d, 0x50, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10,
	0x11, 0x12, 0x12, 0x0a, 0x0e, 0x4b, 0x45, 0x59, 0x5f, 0x43, 0x41, 0x52, 0x52, 0x49, 0x45, 0x52,
	0x5f, 0x49, 0x44, 0x10, 0x12, 0x12, 0x0f, 0x0a, 0x0b, 0x4b, 0x45, 0x59, 0x5f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x52, 0x59, 0x10, 0x13, 0x12, 0x0c, 0x0a, 0x08, 0x4b, 0x45, 0x59, 0x5f, 0x43, 0x49,
	0x54, 0x59, 0x10, 0x14, 0x12, 0x10, 0x0a, 0x0c, 0x4b, 0x45, 0x59, 0x5f, 0x4c, 0x41, 0x4e, 0x47,
	0x55, 0x41, 0x47, 0x45, 0x10, 0x15, 0x12, 0x0a, 0x0a, 0x06, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x50,
	0x10, 0x16, 0x12, 0x13, 0x0a, 0x0f, 0x4b, 0x45, 0x59, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x17, 0x12, 0x11, 0x0a, 0x0d, 0x4b, 0x45, 0x59, 0x5f, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x18, 0x12, 0x0d, 0x0a, 0x09, 0x4b, 0x45,
	0x59, 0x5f, 0x4f, 0x53, 0x5f, 0x49, 0x44, 0x10, 0x19, 0x12, 0x12, 0x0a, 0x0e, 0x4b, 0x45, 0x59,
	0x5f, 0x42, 0x52, 0x4f, 0x57, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x1a, 0x2a, 0x78, 0x0a,
	0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x45, 0x51, 0x10, 0x01, 0x12,
	0x06, 0x0a, 0x02, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x54, 0x10, 0x03, 0x12,
	0x06, 0x0a, 0x02, 0x47, 0x45, 0x10, 0x04, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x54, 0x10, 0x05, 0x12,
	0x06, 0x0a, 0x02, 0x4c, 0x45, 0x10, 0x06, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x4e, 0x10, 0x07, 0x12,
	0x06, 0x0a, 0x02, 0x4e, 0x49, 0x10, 0x08, 0x12, 0x06, 0x0a, 0x02, 0x42, 0x54, 0x10, 0x09, 0x12,
	0x06, 0x0a, 0x02, 0x4e, 0x42, 0x10, 0x0a, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x49, 0x10, 0x0b, 0x12,
	0x06, 0x0a, 0x02, 0x4e, 0x4c, 0x10, 0x0c, 0x32, 0x62, 0x0a, 0x12, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x61, 0x72, 0x69, 0x75, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4c, 0x0a,
	0x09, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x1d, 0x2e, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x61, 0x72, 0x69, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x61, 0x72, 0x69, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x07, 0x5a, 0x05, 0x67,
	0x72, 0x70, 0x63, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protocol_archivarius_proto_rawDescOnce sync.Once
	file_protocol_archivarius_proto_rawDescData = file_protocol_archivarius_proto_rawDesc
)

func file_protocol_archivarius_proto_rawDescGZIP() []byte {
	file_protocol_archivarius_proto_rawDescOnce.Do(func() {
		file_protocol_archivarius_proto_rawDescData = protoimpl.X.CompressGZIP(file_protocol_archivarius_proto_rawDescData)
	})
	return file_protocol_archivarius_proto_rawDescData
}

var file_protocol_archivarius_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_protocol_archivarius_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_protocol_archivarius_proto_goTypes = []interface{}{
	(OrderingKey)(0),              // 0: archivarius.OrderingKey
	(Key)(0),                      // 1: archivarius.Key
	(Condition)(0),                // 2: archivarius.Condition
	(*ItemKey)(nil),               // 3: archivarius.ItemKey
	(*Value)(nil),                 // 4: archivarius.Value
	(*Item)(nil),                  // 5: archivarius.Item
	(*FilterCondition)(nil),       // 6: archivarius.FilterCondition
	(*Filter)(nil),                // 7: archivarius.Filter
	(*Order)(nil),                 // 8: archivarius.Order
	(*StatisticRequest)(nil),      // 9: archivarius.StatisticRequest
	(*StatisticResponse)(nil),     // 10: archivarius.StatisticResponse
	(*timestamppb.Timestamp)(nil), // 11: google.protobuf.Timestamp
}
var file_protocol_archivarius_proto_depIdxs = []int32{
	1,  // 0: archivarius.ItemKey.key:type_name -> archivarius.Key
	4,  // 1: archivarius.ItemKey.value:type_name -> archivarius.Value
	11, // 2: archivarius.Value.time_value:type_name -> google.protobuf.Timestamp
	3,  // 3: archivarius.Item.keys:type_name -> archivarius.ItemKey
	1,  // 4: archivarius.FilterCondition.key:type_name -> archivarius.Key
	2,  // 5: archivarius.FilterCondition.op:type_name -> archivarius.Condition
	4,  // 6: archivarius.FilterCondition.value:type_name -> archivarius.Value
	6,  // 7: archivarius.Filter.conditions:type_name -> archivarius.FilterCondition
	11, // 8: archivarius.Filter.start_date:type_name -> google.protobuf.Timestamp
	11, // 9: archivarius.Filter.end_date:type_name -> google.protobuf.Timestamp
	0,  // 10: archivarius.Order.key:type_name -> archivarius.OrderingKey
	7,  // 11: archivarius.StatisticRequest.filter:type_name -> archivarius.Filter
	8,  // 12: archivarius.StatisticRequest.order:type_name -> archivarius.Order
	1,  // 13: archivarius.StatisticRequest.group:type_name -> archivarius.Key
	5,  // 14: archivarius.StatisticResponse.items:type_name -> archivarius.Item
	9,  // 15: archivarius.ArchivariusService.Statistic:input_type -> archivarius.StatisticRequest
	10, // 16: archivarius.ArchivariusService.Statistic:output_type -> archivarius.StatisticResponse
	16, // [16:17] is the sub-list for method output_type
	15, // [15:16] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_protocol_archivarius_proto_init() }
func file_protocol_archivarius_proto_init() {
	if File_protocol_archivarius_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protocol_archivarius_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_archivarius_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_archivarius_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_archivarius_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_archivarius_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_archivarius_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_archivarius_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatisticRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_archivarius_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatisticResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protocol_archivarius_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Value_StringValue)(nil),
		(*Value_IntValue)(nil),
		(*Value_UintValue)(nil),
		(*Value_FloatValue)(nil),
		(*Value_TimeValue)(nil),
		(*Value_IpValue)(nil),
	}
	file_protocol_archivarius_proto_msgTypes[6].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protocol_archivarius_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protocol_archivarius_proto_goTypes,
		DependencyIndexes: file_protocol_archivarius_proto_depIdxs,
		EnumInfos:         file_protocol_archivarius_proto_enumTypes,
		MessageInfos:      file_protocol_archivarius_proto_msgTypes,
	}.Build()
	File_protocol_archivarius_proto = out.File
	file_protocol_archivarius_proto_rawDesc = nil
	file_protocol_archivarius_proto_goTypes = nil
	file_protocol_archivarius_proto_depIdxs = nil
}
