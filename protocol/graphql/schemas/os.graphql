"""
OS model schema
"""
type OS {
  """
  OS ID
  """
  ID: ID64!

  """
  Name of the OS
  """
  name: String!

  """
  Description of the OS
  """
  description: String!

  """
  Version of the OS
  """
  version: String!

  """
  Year of release of the OS
  """
  yearRelease: Int!

  """
  Year of end of support of the OS
  """
  yearEndSupport: Int!

  """
  Active status of the OS
  """
  active: ActiveStatus!

  # Match expressions
  matchNameExp: String!
  matchUserAgentExp: String!
  matchVersionMinExp: String!
  matchVersionMaxExp: String!

  """
  Parent ID of the OS group
  """
  parentID: ID64!

  """
  Parent object of the OS
  """
  parent: OS

  """
  List of child OS
  """
  versions: [OS!]

  """
  Creation time of the OS
  """
  createdAt: Time!

  """
  Last update time of the OS
  """
  updatedAt: Time!

  """
  Deletion time of the OS
  """
  deletedAt: Time
}

type OSEdge {
  """
  A cursor for use in pagination
  """
  cursor: String!

  """
  The OS at the end of the edge
  """
  node: OS!
}

type OSConnection {
  """
  Total count of OS objects
  """
  totalCount: Int!

  """
  Edges of OS objects
  """
  edges: [OSEdge!]

  """
  List of OS objects
  """
  list: [OS!]

  """
  Information to aid in pagination
  """
  pageInfo: PageInfo!
}

type OSPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationID: String!

  """
  The OS that was created by this mutation.
  """
  OSID: ID64!

  """
  The OS object accessible by a client.
  """
  OS: OS!
}

###############################################################################
### Query input & output
###############################################################################

input OSListFilter {
  ID:           [ID64!]
  parentID:     [ID64!]
  name:         [String!]
  active:       ActiveStatus
}

input OSListOrder {
  ID:           Ordering
  name:         Ordering
  active:       Ordering
  createdAt:    Ordering
  updatedAt:    Ordering
  yearRelease:  Ordering
}

"""
Input for querying OS
"""
input OSCreateInput {
  """
  Parent ID of the OS group
  """
  parentID: ID64

  """
  Name of the OS
  """
  name: String! @length(min: 1, max: 255, trim: true)

  """
  Version of the OS
  """
  version: String @regex(pattern: "^[0-9]+\\.[0-9]+(\\.[0-9]+)?$", trim: true, ornil: true)

  """
  Description of the OS
  """
  description: String @notempty(trim: true, ornil: true)

  """
  Active status of the OS
  """
  active: ActiveStatus

  """
  Year of release of the OS
  """
  yearRelease: Int

  """
  Year of end of support of the OS
  """
  yearEndSupport: Int

  # Match expressions
  matchNameExp:       String @notempty(trim: true, ornil: true)
  matchUserAgentExp:  String @notempty(trim: true, ornil: true)
  matchVersionMinExp: String @notempty(trim: true, ornil: true)
  matchVersionMaxExp: String @notempty(trim: true, ornil: true)
}

input OSUpdateInput {
  """
  Name of the OS
  """
  name: String @length(min: 1, max: 255, trim: true, ornil: true)

  """
  Version of the OS
  """
  version: String @regex(pattern: "^[0-9]+\\.[0-9]+(\\.[0-9]+)?$", trim: true, ornil: true)

  """
  Description of the OS
  """
  description: String @notempty(trim: true, ornil: true)

  """
  Active status of the OS
  """
  active: ActiveStatus

  """
  Year of release of the OS
  """
  yearRelease: Int

  """
  Year of end of support of the OS
  """
  yearEndSupport: Int

  # Match expressions
  matchNameExp:       String @notempty(trim: true, ornil: true)
  matchUserAgentExp:  String @notempty(trim: true, ornil: true)
  matchVersionMinExp: String @notempty(trim: true, ornil: true)
  matchVersionMaxExp: String @notempty(trim: true, ornil: true)
}

###############################################################################
# Query & Mutation
###############################################################################

extend type Query {
  OS(ID: ID64!): OSPayload @acl(permissions: ["type_os.view.*"])

  """
  List of OS
  """
  listOS(
    filter: OSListFilter = null,
    order: [OSListOrder!]! = null,
    page: Page = null
  ): OSConnection @acl(permissions: ["type_os.list.*"])
}

extend type Mutation {
  """
  Create new OS
  """
  createOS(input: OSCreateInput!): OSPayload @acl(permissions: ["type_os.create.*"])

  """
  Update OS
  """
  updateOS(ID: ID64!, input: OSUpdateInput!): OSPayload @acl(permissions: ["type_os.update.*"])

  """
  Delete OS
  """
  deleteOS(
    """
    OS ID
    """
    ID: ID64!,

    """
    Message for deletion
    """
    msg: String = null
  ): OSPayload @acl(permissions: ["type_os.delete.*"])
}
